{"version":3,"file":"abcffd3cfd855ba706d8.chunk.js","mappings":"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","sources":["webpack://@p2p-wallet-web/web/src/components/common/ButtonCancel/ButtonCancel.tsx","webpack://@p2p-wallet-web/web/./src/app/hooks/useCloseTokenAccount.ts","webpack://@p2p-wallet-web/web/src/components/modals/CloseTokenAccountModal/CloseTokenAccountModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ErrorModal/ErrorModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ProceedUsernameModal/ProceedUsernameModal.tsx","webpack://@p2p-wallet-web/web/src/components/common/FeePaySelector/TokenAccountRow/TokenAccountRow.tsx","webpack://@p2p-wallet-web/web/src/components/common/FeePaySelector/FeePaySelector.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/Create/Create.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/TopUp/TopUp.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/SelectListMobileModal/SelectListMobileModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/common/TransactionDetails/TransactionDetails.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/Send/Send.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionDetailsModal/TransactionDetailsModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/ui/Modal/Modal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/components/common/ButtonCancel/ButtonCancel.tsx","webpack://@p2p-wallet-web/web/src/new/ui/components/common/ErrorHint/ErrorHint.tsx","webpack://@p2p-wallet-web/web/src/new/ui/components/common/PasswordInput/PasswordInput.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ActionsMobileModal/ActionButton/ActionButton.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ActionsMobileModal/ActionsMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ChooseBuyTokenMobileModal/ActionRow.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.ViewModel.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/Modal/Modal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/TransactionProgress/TransactionProgress.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/Status/TransactionID/TransactionID.tsx","webpack://@p2p-wallet-web/web/./src/new/sdk/TransactionParser/model/info/SwapInfo.ts","webpack://@p2p-wallet-web/web/./src/new/sdk/TransactionParser/model/info/TransferInfo.ts","webpack://@p2p-wallet-web/web/./src/new/sdk/TransactionParser/model/ParsedTransaction.ts","webpack://@p2p-wallet-web/web/./src/new/app/models/PendingTransaction.ts","webpack://@p2p-wallet-web/web/./src/new/services/TransactionHandler/TransactionHandler.ts","webpack://@p2p-wallet-web/web/./src/new/utils/libs/nanoEvent.js","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ProcessTransactionModal/ProcessTransactionModal.ViewModel.ts","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/Status/HeaderLabel/HeaderLabel.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/Status/ProgressView/ProgressView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/ProcessTransactionModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/common/styled.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ReceiveBitcoinModal/Create/RenBTCButton/RenBTCButton.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/Create/Create.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ReceiveBitcoinModal/RenBTCStatusService/RenBTCStatusService.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.ViewModel.ts","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/TopUp/TopUp.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/SelectListMobileModal/SelectListMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/AmountSummaryView/AmountSummaryView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/RecipientView/RecipientView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/ConfirmSendModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/common/SectionPassword/SectionPassword.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSwapModal/ActionButton/ActionButton.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/confirmModals/ConfirmSwapModal/ConfirmSwapModal.ViewModel.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/confirmModals/ConfirmSwapModal/DetailsView/SlippageView/SlippageView.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/confirmModals/ConfirmSwapModal/DetailsView/DetailsView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSwapModal/WalletView/WalletView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSwapModal/ConfirmSwapModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/common/ArrowDown/ArrowDown.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/common/styled.ts"],"sourcesContent":["import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useSolana, useTokenAccountsContext, useWallet } from '@p2p-wallet-web/core';\nimport type { HandleTXResponse } from '@p2p-wallet-web/sail';\nimport { useSail } from '@p2p-wallet-web/sail';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { closeAccount } from 'app/instructions';\n\nexport type CloseTokenParams = {\n  publicKey: PublicKey;\n};\n\nexport const useCloseTokenAccount = () => {\n  const { providerMut } = useSolana();\n  const { publicKey } = useWallet();\n  const { handleTX } = useSail();\n  const { updateUserTokenAccountKeys } = useTokenAccountsContext();\n\n  return useCallback(\n    async (params: CloseTokenParams): Promise<HandleTXResponse> => {\n      if (!providerMut) {\n        throw new Error('Provider not ready');\n      }\n\n      const tx = closeAccount(providerMut, params.publicKey, publicKey);\n      const result = await handleTX(tx, `Close token account ${params.publicKey.toBase58()}`);\n      if (result.success) {\n        // TODO: as i checked, you need to reinvestigate better way to update tokens after close\n        // because now it shows after this update\n        updateUserTokenAccountKeys();\n      }\n\n      return result;\n    },\n    [handleTX, providerMut, publicKey],\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type * as web3 from '@solana/web3.js';\nimport type { History } from 'history';\n\nimport { useCloseTokenAccount } from 'app/hooks';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 0;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst CloseAccountIcon = styled(Icon)`\n  width: 25px;\n  height: 25px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px;\n`;\n\nconst ButtonClose = styled(Button)`\n  margin-right: 16px;\n\n  color: #f43d3d;\n\n  border: 1px solid #f43d3d;\n\n  &:disabled {\n    background: #f77;\n    border: none;\n    opacity: 0.5;\n  }\n`;\n\nconst ButtonCancel = styled(Button)`\n  min-width: 93px;\n`;\n\ntype Props = {\n  publicKey: web3.PublicKey;\n  tokenName: string;\n  history: History;\n  close: () => void;\n};\n\nexport const CloseTokenAccountModal: FunctionComponent<Props> = ({\n  publicKey,\n  tokenName,\n  history,\n  close,\n}) => {\n  const closeTokenAccount = useCloseTokenAccount();\n  const [isExecuting, setIsExecuting] = useState(false);\n\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  const handleCloseTokenAButtonClick = async () => {\n    try {\n      setIsExecuting(true);\n      await closeTokenAccount({ publicKey });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsExecuting(false);\n    }\n\n    setTimeout(() => {\n      history.push('/wallets');\n    }, 100);\n\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <CloseAccountIcon name=\"bucket\" />\n      </IconWrapper>\n      <Header>{`Close ${tokenName} account?`}</Header>\n      <Description>\n        Are you sure you want to delete token account? This will permanently disable token transfers\n        to this address and remove it from your wallet.\n      </Description>\n      <Buttons>\n        <ButtonClose disabled={isExecuting} onClick={handleCloseTokenAButtonClick}>\n          Close token account\n        </ButtonClose>\n        <ButtonCancel lightBlue disabled={isExecuting} onClick={handleCloseButtonClick}>\n          Cancel\n        </ButtonCancel>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 24px;\n\n  overflow: hidden;\n\n  background: #fff;\n\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px;\n  padding-bottom: 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px 0;\n`;\n\nconst ButtonStyled = styled(Button)`\n  width: 120px;\n`;\n\ntype Props = {\n  icon: string;\n  header: string;\n  text: string;\n  close: () => void;\n};\n\nexport const ErrorModal: FunctionComponent<Props> = ({ icon, header, text, close }) => {\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <StyledIcon name={icon} />\n      </IconWrapper>\n      <Header>{header}</Header>\n      <Description>{text}</Description>\n      <Buttons>\n        <ButtonStyled primary onClick={handleCloseButtonClick}>\n          Ok\n        </ButtonStyled>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { useSettings } from 'app/contexts/general/settings';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  padding: 22px 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n\n  text-align: center;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Description = styled.div`\n  padding: 16px 20px 24px;\n\n  font-weight: 600;\n  font-size: 16px;\n`;\n\nconst Buttons = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 16px;\n  padding: 16px 20px;\n`;\n\nconst ButtonCancel = styled(Button)`\n  width: 234px;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 32px;\n  right: 32px;\n\n  flex-shrink: 0;\n  width: 36px;\n  height: 36px;\n  margin: -10px -12px -10px 0;\n\n  color: #a3a5ba;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n\n  transition: color 0.15s;\n\n  appearance: none;\n\n  &:hover {\n    color: #000;\n  }\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 14px;\n  height: 14px;\n`;\n\ntype Props = {\n  close: (isHide?: boolean) => void;\n};\n\nexport const ProceedUsernameModal: FC<Props> = ({ close }) => {\n  const { updateSettings } = useSettings();\n\n  const handleCloseButtonClick = () => {\n    updateSettings({ usernameBannerHiddenByUser: true });\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <Header>Proceed without a username?</Header>\n      <Description>\n        Anytime you want, you can easily reserve a username by going to the settings in the Android\n        or iOS app.\n      </Description>\n      <Buttons>\n        <ButtonCancel primary onClick={handleCloseButtonClick}>\n          Proceed &amp; don’t show again\n        </ButtonCancel>\n      </Buttons>\n      <CloseButton type=\"button\" onClick={handleCloseClick}>\n        <CloseIcon name=\"close\" />\n      </CloseButton>\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\n\nconst Wrapper = styled.div`\n  padding: 12px;\n\n  border: 0.5px solid transparent;\n  border-radius: 12px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n    border-color: ${theme.colors.textIcon.links};\n  }\n`;\n\nconst ItemWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 44px;\n`;\n\nconst Info = styled.div`\n  flex: 1;\n  margin-left: 12px;\n`;\n\nconst Top = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 140%;\n  letter-spacing: 0.02em;\n`;\n\nconst Bottom = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\ntype Props = {\n  tokenAccount: TokenAccount;\n  onClick?: (tokenAccount: TokenAccount) => void;\n  className?: string;\n};\n\nexport const TokenAccountRow: FunctionComponent<Props> = ({ tokenAccount, onClick, className }) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(tokenAccount);\n    }\n  };\n\n  const { loading } = tokenAccount;\n\n  return (\n    <Wrapper onClick={handleClick} className={className}>\n      <ItemWrapper>\n        {loading ? (\n          <Skeleton width={44} height={44} borderRadius={12} />\n        ) : (\n          <TokenAvatar size={44} token={tokenAccount.balance?.token} />\n        )}\n        <Info>\n          <Top>\n            {loading ? (\n              <Skeleton width={100} height={16} />\n            ) : (\n              <>{tokenAccount.balance?.formatUnits()}</>\n            )}\n          </Top>\n          <Bottom>\n            {loading ? (\n              <Skeleton width={50} height={16} />\n            ) : tokenAccount.balance ? (\n              <AmountUSD value={tokenAccount.balance} />\n            ) : (\n              <div />\n            )}\n          </Bottom>\n        </Info>\n      </ItemWrapper>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { shadows, theme } from '@p2p-wallet-web/ui';\nimport type { Token } from '@saberhq/token-utils';\nimport classNames from 'classnames';\n\nimport { useMarketsData } from 'app/contexts';\nimport { Empty } from 'components/common/Empty';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { Icon } from 'components/ui';\nimport { SearchInput } from 'new/ui/components/ui/SearchInput';\nimport { matchesFilter, sortByRules } from 'utils/tokens';\n\nimport { TokenAccountRow } from './TokenAccountRow';\n\nconst Wrapper = styled.div`\n  position: relative;\n`;\n\nconst MainWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n  cursor: pointer;\n\n  &.isOpen {\n    border-color: ${theme.colors.textIcon.active};\n  }\n`;\n\nconst SelectedWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst InfoWrapper = styled.div`\n  display: grid;\n  grid-gap: 8px;\n\n  margin-left: 12px;\n`;\n\nconst Line = styled.div`\n  line-height: 17px;\n`;\n\nconst Text = styled.div`\n  display: inline-block;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n\n  &.gray {\n    color: ${theme.colors.textIcon.secondary};\n  }\n`;\n\nconst ChevronIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  &.isOpen {\n    color: ${theme.colors.textIcon.active};\n\n    transform: rotate(180deg);\n  }\n`;\n\nconst DropDownListContainer = styled.div`\n  position: absolute;\n  top: 100%;\n  right: 0;\n  left: 0;\n  z-index: 1;\n\n  padding: 8px;\n  overflow: hidden;\n\n  background: ${theme.colors.bg.primary};\n  border-radius: 8px;\n  ${shadows.notification};\n`;\n\nconst DropDownHeader = styled.div`\n  padding-bottom: 8px;\n\n  backdrop-filter: blur(15px);\n`;\n\nconst DropDownList = styled.div`\n  display: grid;\n  grid-gap: 8px;\n  max-height: 400px;\n  overflow-y: auto;\n\n  &.isShortList {\n    max-height: 200px;\n  }\n`;\n\ninterface Props {\n  tokenAccounts: readonly TokenAccount[];\n  onTokenAccountChange: (token: Token, tokenAccount: TokenAccount | null) => void;\n  isShortList?: boolean;\n}\n\nexport const FeePaySelector: FC<Props> = ({ tokenAccounts, onTokenAccountChange, isShortList }) => {\n  const selectorRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [filter, setFilter] = useState('');\n\n  const symbols = useMemo(() => {\n    return tokenAccounts.map((tokenAccount) => tokenAccount.balance?.token.symbol);\n  }, [tokenAccounts]);\n  const markets = useMarketsData(symbols);\n\n  const handleAwayClick = (e: MouseEvent) => {\n    if (\n      !selectorRef.current?.contains(e.target as HTMLDivElement) &&\n      !dropdownRef.current?.contains(e.target as HTMLDivElement)\n    ) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', handleAwayClick, true);\n\n    return () => {\n      window.removeEventListener('click', handleAwayClick, true);\n    };\n  }, []);\n\n  const handleFilterChange = (value: string) => {\n    const nextFilter = value.trim();\n\n    setFilter(nextFilter);\n  };\n\n  const filteredTokenAccounts = useMemo(() => {\n    if (!tokenAccounts) {\n      return [];\n    }\n\n    const filteredWithBalance = tokenAccounts.filter((account) => account.balance?.greaterThan(0));\n\n    return filteredWithBalance\n      .filter(\n        (account) =>\n          account.balance &&\n          (matchesFilter(account.balance.token.symbol, filter) ||\n            matchesFilter(account.balance.token.name, filter)),\n      )\n      .sort(sortByRules(markets));\n  }, [tokenAccounts, filter, markets]);\n\n  const handleTokenAccountClick = (nextTokenAccount: TokenAccount) => {\n    if (!nextTokenAccount.balance) {\n      return;\n    }\n\n    setIsOpen(false);\n    onTokenAccountChange(nextTokenAccount.balance?.token, nextTokenAccount);\n  };\n\n  return (\n    <Wrapper>\n      <MainWrapper\n        ref={selectorRef}\n        onClick={() => setIsOpen((state) => !state)}\n        className={classNames({ isOpen })}\n      >\n        <SelectedWrapper>\n          <div>\n            <TokenAvatar symbol=\"SOL\" size={44} />\n          </div>\n          <InfoWrapper>\n            <Line>\n              <Text className=\"gray\">USDC account creation:</Text> <Text>~$0.50</Text>\n            </Line>\n            <Line>\n              <Text className=\"gray\">Pay with:</Text> <Text>0.509 USDC</Text>\n            </Line>\n          </InfoWrapper>\n        </SelectedWrapper>\n        <ChevronIcon name=\"chevron\" className={classNames({ isOpen })} />\n      </MainWrapper>\n      {isOpen ? (\n        <DropDownListContainer ref={dropdownRef}>\n          <DropDownHeader>\n            <SearchInput\n              placeholder=\"Search for token\"\n              value={filter}\n              onChange={handleFilterChange}\n            />\n          </DropDownHeader>\n          <DropDownList ref={listRef} className={classNames({ isShortList })}>\n            {filteredTokenAccounts?.length ? (\n              <>\n                {filteredTokenAccounts.map(\n                  (account) =>\n                    account.key && (\n                      <TokenAccountRow\n                        key={account.key.toBase58()}\n                        tokenAccount={account}\n                        onClick={handleTokenAccountClick}\n                      />\n                    ),\n                )}\n              </>\n            ) : undefined}\n            {!filteredTokenAccounts?.length ? <Empty type=\"search\" /> : undefined}\n          </DropDownList>\n        </DropDownListContainer>\n      ) : undefined}\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\n\nimport { Modal } from 'components/ui/Modal';\n\nexport const WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nexport const Section = styled.div`\n  display: grid;\n  grid-gap: 24px;\n  padding: 16px 0 24px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-gap: 16px;\n  margin: 0;\n  padding-left: 32px;\n`;\n\nexport const Row = styled.li``;\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { useSolana, useUserTokenAccounts } from '@p2p-wallet-web/core';\nimport { Bitcoin } from '@renproject/chains-bitcoin';\nimport { Solana } from '@renproject/chains-solana';\nimport type { Token } from '@saberhq/token-utils';\nimport { Feature } from 'flagged';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { FeePaySelector } from 'components/common/FeePaySelector';\nimport { HMSCountdown } from 'components/common/HMSCountdown';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Button } from 'components/ui';\nimport { FEATURE_PAY_BY } from 'config/featureFlags';\nimport { getRemainingGatewayTime } from 'utils/hooks/renBridge/useLockAndMint';\nimport { useRenNetwork } from 'utils/hooks/renBridge/useNetwork';\nimport { useLockAndMintProvider } from 'utils/providers/LockAndMintProvider';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const Create: FC<Props> = ({ close }) => {\n  const solanaProvider = useSolana();\n  const network = useRenNetwork();\n  const tokenAccounts = useUserTokenAccounts();\n  const { expiryTime } = useLockAndMintProvider();\n\n  // TODO: use for progress bar in Modal. Add this feature to modal\n  const [creating, setCreating] = useState(false);\n\n  const handleFeeTokenAccountChange = (\n    _nextToken: Token,\n    nextTokenAccount: TokenAccount | null,\n  ) => {\n    if (!nextTokenAccount?.key) {\n      return;\n    }\n  };\n\n  const handleCreateAccountClick = async () => {\n    try {\n      setCreating(true);\n      await new Solana(solanaProvider, network).createAssociatedTokenAccount(Bitcoin.asset);\n      close(true);\n    } catch (error) {\n      ToastManager.error((error as Error).message);\n      console.error(error);\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleCreateAccountClick}>\n            Pay 0.002928 SOL & Continue\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>. You can choose which currency to pay in\n            below.\n          </Row>\n        </List>\n\n        <Feature name={FEATURE_PAY_BY}>\n          <FeePaySelector\n            tokenAccounts={tokenAccounts}\n            onTokenAccountChange={handleFeeTokenAccountChange}\n            isShortList\n          />\n        </Feature>\n\n        <List>\n          <Row>\n            This address accepts <strong>only Bitcoin</strong>. You may lose assets by sending\n            another coin.\n          </Row>\n          <Row>\n            Minimum transaction amount of <strong>0.000112 BTC</strong>.\n          </Row>\n          <Row>\n            <strong>\n              <HMSCountdown milliseconds={getRemainingGatewayTime(expiryTime)} />\n            </strong>\n            &nbsp; is the remaining time to safely send the assets\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory } from 'react-router';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { Button } from 'components/ui';\nimport { trackEvent } from 'utils/analytics';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const TopUp: FC<Props> = ({ close }) => {\n  const history = useHistory();\n\n  const handleTopUpClick = () => {\n    trackEvent('Receive_Topping_Up');\n\n    close(false);\n    history.push('/buy');\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleTopUpClick}>\n            Top up your account\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            A <strong>renBTC account is required</strong> to receive bitcoins over the Bitcoin\n            network.\n          </Row>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>.\n          </Row>\n          <Row>\n            You <strong>don't have funds</strong> to pay for account creation, but if someone sends\n            renBTC to your address, it will be created for you.\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport type { u64 } from '@solana/spl-token';\n\nimport type { ModalPropsType } from 'app/contexts';\n\nimport { Create } from './Create';\nimport { TopUp } from './TopUp';\n\ninterface Props {\n  accountRentExemption: u64;\n  nativeBalance: TokenAmount;\n}\n\nexport const ReceiveBitcoinModal: FC<ModalPropsType<boolean, Props>> = (props) => {\n  const nativeLamports = props.nativeBalance?.toU64().toNumber() ?? 0;\n  const lamportsRentExcemption = props.accountRentExemption.toNumber();\n  const isEnoughSol = nativeLamports > lamportsRentExcemption;\n\n  if (isEnoughSol) {\n    return <Create close={props.close} />;\n  }\n\n  return <TopUp close={props.close} />;\n};\n","import type { FC, ReactElement } from 'react';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { Modal } from 'components/ui/Modal';\n\ntype Props = {\n  items: ReactElement[];\n  title?: string;\n};\n\nexport const SelectListMobileModal: FC<ModalPropsType & Props> = ({ items, close, title }) => {\n  return (\n    <Modal noDelimiter={false} close={close} title={title}>\n      {items}\n    </Modal>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 27px;\n\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 40%;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 5px;\n  left: -2px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 19px;\n\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { UseSendState } from 'app/contexts';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { ListWrapper, Row, Text } from 'components/ui/AccordionDetails/common';\n\nexport interface TransactionDetailsProps {\n  sendState?: UseSendState;\n  btcAddress?: string;\n  isOpen?: boolean;\n  amount?: TokenAmount;\n}\n\nconst TokenAndUsd = styled.div`\n  display: flex;\n`;\n\nconst AmountUSDStyled = styled(AmountUSD)`\n  margin-left: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const TransactionDetails: FC<TransactionDetailsProps> = ({ sendState, amount }) => {\n  /*const {\n    settings: { useFreeTransactions },\n  } = useSettings();*/\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Transaction details\"\n          titleBottomName=\"Total\"\n          titleBottomValue={sendState?.details.totalAmount || ''}\n        />\n      }\n      open={false}\n      noContentPadding\n    >\n      <ListWrapper>\n        <Row>\n          <Text className=\"gray\">Receive</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.receiveAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n        {/*<Row>\n          <Text className=\"gray\">Transaction fee</Text>\n          {useFreeTransactions ? (\n            <Text>\n              Free{' '}\n              <Text className=\"green inline-flex\">\n                (Paid by P2P.org) <FeeTransactionTooltip userFreeFeeLimits={userFreeFeeLimits} />\n              </Text>\n            </Text>\n          ) : (\n            <Text>1</Text>\n          )}\n          <Text>5000 lamport</Text>\n        </Row>*/}\n        {/*sendState?.details.accountCreationAmount ? (\n          <Row>\n            <Text className=\"gray\">{sendState.destinationAccount?.symbol} account creation</Text>\n            <TokenAndUsd>\n              <Text>{sendState.details.accountCreationAmount}</Text>\n              <AmountUSD\n                prefix=\"(~\"\n                postfix=\")\"\n                amount={networkFees?.accountRentExemption}\n                tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n              />\n            </TokenAndUsd>\n          </Row>\n        ) : undefined*/}\n      </ListWrapper>\n      <ListWrapper className=\"total\">\n        <Row>\n          <Text>Total</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.totalAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n      </ListWrapper>\n    </Accordion>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  To,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props & TransactionDetailsProps> = ({ params, sendState, btcAddress }) => {\n  const address = params.destination?.toBase58?.() || btcAddress;\n  const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>\n                <To>To</To>\n                {isFullName ? params.username : `${params.username}.p2p.sol`}\n              </Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>{address && <AddressText address={address} medium />}</InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <TransactionDetails sendState={sendState} amount={params.amount} />\n    </Section>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { ModalPropsType } from 'app/contexts/general/modals/types';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\n// import type { SwapParams } from './Swap';\n// import { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ntype ModalParams = {\n  type: 'send' | 'swap';\n  params: TransferParams /*| SwapParams;*/;\n};\n\nexport type TransactionConfirmModalProps = TransactionDetailsProps &\n  ModalParams &\n  FeesOriginalProps;\n\nexport const TransactionConfirmModal: FunctionComponent<\n  ModalPropsType & TransactionConfirmModalProps\n> = ({ type, params, close, btcAddress, swapInfo, sendState }) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    if (type === 'send') {\n      trackEvent('Send_Reviewing');\n    }\n  }, []);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    if (type === 'send') {\n      trackEvent('Send_Verification_Invoked');\n    }\n\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled = isSecretKeyWallet && (!password || hasError);\n\n  const renderTitle = () => {\n    switch (type) {\n      case 'send':\n        return <ModalTitle>Confirm sending {params.source.balance?.token.symbol}</ModalTitle>;\n      default:\n        return (\n          <ModalTitle>\n            Confirm swapping {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </ModalTitle>\n        );\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = (\n          <>\n            <SendIcon name=\"swap\" />\n            Swap {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </>\n        );\n        break;\n      case 'send':\n      default:\n        action = (\n          <>\n            <SendIcon name=\"top\" />\n            Send {params.amount.formatUnits()}\n          </>\n        );\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <ButtonCancel onClick={handleCloseClick} />\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title={renderTitle()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n      noDelimiter={false}\n    >\n      {type === 'send' ? <ActionTitle>You are going to send</ActionTitle> : undefined}\n      {type === 'send' ? (\n        <Send params={params} sendState={sendState} btcAddress={btcAddress} />\n      ) : undefined}\n      {/*{type === 'swap' ? (*/}\n      {/*  <Swap params={params as SwapParams} swapInfo={swapInfo} showTitle={true} />*/}\n      {/*) : undefined}*/}\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled\n            value={password}\n            onChange={handlePasswordChange}\n            isError={hasError}\n          />\n          {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport {\n  SwapTransaction,\n  titleCase,\n  TransferTransaction,\n  useTokenAccount,\n  useTokenAccountAmount,\n  useTransaction,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { usePubkey } from '@p2p-wallet-web/sail';\nimport type { TransactionSignature } from '@solana/web3.js';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { trackEvent } from 'utils/analytics';\nimport { getExplorerUrl } from 'utils/connection';\nimport { formatNumber } from 'utils/format';\nimport { shortAddress } from 'utils/tokens';\n\nimport {\n  ButtonExplorer,\n  CloseIcon,\n  CloseWrapper,\n  Content,\n  Desc,\n  FieldsWrapper,\n  FieldTitle,\n  FieldValue,\n  FieldWrapper,\n  Footer,\n  Header,\n  ProgressWrapper,\n  SendWrapper,\n  ShareIcon,\n  ShareWrapper,\n  SwapAmount,\n  SwapBlock,\n  SwapColumn,\n  SwapIcon,\n  SwapInfo,\n  SwapWrapper,\n  Title,\n  ValueCurrency,\n  ValueOriginal,\n  WrapperModal,\n} from '../common/styled';\n\nconst StatusWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 24px;\n`;\n\nconst Status = styled.div`\n  display: flex;\n  align-items: center;\n  height: 32px;\n  padding: 2px 10px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 20px;\n\n  background: rgba(246, 246, 248, 0.5);\n  border-radius: 6px;\n`;\n\nconst StatusIndicator = styled.div`\n  width: 8px;\n  height: 8px;\n  margin-right: 6px;\n\n  background: #77db7c;\n  border-radius: 2px;\n\n  &.error {\n    background: #f43d3d;\n  }\n\n  &.processing {\n    background: #ffa631;\n  }\n`;\n\nconst FieldRowWrapper = styled(FieldWrapper)`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 36px;\n`;\n\nconst ColumnWrapper = styled.div``;\n\nconst FieldInfo = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nconst AddressTitle = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst AddressValue = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n`;\n\nconst FieldTitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PaidByBadge = styled.div`\n  padding: 1px 8px;\n\n  color: #5887ff;\n  font-weight: 600;\n  font-size: 12px;\n\n  background: #eff3ff;\n  border-radius: 4px;\n`;\n\nconst PaddedHeader = styled(Header)`\n  padding: 24px;\n`;\n\ntype Props = {\n  signature: TransactionSignature;\n  source: string;\n  close: () => void;\n};\n\nexport const TransactionDetailsModal: FC<Props> = ({ signature, source: sourceAddress, close }) => {\n  const [isShowDetails, setShowDetails] = useState(false);\n  const { network } = useWallet();\n  const transaction = useTransaction(signature, sourceAddress);\n\n  const sourceTokenAccount = useTokenAccount(usePubkey(transaction?.data?.source));\n  const destinationTokenAccount = useTokenAccount(usePubkey(transaction?.data?.destination));\n\n  const tokenAmount = useTokenAccountAmount(\n    usePubkey(transaction?.details.tokenAccount),\n    transaction?.details.amount,\n  );\n\n  useEffect(() => {\n    const type = transaction?.details.type;\n\n    if (type === 'send') {\n      trackEvent('Send_Process_Shown');\n    } else if (type === 'swap') {\n      trackEvent('Swap_Process_Shown');\n    }\n  }, [transaction?.details.type]);\n\n  // useEffect(() => {\n  //   const mount = async () => {\n  //     const trx = unwrapResult(await dispatch(getTransaction(signature)));\n  //\n  //     if (!trx) {\n  //       setTimeout(mount, 3000);\n  //     }\n  //   };\n  //\n  //   if (!transaction) {\n  //     void mount();\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [signature]);\n\n  if (transaction?.loading) {\n    return null;\n  }\n\n  const handleToggleShowDetailsClick = () => {\n    setShowDetails((state) => !state);\n  };\n\n  const renderFromTo = () => {\n    const type = transaction?.details.type;\n\n    const source = transaction?.data?.source;\n    const destination = transaction?.data?.destination;\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <>\n          {source ? (\n            <FieldWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldValue>{source}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n          {destination ? (\n            <FieldWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldValue>{destination}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n        </>\n      );\n    }\n\n    if (type && ((source && sourceToken) || (destination && destinationToken))) {\n      return (\n        <FieldRowWrapper>\n          {source && sourceToken ? (\n            <ColumnWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar symbol={sourceToken.symbol} address={sourceToken.address} size={48} />\n                <AddressWrapper>\n                  <AddressTitle>{sourceToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(source)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n          {destination && destinationToken ? (\n            <ColumnWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar\n                  symbol={destinationToken.symbol}\n                  address={destinationToken.address}\n                  size={48}\n                />\n                <AddressWrapper>\n                  <AddressTitle>{destinationToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(destination)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n        </FieldRowWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const renderAmountBlock = () => {\n    const type = transaction?.details.type;\n\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <SwapWrapper>\n          <SwapColumn>\n            <SwapInfo>\n              {sourceTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={sourceToken?.symbol}\n                  address={sourceToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={50} height={16} />\n                ) : (\n                  <>- {sourceTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n          <SwapBlock>\n            <SwapIcon name=\"swap\" />\n          </SwapBlock>\n          <SwapColumn>\n            <SwapInfo>\n              {destinationTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={destinationToken?.symbol}\n                  address={destinationToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={80} height={16} />\n                ) : (\n                  <>+ {destinationTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n        </SwapWrapper>\n      );\n    }\n\n    if (transaction?.loading || sourceTokenAccount?.loading || tokenAmount.loading) {\n      return (\n        <SendWrapper>\n          <Skeleton width={70} height={53} />\n        </SendWrapper>\n      );\n    }\n\n    if (tokenAmount.balance) {\n      return (\n        <SendWrapper>\n          <ValueCurrency>\n            {transaction?.details.isReceiver ? '+' : '-'} {tokenAmount.balance.formatUnits()}\n          </ValueCurrency>\n          <ValueOriginal>\n            <AmountUSD\n              prefix={transaction?.details.isReceiver ? '+ ' : '- '}\n              value={tokenAmount.balance}\n            />\n          </ValueOriginal>\n        </SendWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const date = transaction?.raw?.blockTime\n    ? dayjs.unix(transaction.raw.blockTime).format('LLL')\n    : `${transaction?.raw?.slot} SLOT`;\n\n  const isShowFeeBadge =\n    transaction?.data instanceof TransferTransaction && transaction.data.wasPaidByP2POrg;\n\n  return (\n    <WrapperModal close={close}>\n      <PaddedHeader>\n        <Title>{titleCase(transaction?.details.type)}</Title>\n        <Desc title={`${transaction?.raw?.slot} SLOT`}>{date}</Desc>\n        <CloseWrapper onClick={close}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n      </PaddedHeader>\n      <ProgressWrapper />\n      <Content>\n        {/* {details.typeOriginal === 'transfer' ? ( */}\n        {/*  <SendWrapper> */}\n        {/*    <ValueCurrency> */}\n        {/*      {details.isReceiver ? '+' : '-'} {details.sourceAmount.toNumber()}{' '} */}\n        {/*      {details.sourceToken?.symbol} */}\n        {/*    </ValueCurrency> */}\n        {/*    <ValueOriginal> */}\n        {/*      <AmountUSD */}\n        {/*        prefix={details.isReceiver ? '+' : '-'} */}\n        {/*        symbol={details.sourceToken?.symbol} */}\n        {/*        value={details.sourceAmount} */}\n        {/*      /> */}\n        {/*    </ValueOriginal> */}\n        {/*  </SendWrapper> */}\n        {/* ) : undefined} */}\n\n        {renderAmountBlock()}\n        <StatusWrapper>\n          <Status>\n            <StatusIndicator\n              className={classNames({\n                error: !!transaction?.raw?.meta?.err,\n                // processing: !transaction?.raw?.slot,\n              })}\n            />{' '}\n            {transaction?.raw?.meta?.err\n              ? 'Failed'\n              : !transaction?.raw?.slot\n              ? 'Pending'\n              : 'Completed'}\n          </Status>\n        </StatusWrapper>\n        <FieldsWrapper>\n          {isShowDetails ? (\n            <>\n              {renderFromTo()}\n              {(sourceTokenAccount?.balance && destinationTokenAccount?.balance) ||\n              tokenAmount?.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Amount</FieldTitle>\n                  <FieldValue>\n                    {transaction?.data instanceof SwapTransaction ? (\n                      <>\n                        {sourceTokenAccount?.balance?.formatUnits()} to{' '}\n                        {destinationTokenAccount?.balance?.formatUnits()}\n                      </>\n                    ) : (\n                      <>{tokenAmount?.balance?.formatUnits()}</>\n                    )}\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {tokenAmount.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Value</FieldTitle>\n                  <FieldValue>\n                    <AmountUSD value={tokenAmount.balance} />\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {transaction?.raw?.meta ? (\n                <FieldWrapper>\n                  <FieldTitleWrapper>\n                    <FieldTitle>Transaction fee</FieldTitle>\n                    {isShowFeeBadge ? <PaidByBadge>Paid by p2p.org</PaidByBadge> : undefined}\n                  </FieldTitleWrapper>\n                  <FieldValue>{formatNumber(transaction.raw.meta?.fee)} lamports</FieldValue>\n                </FieldWrapper>\n              ) : null}\n              <FieldWrapper>\n                <FieldTitle>Block number</FieldTitle>\n                <FieldValue>#{transaction?.raw?.slot}</FieldValue>\n              </FieldWrapper>\n            </>\n          ) : undefined}\n          <FieldWrapper>\n            <FieldTitle>Transaction ID</FieldTitle>\n            <FieldValue>\n              {signature}{' '}\n              <a\n                href={getExplorerUrl('tx', signature, network)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer noindex\"\n                className=\"button\"\n              >\n                <ShareWrapper>\n                  <ShareIcon name=\"external\" />\n                </ShareWrapper>\n              </a>\n            </FieldValue>\n          </FieldWrapper>\n        </FieldsWrapper>\n      </Content>\n      <Footer className={classNames({ isCentered: true })}>\n        <ButtonExplorer lightGray onClick={handleToggleShowDetailsClick}>\n          {isShowDetails ? 'Hide transaction details' : 'Show transaction details'}\n        </ButtonExplorer>\n      </Footer>\n    </WrapperModal>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme, up, zIndexes } from '@p2p-wallet-web/ui';\n\nimport { Button, Icon } from 'components/ui';\nimport { Content as ModalContent, Modal } from 'components/ui/Modal';\n\nexport const StatusColors = styled.div`\n  &.isProcessing {\n    background: ${theme.colors.system.warningMain};\n  }\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const WrapperModal = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  padding: 0;\n  overflow: scroll;\n\n  background: ${theme.colors.bg.primary};\n\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n\n  ${ModalContent} {\n    ${up.tablet} {\n      width: 524px;\n    }\n\n    padding: 0;\n  }\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 24px;\n  font-style: normal;\n  line-height: 140%;\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.bg.buttonPrimary};\n\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionLabel = styled(StatusColors)`\n  display: block;\n  width: 8px;\n  height: 8px;\n\n  margin-right: 8px;\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: ${theme.colors.bg.buttonSecondary};\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid rgba(0, 0, 0, 0.05);\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n\n    ${ShareIcon} {\n      color: ${theme.colors.textIcon.active};\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 20px;\n`;\n","import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  doNotCloseOnPathChangeMobile?: boolean;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  doNotCloseOnPathChangeMobile,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && !doNotCloseOnPathChangeMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, doNotCloseOnPathChangeMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 8px;\n\n  color: #f43d3d;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst WarningIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n  margin-right: 12px;\n\n  color: #f43d3d;\n`;\n\ninterface Props {\n  error: string;\n  noIcon?: boolean;\n}\n\nexport const ErrorHint: FC<Props> = ({ error, noIcon }) => {\n  return (\n    <Wrapper>\n      {!noIcon ? <WarningIcon name=\"warning\" /> : undefined}\n      {error}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useState } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\nconst WrapperLabel = styled.label`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  height: 54px;\n  padding: 0 15px;\n\n  border: 1px solid ${theme.colors.stroke.primary};\n  border-radius: 12px;\n  cursor: text;\n\n  &.isFocused {\n    background: ${theme.colors.bg.primary};\n    border-color: ${theme.colors.textIcon.active};\n    caret-color: ${theme.colors.textIcon.active};\n  }\n\n  &.isError {\n    border-color: ${theme.colors.system.errorMain};\n  }\n`;\n\nconst Input = styled.input`\n  flex: 1;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  font-family: 'Inter', sans-serif;\n  line-height: 22px;\n\n  background: transparent;\n  border: 0;\n  outline: none;\n\n  appearance: none;\n\n  &::placeholder {\n    color: ${theme.colors.textIcon.tertiary};\n\n    font-weight: 500;\n    font-size: 16px;\n    font-family: 'Inter', sans-serif;\n    font-style: normal;\n    line-height: 140%;\n  }\n`;\n\nconst EyeWrapper = styled.div`\n  cursor: pointer;\n`;\n\nconst EyeIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonSecondary};\n`;\n\nconst REGEX_PASSWORD = /[^\\w!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g;\n\ntype Props = {\n  onChange: (password: string) => void;\n  isError: boolean;\n};\n\nexport const PasswordInput: FC<\n  Props & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'onChange'>\n> = ({ onChange, onFocus, onBlur, className, isError, ...props }) => {\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(REGEX_PASSWORD, '');\n    onChange(value);\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  const handleToggleShowPassword = () => {\n    setIsShowPassword((state) => !state);\n  };\n\n  return (\n    <WrapperLabel className={classNames(className, { isFocused, isError })}>\n      <Input\n        type={isShowPassword ? 'input' : 'password'}\n        {...props}\n        placeholder={'Password'}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n      <EyeWrapper onClick={handleToggleShowPassword}>\n        <EyeIcon name={isShowPassword ? 'eye' : 'eye-hide'} />\n      </EyeWrapper>\n    </WrapperLabel>\n  );\n};\n","import type { FC, HTMLAttributes } from 'react';\nimport React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n\n  &:not(:last-child)::before {\n    position: absolute;\n\n    bottom: -12px;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 20px;\n  height: 20px;\n`;\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon: string;\n}\n\nexport const ActionButton: FC<Props> = ({ icon, onClick, children }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      <IconWrapper>\n        <IconStyled name={icon} />\n      </IconWrapper>\n      {children}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { styled } from '@linaria/react';\n\nimport type { LayoutViewModel } from 'new/ui/components/common/Layout/Layout.ViewModel';\nimport { ActionButton } from 'new/ui/modals/ActionsMobileModal/ActionButton';\nimport { Modal } from 'new/ui/modals/Modal';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nconst Content = styled.div`\n  display: grid;\n  grid-gap: 25px;\n\n  padding: 18px 0;\n`;\n\ninterface Props {\n  layoutViewModel: LayoutViewModel;\n}\n\nexport const ActionsMobileModal: FC<Props & ModalPropsType> = ({ close, layoutViewModel }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const handleButtonClick = (route: string) => () => {\n    close(false);\n\n    if (location.pathname !== route) {\n      history.push(route, { fromPage: location.pathname });\n    }\n  };\n\n  const handleBuyButtonClick = () => {\n    close(false);\n    layoutViewModel.openChooseBuyTokenMobileModal();\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  return (\n    <Modal close={handleCloseClick} noDelimiter>\n      <Content>\n        <ActionButton icon=\"plus\" onClick={handleBuyButtonClick}>\n          Buy\n        </ActionButton>\n        <ActionButton icon=\"bottom\" onClick={handleButtonClick('/receive')}>\n          Receive\n        </ActionButton>\n        <ActionButton icon=\"top\" onClick={handleButtonClick('/send')}>\n          Send\n        </ActionButton>\n        <ActionButton icon=\"swap\" onClick={handleButtonClick('/swap')}>\n          Swap\n        </ActionButton>\n      </Content>\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport type { Token, Wallet } from 'new/sdk/SolanaSDK';\nimport {\n  BaseTokenCellContent,\n  BaseWalletCellContent,\n} from 'new/ui/components/common/BaseWalletCellContent';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 26px 10px;\n`;\n\ninterface Props {\n  wallet?: Wallet;\n  token?: Token;\n  onClick: () => void;\n}\n\nexport const ActionRow: FC<Props> = ({ wallet, token, onClick }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      {token ? (\n        <BaseTokenCellContent token={token} isMobilePopupChild />\n      ) : (\n        <BaseWalletCellContent wallet={wallet} isMobilePopupChild />\n      )}\n    </Wrapper>\n  );\n};\n","import { action, makeObservable, observable, reaction, runInAction } from 'mobx';\nimport { singleton } from 'tsyringe';\n\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport type { Token, Wallet } from 'new/sdk/SolanaSDK';\nimport { CryptoCurrency } from 'new/services/BuyService/structures';\nimport { WalletsRepository } from 'new/services/Repositories';\nimport { SolanaService } from 'new/services/SolanaService';\n\n@singleton()\nexport class ChooseBuyTokenMobileModalViewModel extends ViewModel {\n  solWallet?: Wallet;\n  usdcWallet?: Wallet;\n\n  solToken?: Token;\n  usdcToken?: Token;\n\n  constructor(private _wallets: WalletsRepository, private _solanaService: SolanaService) {\n    super();\n\n    makeObservable(this, {\n      solWallet: observable,\n      usdcWallet: observable,\n\n      solToken: observable,\n      usdcToken: observable,\n    });\n\n    this._setWallets(\n      this._getBuySelectionWallet(CryptoCurrency.sol),\n      this._getBuySelectionWallet(CryptoCurrency.usdc),\n    );\n  }\n\n  protected override setDefaults() {}\n\n  protected override onInitialize() {\n    this.addReaction(\n      reaction(\n        () => [\n          this._getBuySelectionWallet(CryptoCurrency.sol),\n          this._getBuySelectionWallet(CryptoCurrency.usdc),\n        ],\n        ([newSOLWallet, newUSDCWallet]) => this._setWallets(newSOLWallet, newUSDCWallet),\n      ),\n    );\n  }\n\n  protected override afterReactionsRemoved() {}\n\n  private _getBuySelectionWallet(cryptoCurrency: CryptoCurrency): Wallet | undefined {\n    return this._wallets\n      .getWallets()\n      .find(\n        (wallet) =>\n          wallet.token.symbol === cryptoCurrency.symbol &&\n          wallet.token.address === cryptoCurrency.mintAddress,\n      );\n  }\n\n  private _getToken(cryptoCurrency: CryptoCurrency): Promise<Token | undefined> {\n    return this._solanaService.getToken(cryptoCurrency.mintAddress);\n  }\n\n  private _setWallets(newSOLWallet?: Wallet, newUSDCWallet?: Wallet): void {\n    if (newSOLWallet) {\n      runInAction(() => (this.solWallet = newSOLWallet));\n    } else {\n      this._getToken(CryptoCurrency.sol).then(\n        action((newSOLToken) => (this.solToken = newSOLToken)),\n      );\n    }\n\n    if (newUSDCWallet) {\n      runInAction(() => (this.usdcWallet = newUSDCWallet));\n    } else {\n      this._getToken(CryptoCurrency.usdc).then(\n        action((newUSDCToken) => (this.usdcToken = newUSDCToken)),\n      );\n    }\n  }\n}\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport { CryptoCurrency } from 'new/services/BuyService/structures';\nimport { ActionRow } from 'new/ui/modals/ChooseBuyTokenMobileModal/ActionRow';\nimport { ChooseBuyTokenMobileModalViewModel } from 'new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.ViewModel';\nimport { Modal } from 'new/ui/modals/Modal';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nexport const ChooseBuyTokenMobileModal: FC<ModalPropsType> = observer(({ close }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { solWallet, solToken, usdcWallet, usdcToken } = useViewModel(\n    ChooseBuyTokenMobileModalViewModel,\n  );\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const handleRowClick = (cryptoCurrency: CryptoCurrency) => {\n    close(false);\n\n    const newPath = `/buy/${cryptoCurrency.symbol}`;\n\n    if (location.pathname !== newPath) {\n      history.push(newPath);\n    }\n  };\n\n  return (\n    <Modal noDelimiter={false} close={handleCloseClick} title=\"Choose a crypto for buying\">\n      <ActionRow\n        wallet={solWallet}\n        token={solToken}\n        onClick={() => handleRowClick(CryptoCurrency.sol)}\n      />\n      <ActionRow\n        wallet={usdcWallet}\n        token={usdcToken}\n        onClick={() => handleRowClick(CryptoCurrency.usdc)}\n      />\n    </Modal>\n  );\n});\n","import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme, zIndexes } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\nimport { StatusColors, TransactionLabel } from '../styled';\n\nconst INITIAL_PROGRESS = 5;\n\nexport const ProgressIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionStatus = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-top: 13px;\n  margin-left: 38px;\n\n  color: ${theme.colors.textIcon.primary};\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const TransactionBadge = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-left: 4px;\n  padding: 5px 12px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 12px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 4px;\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const ProgressLine = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.middle};\n\n  width: ${INITIAL_PROGRESS}%;\n  height: 2px;\n\n  background: ${theme.colors.bg.buttonPrimary};\n\n  transition: width 0.15s;\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const ProgressStub = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.bottom};\n\n  width: 100%;\n  height: 1px;\n\n  background: ${theme.colors.stroke.secondary};\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nconst UPPER_PROGRESS_BOUND = 95;\nconst LOWER_PROGRESS_BOUND = 7;\nconst FULL_PROGRESS = 100;\nconst CHECK_PROGRESS_INTERVAL = 2500;\n\nexport interface Props {\n  isError: boolean;\n  isProcessing: boolean;\n  isSuccess: boolean;\n  isExecuting: boolean;\n  label: string;\n}\n\nexport const TransactionProgress: FC<Props> = (props) => {\n  const [progress, setProgress] = useState(INITIAL_PROGRESS);\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!props.isExecuting) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= UPPER_PROGRESS_BOUND) {\n        newProgress += LOWER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      } else {\n        newProgress = UPPER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      }\n    }, CHECK_PROGRESS_INTERVAL);\n\n    return () => {\n      clearTimeout(timerId);\n      setProgress(FULL_PROGRESS);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isExecuting]);\n\n  const renderStatus = (executing: boolean, success: boolean, error: boolean) => {\n    switch (true) {\n      case executing:\n        return 'Pending';\n      case error:\n        return 'Error';\n      case success:\n        return 'Completed';\n      default:\n        return 'Pending';\n    }\n  };\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressLine\n          style={{ width: `${progress}%` }}\n          className={classNames({\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        />\n        <ProgressStub />\n\n        <BlockWrapper\n          className={classNames({\n            isProcessing: props.isProcessing,\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        >\n          {props.isSuccess ? (\n            <ProgressIcon name=\"success-send\" />\n          ) : (\n            <ProgressIcon name={props.isError ? 'error-send' : 'clock-send'} />\n          )}\n        </BlockWrapper>\n      </ProgressWrapper>\n      <TransactionStatus>\n        {props.label}\n        <TransactionBadge>\n          <TransactionLabel\n            className={classNames({\n              isProcessing: props.isProcessing,\n              isSuccess: props.isSuccess,\n              isError: props.isError,\n            })}\n          />\n          {renderStatus(props.isExecuting, props.isSuccess, props.isError)}\n        </TransactionBadge>\n      </TransactionStatus>\n    </>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { Network } from '@saberhq/solana-contrib';\n\nimport { Icon } from 'components/ui';\nimport type { TransactionID as TransactionIDType } from 'new/sdk/SolanaSDK';\nimport { getExplorerUrl, truncatingMiddle } from 'new/utils/StringExtensions';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nconst ExplorerBlockLink = styled.a`\n  display: grid;\n  grid-gap: 4px;\n\n  color: inherit;\n  font-size: inherit;\n  text-align: right;\n  text-decoration: none;\n`;\n\nconst Address = styled.div`\n  display: flex;\n  align-items: center;\n\n  color: ${theme.colors.textIcon.primary};\n`;\n\nconst ExternalIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n  margin-left: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\ninterface Props {\n  transactionID: TransactionIDType;\n  network?: Network;\n}\n\nexport const TransactionID: FC<Props> = ({ transactionID, network = 'mainnet-beta' }) => {\n  return (\n    <Wrapper>\n      <div>Transaction ID</div>\n      <ExplorerBlockLink\n        href={getExplorerUrl('tx', transactionID, network)}\n        target=\"_blank\"\n        rel=\"noopener noreferrer noindex\"\n      >\n        <Address>\n          {truncatingMiddle(transactionID, {\n            numOfSymbolsRevealed: 9,\n            numOfSymbolsRevealedInSuffix: 9,\n          })}\n          <ExternalIcon name=\"external\" />\n        </Address>\n        <div>Tap to view in explorer</div>\n      </ExplorerBlockLink>\n    </Wrapper>\n  );\n};\n","import type { Wallet } from 'new/sdk/SolanaSDK';\n\nimport type { Info } from './Info';\n\n// A direction of swap on depends on account symbol view.\nenum Direction {\n  // The spending swap transaction\n  //\n  // [A] -> B\n  spend = 'spend',\n\n  // The receiving swap transaction\n  //\n  // A -> [B]\n  receive = 'receive',\n\n  // The transaction is intermediate between two tokens.\n  //\n  // A -> [B] -> C\n  transitive = 'transitive',\n}\n\n// A struct that contains all information about swapping.\nexport class SwapInfo implements Info {\n  // A source wallet\n  source?: Wallet | null;\n\n  // A swapping amount in source wallet\n  sourceAmount?: number | null;\n\n  // A destination wallet\n  destination?: Wallet | null;\n\n  // A receiving amount in destination wallet\n  destinationAmount?: number | null;\n\n  // A account symbol view.\n  //\n  // Depends on this value will define a direction of transaction\n  accountSymbol?: string | null;\n\n  constructor({\n    source,\n    sourceAmount,\n    destination,\n    destinationAmount,\n    accountSymbol,\n  }: {\n    source?: Wallet | null;\n    sourceAmount?: number | null;\n    destination?: Wallet | null;\n    destinationAmount?: number | null;\n    accountSymbol?: string | null;\n  }) {\n    this.source = source;\n    this.sourceAmount = sourceAmount;\n    this.destination = destination;\n    this.destinationAmount = destinationAmount;\n    this.accountSymbol = accountSymbol;\n  }\n\n  static empty(): SwapInfo {\n    return new SwapInfo({\n      source: null,\n      sourceAmount: null,\n      destination: null,\n      destinationAmount: null,\n      accountSymbol: null,\n    });\n  }\n\n  // Current direction of transaction.\n  //\n  // This value is calculated using account symbol view\n  get direction(): Direction {\n    if (this.accountSymbol === this.source?.token.symbol) {\n      return Direction.spend;\n    }\n    if (this.accountSymbol === this.destination?.token.symbol) {\n      return Direction.receive;\n    }\n    return Direction.transitive;\n  }\n\n  // extension\n\n  get amount(): number {\n    switch (this.direction) {\n      case Direction.spend:\n        return -(this.sourceAmount ?? 0);\n      case Direction.receive:\n      case Direction.transitive:\n        return this.destinationAmount ?? 0;\n    }\n  }\n\n  get symbol(): string | undefined {\n    switch (this.direction) {\n      case Direction.spend:\n        return this.source?.token.symbol;\n      case Direction.receive:\n      case Direction.transitive:\n        return this.destination?.token.symbol;\n    }\n  }\n}\n","import type { Wallet } from 'new/sdk/SolanaSDK';\n\nimport type { Info } from './Info';\n\n// The type of transfer in context of current account view.\nenum TransferType {\n  send = 'send',\n  receive = 'receive',\n}\n\n// A struct that contains all information about transfer.\nexport class TransferInfo implements Info {\n  // The source account address.\n  source?: Wallet | null;\n\n  // The destination account address.\n  destination?: Wallet | null;\n\n  authority?: string | null;\n\n  destinationAuthority?: string | null;\n\n  // The amount of transfer\n  rawAmount?: number | null;\n\n  // The current account address view.\n  //\n  // Depends on that will define it's a send or receive transaction.\n  account?: string | null;\n\n  constructor({\n    source,\n    destination,\n    authority,\n    destinationAuthority,\n    rawAmount,\n    account,\n  }: {\n    source?: Wallet | null;\n    destination?: Wallet | null;\n    authority?: string | null;\n    destinationAuthority?: string | null;\n    rawAmount?: number | null;\n    account?: string | null;\n  }) {\n    this.source = source;\n    this.destination = destination;\n    this.authority = authority;\n    this.destinationAuthority = destinationAuthority;\n    this.rawAmount = rawAmount;\n    this.account = account;\n  }\n\n  // A current transfer type that depends on account view.\n  get transferType(): TransferType | null {\n    if (this.source?.pubkey === this.account || this.authority === this.account) {\n      return TransferType.send;\n    }\n    return TransferType.receive;\n  }\n\n  // extension\n\n  get amount(): number {\n    let amount = this.rawAmount ?? 0;\n    if (this.transferType === TransferType.send) {\n      amount = -amount;\n    }\n    return amount;\n  }\n\n  get symbol(): string {\n    return this.source?.token.symbol ?? this.destination?.token.symbol ?? '';\n  }\n}\n","import type { FeeAmount } from 'new/sdk/SolanaSDK';\nimport { SolanaSDKError } from 'new/sdk/SolanaSDK';\n\nimport type { CloseAccountInfo, CreateAccountInfo, SwapInfo, TransferInfo } from './info';\n\nexport enum StatusType {\n  requesting = 'requesting',\n  processing = 'processing',\n  confirmed = 'confirmed',\n  error = 'error',\n}\n\n// The enum of possible status of transaction in blockchain\nexport class Status {\n  type: StatusType;\n  private _percent?: number | null;\n  private _error?: string | null;\n\n  private constructor({\n    type,\n    percent,\n    error,\n  }: {\n    type: StatusType;\n    percent?: number | null;\n    error?: string | null;\n  }) {\n    this.type = type;\n    this._percent = percent;\n    this._error = error;\n  }\n\n  // The transaction is in requesting process. The transaction can be being prepared or submitted.\n  static requesting(): Status {\n    return new Status({ type: StatusType.requesting });\n  }\n\n  // The transaction is processed by blockchain.\n  static processing(percent: number): Status {\n    return new Status({ type: StatusType.processing, percent });\n  }\n\n  // The transaction has been done processed and is a part of blockchain\n  static confirmed(): Status {\n    return new Status({ type: StatusType.confirmed });\n  }\n\n  // The transaction has been done processed but finished with error.\n  static error(error?: string | null): Status {\n    return new Status({ type: StatusType.processing, error });\n  }\n\n  // Convert the status as error.\n  get getError(): Error | null {\n    switch (this.type) {\n      case StatusType.error:\n        if (this._error) {\n          return SolanaSDKError.other(this._error);\n        }\n        return null;\n      default:\n        break;\n    }\n    return null;\n  }\n\n  // The raw string value\n  get rawValue(): string {\n    switch (this.type) {\n      case StatusType.requesting:\n        return 'requesting';\n      case StatusType.processing:\n        return 'processing';\n      case StatusType.confirmed:\n        return 'confirmed';\n      case StatusType.error:\n        return 'error';\n    }\n  }\n}\n\nexport type ParsedTransactionInfoType =\n  | CreateAccountInfo\n  | CloseAccountInfo\n  | TransferInfo\n  | SwapInfo;\n\n// A parsed transaction struct. Useful for display to regular users\nexport class ParsedTransaction {\n  // Current status of transaction.\n  status: Status;\n\n  // A transaction signature\n  signature?: string | null;\n\n  // A detailed information about this transaction.\n  //\n  // For example the information about create account transaction is a fee amount and new created wallet,\n  // transfer - amount of transferred lamport, source, destination address, etc.\n  info?: ParsedTransactionInfoType | null;\n\n  // The current amount of value in fiat.\n  amountInFiat?: number | null;\n\n  // The slot this transaction was processed in.\n  slot?: number | null;\n\n  // Estimated production time, as Unix timestamp (seconds since the Unix epoch) of when the transaction was processed.\n  // Nil if not available.\n  blockTime?: Date | null;\n\n  // The fee amount this transaction was charged.\n  fee?: FeeAmount | null;\n\n  // The blockhash of this block\n  blockhash?: string | null;\n\n  // The bool value that indicates the fee was covered by the p2p validator.\n  paidByP2POrg = false;\n\n  constructor({\n    status,\n    signature,\n    info,\n    amountInFiat = null,\n    slot,\n    blockTime,\n    fee,\n    blockhash,\n    paidByP2POrg = false,\n  }: {\n    status: Status;\n    signature?: string | null;\n    info?: ParsedTransactionInfoType | null;\n    amountInFiat?: number | null;\n    slot?: number | null;\n    blockTime?: Date | null;\n    fee?: FeeAmount | null;\n    blockhash?: string | null;\n    paidByP2POrg?: boolean;\n  }) {\n    this.status = status;\n    this.signature = signature;\n    this.info = info;\n    this.amountInFiat = amountInFiat;\n    this.slot = slot;\n    this.blockTime = blockTime;\n    this.fee = fee;\n    this.blockhash = blockhash;\n    this.paidByP2POrg = paidByP2POrg;\n  }\n\n  get amount(): number {\n    const info = this.info;\n    if (info) {\n      return info.amount ?? 0;\n    }\n    return 0;\n  }\n\n  get symbol(): string {\n    const info = this.info;\n    if (info) {\n      return info.symbol ?? '';\n    }\n    return '';\n  }\n\n  get isProcessing(): boolean {\n    switch (this.status.type) {\n      case StatusType.requesting:\n      case StatusType.processing:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get isFailure(): boolean {\n    switch (this.status.type) {\n      case StatusType.error:\n        return true;\n      default:\n        return false;\n    }\n  }\n}\n","import { ZERO } from '@orca-so/sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { makeAutoObservable } from 'mobx';\n\nimport { networkFeesAll } from 'new/app/models/PayingFee';\nimport * as SolanaSDK from 'new/sdk/SolanaSDK';\nimport {\n  convertToBalance,\n  getAssociatedTokenAddressSync,\n  SolanaSDKPublicKey,\n} from 'new/sdk/SolanaSDK';\nimport type { ParsedTransactionInfoType } from 'new/sdk/TransactionParser';\nimport { ParsedTransaction, Status, SwapInfo, TransferInfo } from 'new/sdk/TransactionParser';\nimport type { PricesServiceType } from 'new/services/PriceAPIs/PricesService';\nimport type { RawTransactionType } from 'new/ui/modals/ProcessTransactionModal';\nimport * as ProcessTransaction from 'new/ui/modals/ProcessTransactionModal/ProcessTransaction.Models';\n\nexport enum TransactionStatusType {\n  sending = 'sending',\n  confirmed = 'confirmed',\n  finalized = 'finalized',\n  error = 'error',\n}\n\nexport class TransactionStatus {\n  type: TransactionStatusType;\n  private readonly _numberOfConfirmed: number | null;\n  private readonly _error: Error | null;\n\n  static maxConfirmed = 31;\n\n  private constructor({\n    type,\n    numberOfConfirmed = null,\n    error = null,\n  }: {\n    type: TransactionStatusType;\n    numberOfConfirmed?: number | null;\n    error?: Error | null;\n  }) {\n    this.type = type;\n    this._numberOfConfirmed = numberOfConfirmed;\n    this._error = error;\n  }\n\n  // enum\n\n  static sending(): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.sending,\n    });\n  }\n\n  static confirmed(numberOfConfirmed: number): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.confirmed,\n      numberOfConfirmed,\n    });\n  }\n\n  static finalized(): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.finalized,\n    });\n  }\n\n  static error(error: Error): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.error,\n      error,\n    });\n  }\n\n  // getters\n\n  get numberOfConfirmations(): number | null {\n    switch (this.type) {\n      case TransactionStatusType.confirmed:\n        return this._numberOfConfirmed;\n      default:\n        return null;\n    }\n  }\n\n  get isProcessing(): boolean {\n    switch (this.type) {\n      case TransactionStatusType.sending:\n      case TransactionStatusType.confirmed:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get progress(): number {\n    switch (this.type) {\n      case TransactionStatusType.sending:\n        return 0;\n      case TransactionStatusType.confirmed: {\n        // treat all number of confirmed as unfinalized\n        let numberOfConfirmations = this.numberOfConfirmations!;\n        if (numberOfConfirmations >= TransactionStatus.maxConfirmed) {\n          numberOfConfirmations = TransactionStatus.maxConfirmed - 1;\n        }\n        return numberOfConfirmations / TransactionStatus.maxConfirmed;\n      }\n      case TransactionStatusType.finalized:\n      case TransactionStatusType.error:\n        return 1;\n    }\n  }\n\n  get error(): Error | null {\n    switch (this.type) {\n      case TransactionStatusType.error:\n        return this._error;\n      default:\n        return null;\n    }\n  }\n\n  get rawValue(): string {\n    switch (this.type) {\n      case TransactionStatusType.sending:\n        return 'sending';\n      case TransactionStatusType.confirmed:\n        return `processing(${this._numberOfConfirmed!})`;\n      case TransactionStatusType.finalized:\n        return 'finalized';\n      case TransactionStatusType.error:\n        return 'error';\n    }\n  }\n}\n\nexport class PendingTransaction {\n  transactionId: SolanaSDK.TransactionID | null;\n  sentAt: Date;\n  writtenToRepository: boolean;\n  rawTransaction: RawTransactionType;\n  status: TransactionStatus;\n  slot: number;\n\n  constructor({\n    transactionId,\n    sentAt,\n    writtenToRepository = false,\n    rawTransaction,\n    status,\n    slot = 0,\n  }: {\n    transactionId: SolanaSDK.TransactionID | null;\n    sentAt: Date;\n    writtenToRepository?: boolean;\n    rawTransaction: RawTransactionType;\n    status: TransactionStatus;\n    slot?: number;\n  }) {\n    this.transactionId = transactionId;\n    this.sentAt = sentAt;\n    this.writtenToRepository = writtenToRepository;\n    this.rawTransaction = rawTransaction;\n    this.status = status;\n    this.slot = slot;\n\n    makeAutoObservable(this);\n  }\n\n  parse({\n    pricesService,\n    authority = null,\n  }: {\n    pricesService: PricesServiceType;\n    authority?: string | null;\n  }): ParsedTransaction | null {\n    // status\n    let status: Status;\n\n    switch (this.status.type) {\n      case TransactionStatusType.sending:\n        status = Status.requesting();\n        break;\n      case TransactionStatusType.confirmed:\n        status = Status.processing(0);\n        break;\n      case TransactionStatusType.finalized:\n        status = Status.confirmed();\n        break;\n      case TransactionStatusType.error:\n        status = Status.error(this.status.error?.message);\n        break;\n    }\n\n    const signature = this.transactionId;\n\n    let value: ParsedTransactionInfoType | null;\n    let amountInFiat: number | null;\n    let fee: SolanaSDK.FeeAmount | null;\n\n    const transaction = this.rawTransaction;\n    switch (transaction.constructor) {\n      case ProcessTransaction.SendTransaction: {\n        const amount = convertToBalance(\n          (transaction as ProcessTransaction.SendTransaction).amount,\n          (transaction as ProcessTransaction.SendTransaction).sender.token.decimals,\n        );\n        value = new TransferInfo({\n          source: (transaction as ProcessTransaction.SendTransaction).sender,\n          destination: new SolanaSDK.Wallet({\n            pubkey: (transaction as ProcessTransaction.SendTransaction).receiver.address,\n            lamports: ZERO,\n            token: (transaction as ProcessTransaction.SendTransaction).sender.token,\n          }),\n          authority,\n          destinationAuthority: null,\n          rawAmount: amount,\n          account: (transaction as ProcessTransaction.SendTransaction).sender.pubkey,\n        });\n        amountInFiat =\n          amount *\n          (pricesService.currentPrice(\n            (transaction as ProcessTransaction.SendTransaction).sender.token.symbol,\n          )?.value ?? 0);\n        fee = (transaction as ProcessTransaction.SendTransaction).feeInToken;\n        break;\n      }\n      case ProcessTransaction.SwapTransaction: {\n        const destinationWallet = (transaction as ProcessTransaction.SwapTransaction)\n          .destinationWallet;\n        const mintAddress = new PublicKey(destinationWallet.mintAddress);\n        if (authority && mintAddress) {\n          const _authority = new PublicKey(authority);\n          // TODO: use getAssociatedTokenAddressSync from spl-token when it will be published\n          destinationWallet.pubkey = getAssociatedTokenAddressSync(\n            mintAddress,\n            _authority,\n            false,\n            SolanaSDKPublicKey.splAssociatedTokenAccountProgramId,\n            SolanaSDKPublicKey.tokenProgramId,\n          ).toString();\n        }\n\n        value = new SwapInfo({\n          source: (transaction as ProcessTransaction.SwapTransaction).sourceWallet,\n          sourceAmount: (transaction as ProcessTransaction.SwapTransaction).amount,\n          destination: destinationWallet,\n          destinationAmount: (transaction as ProcessTransaction.SwapTransaction).estimatedAmount,\n          accountSymbol: null,\n        });\n        amountInFiat =\n          (transaction as ProcessTransaction.SwapTransaction).amount *\n          (pricesService.currentPrice(\n            (transaction as ProcessTransaction.SwapTransaction).sourceWallet.token.symbol,\n          )?.value ?? 0);\n        fee = networkFeesAll((transaction as ProcessTransaction.SwapTransaction).fees);\n        break;\n      }\n      default:\n        return null;\n    }\n\n    return new ParsedTransaction({\n      status,\n      signature,\n      info: value,\n      amountInFiat,\n      slot: this.slot,\n      blockTime: this.sentAt,\n      fee,\n      blockhash: null,\n    });\n  }\n}\n","import { ZERO } from '@orca-so/sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { action, computed, makeObservable, observable } from 'mobx';\nimport promiseRetry from 'promise-retry';\nimport { singleton } from 'tsyringe';\n\nimport { FeeTypeEnum } from 'new/app/models/PayingFee';\nimport { PendingTransaction, TransactionStatus } from 'new/app/models/PendingTransaction';\nimport {\n  getAssociatedTokenAddressSync,\n  SolanaSDKError,\n  SolanaSDKPublicKey,\n  toLamport,\n} from 'new/sdk/SolanaSDK';\nimport type { ParsedTransaction } from 'new/sdk/TransactionParser';\nimport { PricesService } from 'new/services/PriceAPIs/PricesService';\nimport { WalletsRepository } from 'new/services/Repositories';\nimport { AccountObservableService } from 'new/services/Socket';\nimport { SolanaService } from 'new/services/SolanaService';\nimport type { RawTransactionType } from 'new/ui/modals/ProcessTransactionModal';\nimport * as ProcessTransaction from 'new/ui/modals/ProcessTransactionModal/ProcessTransaction.Models';\nimport type { Emitter } from 'new/utils/libs/nanoEvent';\nimport { createNanoEvent } from 'new/utils/libs/nanoEvent';\n\nexport type TransactionIndex = number;\n\ninterface TransactionHandlerType {\n  sendTransaction(processingTransaction: RawTransactionType): TransactionIndex;\n  observeTransaction(transactionIndex: TransactionIndex): PendingTransaction | null; // TODO: observable\n  readonly areSomeTransactionsInProgress: boolean;\n\n  observeProcessingTransactions(account: string): ParsedTransaction[]; // TODO: observable\n  observeProcessingTransactionsAll(): ParsedTransaction[]; // TODO: observable\n\n  getProccessingTransactions(account: string): ParsedTransaction[];\n  getProccessingTransactionAll(): ParsedTransaction[];\n\n  readonly onNewTransaction: Emitter<[{ trx: PendingTransaction; index: number }]>['on']; // TODO: observable\n}\n\n// @web: it must be same instance during all resolves\n@singleton()\nexport class TransactionHandler implements TransactionHandlerType {\n  transactions: PendingTransaction[] = [];\n  private _onNewTransactionEmitter =\n    createNanoEvent<[{ trx: PendingTransaction; index: number }]>(); // new EventEmitter<{ trx: PendingTransaction; index: number }>();\n  onNewTransaction: Emitter<[{ trx: PendingTransaction; index: number }]>['on'] =\n    this._onNewTransactionEmitter.on;\n\n  constructor(\n    private _apiClient: SolanaService,\n    private _walletsRepository: WalletsRepository,\n    private _pricesService: PricesService,\n    private _socket: AccountObservableService,\n  ) {\n    makeObservable(this, {\n      transactions: observable,\n\n      sendTransaction: action,\n      observeTransaction: action,\n\n      areSomeTransactionsInProgress: computed,\n\n      getProccessingTransactions: action,\n      getProcessingTransactionAll: action,\n      sendAndObserve: action,\n\n      _updateTransactionAtIndex: action,\n    });\n  }\n\n  sendTransaction(processingTransaction: RawTransactionType): TransactionIndex {\n    // get index to return\n    const txIndex = this.transactions.length;\n\n    // add to processing\n    const trx = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: processingTransaction,\n      status: TransactionStatus.sending(),\n    });\n\n    const value = [...this.transactions];\n    value.push(trx);\n\n    this.transactions = value;\n    this._onNewTransactionEmitter.emit({ trx, index: txIndex });\n\n    // process\n    void this.sendAndObserve({ index: txIndex, processingTransaction });\n\n    return txIndex;\n  }\n\n  observeTransaction(transactionIndex: TransactionIndex): PendingTransaction | null {\n    return this.transactions[transactionIndex] ?? null;\n  }\n\n  get areSomeTransactionsInProgress(): boolean {\n    return this.transactions.some((tx) => tx.status.isProcessing);\n  }\n\n  // observeProcessingTransactions(account: string): ParsedTransaction[] {}\n  // observeProcessingTransactionsAll(): ParsedTransaction[] {}\n\n  getProccessingTransactions(account: string): ParsedTransaction[] {\n    return this.transactions\n      .filter((pt) => {\n        const transaction = pt.rawTransaction;\n        switch (transaction.constructor) {\n          case ProcessTransaction.SendTransaction: {\n            if (\n              (transaction as ProcessTransaction.SendTransaction).sender.pubkey === account ||\n              (transaction as ProcessTransaction.SendTransaction).receiver.address === account ||\n              (transaction as ProcessTransaction.SendTransaction).authority === account\n            ) {\n              return true;\n            }\n            break;\n          }\n          case ProcessTransaction.SwapTransaction: {\n            if (\n              (transaction as ProcessTransaction.SwapTransaction).sourceWallet.pubkey === account ||\n              (transaction as ProcessTransaction.SwapTransaction).destinationWallet.pubkey ===\n                account ||\n              (transaction as ProcessTransaction.SwapTransaction).authority === account\n            ) {\n              return true;\n            }\n            break;\n          }\n          default:\n            break;\n        }\n        return false;\n      })\n      .map((pt) => {\n        return pt.parse({\n          pricesService: this._pricesService,\n          authority: this._walletsRepository.nativeWallet?.pubkey,\n        });\n      })\n      .filter((tx): tx is ParsedTransaction => Boolean(tx));\n  }\n\n  getProcessingTransactionAll(): ParsedTransaction[] {\n    return this.transactions\n      .map((pt) => {\n        return pt.parse({\n          pricesService: this._pricesService,\n          authority: this._walletsRepository.nativeWallet?.pubkey,\n        });\n      })\n      .filter((tx): tx is ParsedTransaction => Boolean(tx));\n  }\n\n  // Send and observe transaction\n  async sendAndObserve({\n    index,\n    processingTransaction,\n  }: {\n    index: TransactionIndex;\n    processingTransaction: RawTransactionType;\n  }): Promise<void> {\n    try {\n      const transactionId = await processingTransaction.createRequest();\n\n      // show notification\n      // this._notificationsService.showInAppNotification(done(transactionHasBeenSent))\n\n      // update status\n      this._updateTransactionAtIndex(index, () => {\n        return new PendingTransaction({\n          transactionId,\n          sentAt: new Date(),\n          rawTransaction: processingTransaction,\n          status: TransactionStatus.confirmed(0),\n        });\n      });\n\n      // observe confirmations\n      this._observe({ index, transactionId });\n    } catch (error) {\n      console.error(error);\n      // update status\n      // TODO: notification this._notificationsService.showInAppNotification(error(error));\n\n      // mark transaction as failured\n      this._updateTransactionAtIndex(index, (currentValue) => {\n        const info = currentValue;\n        info.status = TransactionStatus.error(error as Error);\n        return info;\n      });\n    }\n  }\n\n  // Observe confirmation statuses of given transaction\n  private _observe({\n    index,\n    transactionId,\n  }: {\n    index: TransactionIndex;\n    transactionId: string;\n  }): void {\n    void promiseRetry(\n      async (retry) => {\n        try {\n          const result = await this._apiClient.provider.connection.getSignatureStatus(\n            transactionId,\n          );\n          const status = result.value;\n          if (!status) {\n            throw SolanaSDKError.other('Invalid status');\n          }\n\n          let txStatus: TransactionStatus;\n          if (!status.confirmations || status.confirmationStatus === 'finalized') {\n            txStatus = TransactionStatus.finalized();\n          } else {\n            txStatus = TransactionStatus.confirmed(status.confirmations ?? 0);\n          }\n\n          this._updateTransactionAtIndex(index, (currentValue) => {\n            const value = currentValue;\n            value.status = txStatus;\n            value.slot = status.slot;\n            return value;\n          });\n\n          const confirmed = !status.confirmations || status.confirmationStatus === 'finalized';\n          if (confirmed) {\n            return null;\n          } else {\n            throw ProcessTransaction.ErrorType.notEnoughNumberOfConfirmations();\n          }\n        } catch (error) {\n          if (\n            !(error instanceof ProcessTransaction.ErrorType.NotEnoughNumberOfConfirmationsError)\n          ) {\n            console.error(error);\n            retry(error);\n            return;\n          }\n\n          this._updateTransactionAtIndex(index, (currentValue) => {\n            const value = currentValue;\n            value.status = TransactionStatus.finalized();\n            return value;\n          });\n        }\n      },\n      {\n        retries: 10,\n        minTimeout: 1000,\n        maxTimeout: 60000,\n        factor: 1,\n      },\n    );\n  }\n\n  // Update transaction\n  _updateTransactionAtIndex(\n    index: TransactionIndex,\n    update: (tx: PendingTransaction) => PendingTransaction,\n  ): boolean {\n    const value = [...this.transactions];\n\n    const currentValue = value[index];\n    if (currentValue) {\n      const newValue = update(currentValue);\n\n      // write to repository if the transaction is not yet written and there is at least 1 confirmation\n      const numberOfConfirmations = newValue.status.numberOfConfirmations;\n      if (!newValue.writtenToRepository && numberOfConfirmations && numberOfConfirmations > 0) {\n        // manually update balances if socket is not connected\n        this._updateRepository(newValue.rawTransaction);\n\n        // mark as written\n        newValue.writtenToRepository = true;\n      }\n\n      // update\n      value[index] = newValue;\n      this.transactions = value;\n      return true;\n    }\n\n    return false;\n  }\n\n  private _updateRepository(rawTransaction: RawTransactionType): void {\n    switch (rawTransaction.constructor) {\n      case ProcessTransaction.SendTransaction: {\n        if (this._socket.isConnected) {\n          return;\n        }\n\n        this._walletsRepository.batchUpdate((currentValue) => {\n          const wallets = currentValue;\n          let index;\n\n          // update sender\n          index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SendTransaction).sender.pubkey,\n          );\n          if (index) {\n            wallets[index]!.decreaseBalance(\n              (rawTransaction as ProcessTransaction.SendTransaction).amount,\n            );\n          }\n\n          // update receiver if user send to different wallet of THIS account\n          index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SendTransaction).receiver.address,\n          );\n          if (index) {\n            wallets[index]!.increaseBalance(\n              (rawTransaction as ProcessTransaction.SendTransaction).amount,\n            );\n          }\n\n          // update paying wallet\n          index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SendTransaction).payingFeeWallet?.pubkey,\n          );\n          if (index) {\n            const feeInToken = (rawTransaction as ProcessTransaction.SendTransaction).feeInToken;\n            if (feeInToken) {\n              wallets[index]!.decreaseBalance(feeInToken.total);\n            }\n          }\n\n          return wallets;\n        });\n        break;\n      }\n      case ProcessTransaction.CloseTransaction: {\n        if (this._socket.isConnected) {\n          return;\n        }\n\n        this._walletsRepository.batchUpdate((currentValue) => {\n          let wallets = currentValue;\n          let reimbursedAmount = (rawTransaction as ProcessTransaction.CloseTransaction)\n            .reimbursedAmount;\n\n          // remove closed wallet\n          const wallet = (rawTransaction as ProcessTransaction.CloseTransaction).closingWallet;\n          wallets = wallets.filter((item) => item.pubkey === wallet.pubkey);\n\n          // if closing non-native Solana wallet, then convert its balances and send it to native Solana wallet\n          if (wallet.token.symbol === 'SOL' && !wallet.token.isNative) {\n            reimbursedAmount = reimbursedAmount.add(wallet.lamports ?? ZERO);\n          }\n\n          // update native wallet\n          const index = wallets.findIndex((wallet) => wallet.isNativeSOL);\n          if (index) {\n            wallets[index]!.increaseBalance(reimbursedAmount);\n          }\n\n          return wallets;\n        });\n        break;\n      }\n      case ProcessTransaction.SwapTransaction: {\n        this._walletsRepository.batchUpdate((currentValue) => {\n          const wallets = currentValue;\n\n          // update source wallet if socket is not connected\n          if (!this._socket.isConnected) {\n            const index = wallets.findIndex(\n              (wallet) =>\n                wallet.pubkey ===\n                (rawTransaction as ProcessTransaction.SwapTransaction).sourceWallet.pubkey,\n            );\n            if (index) {\n              wallets[index]!.decreaseBalance(\n                toLamport(\n                  (rawTransaction as ProcessTransaction.SwapTransaction).amount,\n                  (rawTransaction as ProcessTransaction.SwapTransaction).sourceWallet.token\n                    .decimals,\n                ),\n              );\n            }\n          }\n\n          // update destination wallet if exists\n          const index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SwapTransaction).destinationWallet.pubkey,\n          );\n          if (index) {\n            // update only if socket is not connected\n            if (!this._socket.isConnected) {\n              wallets[index]!.increaseBalance(\n                toLamport(\n                  (rawTransaction as ProcessTransaction.SwapTransaction).estimatedAmount,\n                  (rawTransaction as ProcessTransaction.SwapTransaction).destinationWallet.token\n                    .decimals,\n                ),\n              );\n            }\n          } else {\n            // add destination wallet if not exists, event when socket is connected, because socket doesn't handle new wallet\n            let publicKey = null;\n            try {\n              const authority = (rawTransaction as ProcessTransaction.SwapTransaction).authority;\n              if (!authority) {\n                throw false;\n              }\n\n              publicKey = getAssociatedTokenAddressSync(\n                new PublicKey(\n                  (\n                    rawTransaction as ProcessTransaction.SwapTransaction\n                  ).destinationWallet.mintAddress,\n                ),\n                new PublicKey(authority),\n                false,\n                SolanaSDKPublicKey.splAssociatedTokenAccountProgramId,\n                SolanaSDKPublicKey.tokenProgramId,\n              );\n            } catch {\n              /// ignore\n            }\n            if (publicKey) {\n              const destinationWallet = (rawTransaction as ProcessTransaction.SwapTransaction)\n                .destinationWallet;\n              destinationWallet.pubkey = publicKey.toString();\n              destinationWallet.lamports = toLamport(\n                (rawTransaction as ProcessTransaction.SwapTransaction).estimatedAmount,\n                destinationWallet.token.decimals,\n              );\n              wallets.push(destinationWallet);\n            }\n          }\n\n          // update paying wallet\n          if (!this._socket.isConnected) {\n            for (const fee of (rawTransaction as ProcessTransaction.SwapTransaction).fees) {\n              switch (fee.type.type) {\n                case FeeTypeEnum.accountCreationFee:\n                case FeeTypeEnum.transactionFee: {\n                  const index = wallets.findIndex(\n                    (wallet) => wallet.mintAddress === fee.token.address,\n                  );\n                  if (index) {\n                    wallets[index]!.decreaseBalance(fee.lamports);\n                  }\n                  break;\n                }\n                case FeeTypeEnum.liquidityProviderFee:\n                case FeeTypeEnum.orderCreationFee:\n                case FeeTypeEnum.depositWillBeReturned:\n                  break;\n              }\n            }\n          }\n\n          return wallets;\n        });\n        break;\n      }\n      default:\n        break;\n    }\n  }\n}\n","export const createNanoEvent = () => ({\n  listeners: [],\n  emit(...args) {\n    const callbacks = this.listeners || [];\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args);\n    }\n  },\n  on(cb) {\n    this.listeners?.push(cb) || (this.listeners = [cb]);\n    return () => {\n      this.listeners = this.listeners.filter((i) => cb !== i);\n    };\n  },\n});\n","import type { IReactionDisposer } from 'mobx';\nimport { action, computed, makeObservable, observable, reaction } from 'mobx';\nimport assert from 'ts-invariant';\nimport { injectable } from 'tsyringe';\n\nimport { PendingTransaction, TransactionStatus } from 'new/app/models/PendingTransaction';\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport { SolanaSDKError } from 'new/sdk/SolanaSDK';\nimport type { TransactionIndex } from 'new/services/TransactionHandler';\nimport { TransactionHandler } from 'new/services/TransactionHandler';\n\nimport type { RawTransactionType } from './ProcessTransaction.Models';\n\ninterface ProcessTransactionModalViewModelType {\n  pendingTransaction: PendingTransaction | null;\n  observingTransactionIndex: number | null;\n}\n\n@injectable()\nexport class ProcessTransactionModalViewModel\n  extends ViewModel\n  implements ProcessTransactionModalViewModelType\n{\n  rawTransaction: RawTransactionType | null;\n  pendingTransaction: PendingTransaction | null;\n  observingTransactionIndex: TransactionIndex | null;\n\n  constructor(private _transactionHandler: TransactionHandler) {\n    super();\n\n    this.rawTransaction = null;\n    this.pendingTransaction = null;\n    this.observingTransactionIndex = null;\n\n    makeObservable(this, {\n      rawTransaction: observable,\n      pendingTransaction: observable,\n      observingTransactionIndex: observable,\n\n      setTransaction: action,\n\n      isSwapping: computed,\n      transactionID: computed,\n      getMainDescription: computed,\n\n      sendAndObserveTransaction: action,\n    });\n  }\n\n  setTransaction(processingTransaction: RawTransactionType) {\n    this.rawTransaction = processingTransaction;\n    this.pendingTransaction = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: processingTransaction,\n      status: TransactionStatus.sending(),\n    });\n  }\n\n  protected override setDefaults() {\n    this.rawTransaction = null;\n    this.pendingTransaction = null;\n    this.observingTransactionIndex = null;\n  }\n\n  protected override onInitialize() {}\n\n  protected override afterReactionsRemoved() {}\n\n  get isSwapping(): boolean {\n    assert(this.rawTransaction, 'rawTransaction is not set');\n    return this.rawTransaction.isSwap;\n  }\n\n  get transactionID(): string | null {\n    assert(this.pendingTransaction, 'pendingTransaction is not set');\n    return this.pendingTransaction.transactionId;\n  }\n\n  get getMainDescription(): string {\n    assert(this.rawTransaction, 'rawTransaction is not set');\n    return this.rawTransaction.mainDescription;\n  }\n\n  // Actions\n\n  sendAndObserveTransaction(): IReactionDisposer {\n    assert(this.rawTransaction, 'rawTransaction is not set');\n    // send transaction and get observation index\n    const index = this._transactionHandler.sendTransaction(this.rawTransaction);\n    this.observingTransactionIndex = index;\n\n    // send and catch error\n    const unknownErrorInfo = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: this.rawTransaction,\n      status: TransactionStatus.error(SolanaSDKError.unknown()),\n    });\n\n    // observe transaction based on transaction index\n    return reaction(\n      () => this._transactionHandler.transactions,\n      () => {\n        this.pendingTransaction =\n          this._transactionHandler.observeTransaction(index) || unknownErrorInfo;\n      },\n    );\n  }\n}\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\nimport { expr } from 'mobx-utils';\n\nimport { TransactionStatusType } from 'new/app/models/PendingTransaction';\nimport { FeeRelayerError } from 'new/sdk/FeeRelayer';\n\nimport * as ProcessTransaction from '../../ProcessTransaction.Models';\nimport type { ProcessTransactionModalViewModel } from '../../ProcessTransactionModal.ViewModel';\n\nconst Wrapper = styled.div``;\n\ninterface Props {\n  viewModel: Readonly<ProcessTransactionModalViewModel>;\n}\n\nexport const HeaderLabel: FC<Props> = observer(({ viewModel }) => {\n  const text = expr(() => {\n    const info = viewModel.pendingTransaction;\n    if (!info) {\n      return '';\n    }\n\n    const originalText = info.rawTransaction.isSwap\n      ? 'The swap is being processed'\n      : 'The transaction is being processed';\n\n    switch (info.status.type) {\n      case TransactionStatusType.sending:\n      case TransactionStatusType.confirmed:\n        return originalText;\n      case TransactionStatusType.error: {\n        // TODO: check all condition works\n        const error = info.status.error;\n        if (error) {\n          if (error.message.includes('Swap instruction exceeds desired slippage limit')) {\n            return 'Low slippage caused the swap to fail';\n          }\n\n          if (\n            error instanceof FeeRelayerError &&\n            error.code === FeeRelayerError.topUpSuccessButTransactionThrows().code\n          ) {\n            return 'The transaction failed due to a blockchain error';\n          }\n        }\n        return 'The transaction has been rejected';\n      }\n      case TransactionStatusType.finalized: {\n        // TODO: check all condition works\n        const transaction = info.rawTransaction;\n        if (transaction instanceof ProcessTransaction.SendTransaction) {\n          return `${transaction.sender.token.symbol} was sent successfully`;\n        }\n\n        if (transaction instanceof ProcessTransaction.SwapTransaction) {\n          return `${transaction.sourceWallet.token.symbol} → ${transaction.destinationWallet.token.symbol} swapped successfully`;\n        }\n\n        throw Error('fatal');\n      }\n    }\n  });\n\n  return <Wrapper>{text}</Wrapper>;\n});\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme, zIndexes } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\n\nimport { Icon } from 'components/ui';\nimport { TransactionStatusType } from 'new/app/models/PendingTransaction';\n\nimport type { ProcessTransactionModalViewModel } from '../../ProcessTransactionModal.ViewModel';\n\nconst INITIAL_PROGRESS = 5;\n\nconst ProgressIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\n// const TransactionStatus = styled.div`\n//   display: flex;\n//   align-items: center;\n//\n//   margin-top: 13px;\n//   margin-left: 38px;\n//\n//   color: ${theme.colors.textIcon.primary};\n//\n//   font-weight: 500;\n//   font-size: 16px;\n//   line-height: 140%;\n// `;\n//\n// const TransactionBadge = styled.div`\n//   display: flex;\n//   align-items: center;\n//\n//   height: 24px;\n//   margin-left: 4px;\n//   padding: 0 8px;\n//\n//   color: ${theme.colors.textIcon.secondary};\n//\n//   font-weight: 500;\n//   font-size: 12px;\n//\n//   background: ${theme.colors.bg.secondary};\n//   border-radius: 4px;\n// `;\n\nconst ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nconst ProgressLine = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.middle};\n\n  width: ${INITIAL_PROGRESS}%;\n  height: 2px;\n\n  background: ${theme.colors.bg.buttonPrimary};\n\n  transition: width 0.15s;\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n\n    transition: none;\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n\n    transition: none;\n  }\n`;\n\nconst ProgressStub = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.bottom};\n\n  width: 100%;\n  height: 1px;\n\n  background: ${theme.colors.stroke.secondary};\n`;\n\nconst StatusColors = styled.div`\n  &.isProcessing {\n    background: ${theme.colors.system.warningMain};\n  }\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\n// const TransactionLabel = styled(StatusColors)`\n//   display: block;\n//   width: 8px;\n//   height: 8px;\n//\n//   margin-right: 8px;\n// `;\n\nconst BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nconst UPPER_PROGRESS_BOUND = 95;\nconst LOWER_PROGRESS_BOUND = 3;\nconst FULL_PROGRESS = 100;\nconst CHECK_PROGRESS_INTERVAL = 1000;\n\nexport interface Props {\n  viewModel: Readonly<ProcessTransactionModalViewModel>;\n  // label: string;\n}\n\nexport const ProgressView: FC<Props> = observer(({ viewModel /*label*/ }) => {\n  const [progress, setProgress] = useState(INITIAL_PROGRESS);\n\n  const status = viewModel.pendingTransaction!.status;\n  const isSending = status.type === TransactionStatusType.sending;\n  const isProcessing = status.type === TransactionStatusType.confirmed;\n  const isSuccess = status.type === TransactionStatusType.finalized;\n  const isError = status.type === TransactionStatusType.error;\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!isProcessing) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= UPPER_PROGRESS_BOUND) {\n        newProgress += LOWER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      } else {\n        newProgress = UPPER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      }\n    }, CHECK_PROGRESS_INTERVAL);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status.type]);\n\n  useEffect(() => {\n    switch (status.type) {\n      case TransactionStatusType.error:\n      case TransactionStatusType.finalized:\n        setProgress(FULL_PROGRESS);\n        setTimeout(() => {\n          setProgress(0);\n        }, 1000);\n        break;\n    }\n  }, [status.type]);\n\n  // const renderStatus = () => {\n  //   switch (status.type) {\n  //     case TransactionStatusType.sending:\n  //     case TransactionStatusType.confirmed:\n  //       return 'Pending';\n  //     case TransactionStatusType.error:\n  //       return 'Error';\n  //     case TransactionStatusType.finalized:\n  //       return 'Completed';\n  //   }\n  // };\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressLine\n          style={{ width: `${progress}%` }}\n          className={classNames({ isSuccess, isError })}\n        />\n        <ProgressStub />\n\n        <BlockWrapper\n          className={classNames({ isProcessing: isSending || isProcessing, isSuccess, isError })}\n        >\n          {isSuccess ? (\n            <ProgressIcon name=\"success-send\" />\n          ) : (\n            <ProgressIcon name={isError ? 'error-send' : 'clock-send'} />\n          )}\n        </BlockWrapper>\n      </ProgressWrapper>\n      {/*<TransactionStatus>*/}\n      {/*  {label}*/}\n      {/*  <TransactionBadge>*/}\n      {/*    <TransactionLabel*/}\n      {/*      className={classNames({ isProcessing: isSending || isProcessing, isSuccess, isError })}*/}\n      {/*    />*/}\n      {/*    {renderStatus()}*/}\n      {/*  </TransactionBadge>*/}\n      {/*</TransactionStatus>*/}\n    </>\n  );\n});\n","import type { FC } from 'react';\nimport { useLayoutEffect } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\n// TODO: relocate\nimport {\n  CloseIcon,\n  CloseWrapper,\n  Header,\n  WrapperModal,\n} from 'components/modals/TransactionInfoModals/common';\nimport { Button } from 'components/ui';\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\nimport { TransactionID } from 'new/ui/modals/ProcessTransactionModal/Status/TransactionID';\n\nimport type { RawTransactionType } from './ProcessTransaction.Models';\nimport { ProcessTransactionModalViewModel } from './ProcessTransactionModal.ViewModel';\nimport { HeaderLabel } from './Status/HeaderLabel';\nimport { ProgressView } from './Status/ProgressView';\n\nconst Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 18px 20px;\n`;\n\nconst Description = styled.div`\n  display: flex;\n  justify-content: center;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n`;\n\nexport interface ProcessTransactionModalProps {\n  transaction: RawTransactionType;\n}\n\n// TODO: Green alert (shown only when top up is finished but transaction is not)\nexport const ProcessTransactionModal: FC<ProcessTransactionModalProps & ModalPropsType> = observer(\n  ({ close, transaction }) => {\n    const viewModel = useViewModel(ProcessTransactionModalViewModel);\n    // set transaction before, to available all getters under\n    if (!viewModel.rawTransaction) {\n      viewModel.setTransaction(transaction);\n    }\n\n    useLayoutEffect(() => {\n      const disposer = viewModel.sendAndObserveTransaction();\n      return () => disposer();\n    }, []);\n\n    const handleCloseClick = () => {\n      close(false);\n    };\n\n    return (\n      <WrapperModal close={handleCloseClick}>\n        <Section>\n          <Header>\n            <HeaderLabel viewModel={viewModel} />\n            {/*{viewModel.getMainDescription}*/}\n            <CloseWrapper onClick={handleCloseClick}>\n              <CloseIcon name=\"close\" />\n            </CloseWrapper>\n            <Description>{viewModel.getMainDescription}</Description>\n            {/*<DateView viewModel={viewModel} />*/}\n          </Header>\n        </Section>\n        <ProgressView viewModel={viewModel} /*label={'Swap status:'}*/ />\n        {/*<Section>*/}\n        {/*  {viewModel.observingTransactionIndex !== null &&*/}\n        {/*  typeof viewModel.observingTransactionIndex !== 'undefined' ? (*/}\n        {/*    <TransactionDetail observingTransactionIndex={viewModel.observingTransactionIndex} />*/}\n        {/*  ) : null}*/}\n        {/*</Section>*/}\n        {viewModel.transactionID ? (\n          <Section>\n            <TransactionID transactionID={viewModel.transactionID} />\n          </Section>\n        ) : null}\n        <Section>\n          <Button primary onClick={handleCloseClick}>\n            Done\n          </Button>\n        </Section>\n        {/*{viewModel.transactionID ? (*/}\n        {/*  <SolanaExplorerLink signature={viewModel.transactionID} />*/}\n        {/*) : null}*/}\n      </WrapperModal>\n    );\n  },\n);\n","import { styled } from '@linaria/react';\n\nimport { Modal } from 'components/ui/Modal';\n\nexport const WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nexport const Section = styled.div`\n  display: grid;\n  grid-gap: 24px;\n  padding: 16px 0 24px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-gap: 16px;\n  margin: 0;\n  padding-left: 32px;\n`;\n\nexport const Row = styled.li``;\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n`;\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\nimport { expr } from 'mobx-utils';\n\nimport { Button } from 'components/ui';\nimport { Loader } from 'new/ui/components/common/Loader';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\nimport type { ReceiveBitcoinModalViewModel } from 'new/ui/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.ViewModel';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\ninterface Props {\n  viewModel: Readonly<ReceiveBitcoinModalViewModel>;\n}\n\nexport const RenBTCButton: FC<Props & ModalPropsType> = observer(({ viewModel, close }) => {\n  const buttonText = expr(() => {\n    const fee = viewModel.totalFee;\n    const wallet = viewModel.payingWallet;\n    if (!fee || !wallet || fee <= 0) {\n      return 'Continue';\n    }\n\n    return `Pay ${numberToString(fee, { maximumFractionDigits: 9 })} ${\n      wallet.token.symbol\n    } & Continue`;\n  });\n\n  const handleClick = async () => {\n    await viewModel.createRenBTC();\n    close(true);\n  };\n\n  return (\n    <Button primary disabled={viewModel.isLoading} onClick={handleClick}>\n      {viewModel.isLoading ? <Loader /> : buttonText}\n    </Button>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\nimport { RenBTCButton } from 'new/ui/modals/ReceiveBitcoinModal/Create/RenBTCButton';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\nimport type { ReceiveBitcoinModalViewModel } from '../ReceiveBitcoinModal.ViewModel';\n\ninterface Props {\n  viewModel: Readonly<ReceiveBitcoinModalViewModel>;\n}\n\nexport const Create: FC<Props & ModalPropsType> = observer(({ viewModel, close }) => {\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <RenBTCButton viewModel={viewModel} close={close} />\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>. You can choose which currency to pay in\n            below.\n          </Row>\n        </List>\n        {viewModel.payingWallet?.token.symbol}\n\n        {/*<Feature name={FEATURE_PAY_BY}>\n          <FeePaySelector\n            tokenAccounts={tokenAccounts}\n            onTokenAccountChange={handleFeeTokenAccountChange}\n            isShortList\n          />\n        </Feature>*/}\n\n        <List>\n          <Row>\n            This address accepts <strong>only Bitcoin</strong>. You may lose assets by sending\n            another coin.\n          </Row>\n          <Row>\n            Minimum transaction amount of <strong>0.000112 BTC</strong>.\n          </Row>\n          <Row>\n            <strong>\n              {/*<HMSCountdown milliseconds={getRemainingGatewayTime(expiryTime)} />*/}\n              35:59:59\n            </strong>\n            &nbsp; is the remaining time to safely send the assets\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n});\n","import { ZERO } from '@orca-so/sdk';\nimport { SPLToken } from '@saberhq/token-utils';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { injectable } from 'tsyringe';\n\nimport {\n  FeeRelayerAPIClient,\n  FeeRelayerConfiguration,\n  FeeRelayerContextManager,\n  FeeRelayerRelaySolanaClient,\n  StatsInfoOperationType,\n  TokenAccount,\n} from 'new/sdk/FeeRelayer';\nimport {\n  AccountInfo,\n  FeeAmount,\n  getAssociatedTokenAddressSync,\n  SolanaSDKPublicKey,\n  Token,\n  Wallet,\n} from 'new/sdk/SolanaSDK';\nimport { OrcaSwapService } from 'new/services/OrcaSwapService';\nimport { RelayService } from 'new/services/RelayService';\nimport { WalletsRepository } from 'new/services/Repositories';\n\n@injectable()\nexport class RenBTCStatusService {\n  private _feeRelayerContextManager: FeeRelayerContextManager;\n\n  private _minRentExemption?: u64;\n  private _lamportsPerSignature?: u64;\n  private _rentExemptMinimum?: u64;\n\n  constructor(\n    private _feeRelayerAPIClient: FeeRelayerRelaySolanaClient,\n    private _orcaSwap: OrcaSwapService,\n    private _walletsRepository: WalletsRepository,\n    private _feeRelayer: RelayService,\n  ) {\n    const feeRelayerAPIClient = new FeeRelayerAPIClient();\n    this._feeRelayerContextManager = new FeeRelayerContextManager({\n      owner: this._feeRelayerAPIClient.provider.wallet.publicKey,\n      solanaAPIClient: this._feeRelayerAPIClient,\n      feeRelayerAPIClient,\n    });\n  }\n\n  async load() {\n    await this._orcaSwap.load();\n\n    this._minRentExemption = await this._feeRelayerAPIClient.getMinimumBalanceForRentExemption(\n      AccountInfo.span,\n    );\n    this._lamportsPerSignature = await this._feeRelayerAPIClient.getLamportsPerSignature();\n    this._rentExemptMinimum = await this._feeRelayerAPIClient.getMinimumBalanceForRentExemption(0);\n  }\n\n  async getPayableWallets(): Promise<Wallet[]> {\n    const wallets = this._walletsRepository\n      .getWallets()\n      .filter((wallet) => wallet.lamports?.gt(ZERO));\n\n    // At lease one wallet is payable\n    const group = await Promise.all(\n      wallets.map(async (w): Promise<[Wallet, u64 | null]> => {\n        try {\n          return [w, await this.getCreationFee(w.mintAddress)];\n        } catch {\n          return [w, null];\n        }\n      }),\n    );\n\n    const walletsNew: Wallet[] = [];\n    for (const [w, fee] of group) {\n      if (fee && fee.lte(w.lamports ?? ZERO)) {\n        // Special case where wallet is native sol,\n        // needs to keeps rentExemptMinimum lamports in account to prevent error\n        // Transaction leaves an account with a lower balance than rent-exempt minimum\n        if (w.isNativeSOL && (w.lamports ?? ZERO).sub(fee).lt(this._rentExemptMinimum ?? ZERO)) {\n          continue;\n        } else {\n          walletsNew.push(w);\n        }\n      }\n    }\n    return walletsNew;\n  }\n\n  async createAccount(_address: string, _mint: string): Promise<void> {\n    const address = new PublicKey(_address);\n    const mint = new PublicKey(_mint);\n    const owner = this._feeRelayerAPIClient.provider.wallet.publicKey;\n\n    const associatedAccount = getAssociatedTokenAddressSync(SolanaSDKPublicKey.renBTCMint, owner);\n\n    // prepare transaction\n    const feePayer = (await this._feeRelayerContextManager.getCurrentContext()).feePayerAddress;\n    const preparing = this._feeRelayerAPIClient.prepareTransaction({\n      instructions: [\n        SPLToken.createAssociatedTokenAccountInstruction(\n          SolanaSDKPublicKey.splAssociatedTokenAccountProgramId,\n          SolanaSDKPublicKey.tokenProgramId,\n          SolanaSDKPublicKey.renBTCMint,\n          associatedAccount,\n          owner,\n          feePayer,\n        ),\n      ],\n      feePayer,\n    });\n\n    const updating = this._feeRelayerContextManager.update();\n\n    const [preparedTransaction] = await Promise.all([preparing, updating]);\n\n    // hack\n    preparedTransaction.owner = owner;\n\n    const context = await this._feeRelayerContextManager.getCurrentContext();\n    const tx = await this._feeRelayer.topUpAndRelayTransaction({\n      context,\n      transaction: preparedTransaction,\n      fee: new TokenAccount({ address: address, mint: mint }),\n      config: new FeeRelayerConfiguration({\n        operationType: StatsInfoOperationType.transfer,\n        currency: mint.toBase58(),\n      }),\n    });\n\n    await this._feeRelayerAPIClient.waitForConfirmation(tx);\n\n    this._walletsRepository.batchUpdate((wallets) => {\n      const string = wallets.find((wallet) => wallet.token.isNativeSOL)?.pubkey;\n      if (!string) {\n        return wallets;\n      }\n      const nativeWalletAddress = new PublicKey(string);\n      const renBTCAddress = getAssociatedTokenAddressSync(\n        SolanaSDKPublicKey.renBTCMint,\n        nativeWalletAddress,\n      );\n\n      if (!wallets.some((wallet) => wallet.pubkey === SolanaSDKPublicKey.renBTCMint.toString())) {\n        wallets.push(\n          new Wallet({\n            pubkey: renBTCAddress.toBase58(),\n            lamports: ZERO,\n            token: Token.renBTC,\n          }),\n        );\n      }\n\n      return wallets;\n    });\n  }\n\n  async getCreationFee(_mintAddress: string): Promise<u64> {\n    const mintAddress = new PublicKey(_mintAddress);\n\n    const feeAmount = new FeeAmount({\n      transaction: this._lamportsPerSignature ?? new u64(5000),\n      accountBalances: this._minRentExemption ?? new u64(2_039_280),\n    });\n\n    const feeInSOL = this._feeRelayer.feeCalculator.calculateNeededTopUpAmount({\n      context: await this._feeRelayerContextManager.getCurrentContext(),\n      expectedFee: feeAmount,\n      payingTokenMint: mintAddress,\n    });\n\n    const feeInToken = await this._feeRelayer.feeCalculator.calculateFeeInPayingToken({\n      orcaSwap: this._orcaSwap,\n      feeInSOL: feeInSOL,\n      payingFeeTokenMint: mintAddress,\n    });\n    console.log(500, {\n      mintAddress: _mintAddress,\n      feeAmount: feeAmount.toJSON(),\n      feeInSOL: feeInSOL.toJSON(),\n      feeInToken: feeInToken.toJSON(),\n    });\n\n    return feeInToken.total;\n  }\n}\n","import { action, computed, makeObservable, observable, reaction, runInAction } from 'mobx';\nimport { singleton } from 'tsyringe';\n\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport type { Wallet } from 'new/sdk/SolanaSDK';\nimport { convertToBalance } from 'new/sdk/SolanaSDK';\nimport { PricesService } from 'new/services/PriceAPIs/PricesService';\nimport { WalletsRepository } from 'new/services/Repositories';\n\nimport { RenBTCStatusService } from './RenBTCStatusService';\n\nexport enum RenBTCAccountStatus {\n  topUpRequired,\n  payingWalletAvailable,\n}\n\n@singleton()\nexport class ReceiveBitcoinModalViewModel extends ViewModel {\n  isLoading = true;\n  error: string | null = null;\n  accountStatus: RenBTCAccountStatus | null = null;\n  payableWallets: Wallet[] = [];\n\n  payingWallet: Wallet | null = null;\n  totalFee: number | null = null;\n  feeInFiat: number | null = null;\n\n  constructor(\n    private _renBTCStatusService: RenBTCStatusService,\n    private _priceService: PricesService,\n    private _walletsRepository: WalletsRepository,\n  ) {\n    super();\n\n    makeObservable(this, {\n      isLoading: observable,\n      error: observable,\n      accountStatus: observable,\n      payableWallets: observable,\n\n      payingWallet: observable,\n      totalFee: observable,\n      feeInFiat: observable,\n\n      solanaPubkey: computed,\n\n      reload: action,\n      createRenBTC: action,\n    });\n  }\n\n  protected override setDefaults() {\n    this.isLoading = false;\n    this.accountStatus = null;\n    this.payableWallets = [];\n    this.payingWallet = null;\n\n    this.totalFee = null;\n    this.feeInFiat = null;\n  }\n\n  protected override onInitialize() {\n    void this.reload();\n    void this._bind();\n  }\n\n  protected override afterReactionsRemoved() {}\n\n  get solanaPubkey(): string | null {\n    return this._walletsRepository.nativeWallet?.pubkey ?? null;\n  }\n\n  // Methods\n\n  async reload(): Promise<void> {\n    this.isLoading = true;\n    this.error = null;\n    this.accountStatus = null;\n    this.payableWallets = [];\n    this.payingWallet = null;\n\n    try {\n      await this._renBTCStatusService.load();\n      const payableWallets = await this._renBTCStatusService.getPayableWallets();\n\n      runInAction(() => {\n        this.error = null;\n        this.accountStatus = payableWallets.length\n          ? RenBTCAccountStatus.payingWalletAvailable\n          : RenBTCAccountStatus.topUpRequired;\n        this.payableWallets = payableWallets;\n        this.payingWallet = payableWallets[0] ?? null;\n      });\n    } catch (error) {\n      runInAction(() => {\n        console.error(error);\n        this.error = (error as Error).message;\n        this.accountStatus = null;\n        this.payableWallets = [];\n        this.payingWallet = null;\n      });\n    } finally {\n      runInAction(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n\n  private _bind(): void {\n    this.addReaction(\n      reaction(\n        () => this.payingWallet,\n        async (wallet) => {\n          if (!wallet) {\n            this.totalFee = null;\n            return;\n          }\n          try {\n            const fee = await this._renBTCStatusService.getCreationFee(wallet.mintAddress);\n            console.log(600, fee.toString(), wallet.mintAddress);\n            runInAction(() => {\n              this.totalFee = convertToBalance(fee, wallet.token.decimals);\n            });\n          } catch {\n            runInAction(() => {\n              this.totalFee = null;\n            });\n          }\n        },\n      ),\n    );\n\n    this.addReaction(\n      reaction(\n        () => this.totalFee,\n        (fee) => {\n          const symbol = this.payingWallet?.token.symbol;\n          if (!fee || !symbol) {\n            this.feeInFiat = null;\n            return;\n          }\n          const price = this._priceService.currentPrice(symbol)?.value;\n          if (!price) {\n            this.feeInFiat = null;\n            return;\n          }\n          this.feeInFiat = fee * price;\n        },\n      ),\n    );\n  }\n\n  async createRenBTC() {\n    const mintAddress = this.payingWallet?.mintAddress;\n    const address = this.payingWallet?.pubkey;\n    if (!mintAddress || !address) {\n      return;\n    }\n\n    this.isLoading = true;\n    this.error = null;\n\n    try {\n      await this._renBTCStatusService.createAccount(address, mintAddress);\n      this.error = null;\n    } catch (error) {\n      console.error(error);\n      this.error = (error as Error).message;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n","import type { FC } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { ButtonCancel } from 'new/ui/components/common/ButtonCancel';\nimport { Button } from 'new/ui/components/ui/Button';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\nexport const TopUp: FC<ModalPropsType> = ({ close }) => {\n  const history = useHistory();\n\n  const handleTopUpClick = () => {\n    close(false);\n    history.push('/buy');\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleTopUpClick}>\n            Top up your account\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            A <strong>renBTC account is required</strong> to receive bitcoins over the Bitcoin\n            network.\n          </Row>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>.\n          </Row>\n          <Row>\n            You <strong>don't have funds</strong> to pay for account creation, but if someone sends\n            renBTC to your address, it will be created for you.\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\n\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport { Loader } from 'new/ui/components/common/Loader';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nimport { LoaderWrapper, WrapperModal } from './common/styled';\nimport { Create } from './Create';\nimport { ReceiveBitcoinModalViewModel, RenBTCAccountStatus } from './ReceiveBitcoinModal.ViewModel';\nimport { TopUp } from './TopUp';\n\nconst LoaderWrapperStyled = styled(LoaderWrapper)`\n  height: 300px;\n`;\n\nexport const ReceiveBitcoinModal: FC<ModalPropsType> = observer(({ close }) => {\n  const viewModel = useViewModel(ReceiveBitcoinModalViewModel);\n\n  if (viewModel.isLoading) {\n    return (\n      <WrapperModal close={() => close(false)}>\n        <LoaderWrapperStyled>\n          <Loader size=\"100\" />\n        </LoaderWrapperStyled>\n      </WrapperModal>\n    );\n  }\n\n  if (viewModel.accountStatus === RenBTCAccountStatus.topUpRequired) {\n    return <TopUp close={close} />;\n  }\n\n  return <Create viewModel={viewModel} close={close} />;\n});\n","import type { FC, ReactElement } from 'react';\n\nimport { Modal } from 'new/ui/modals/Modal';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\ntype Props = {\n  items: ReactElement[];\n  title?: string;\n};\n\nexport const SelectListMobileModal: FC<ModalPropsType & Props> = ({ items, close, title }) => {\n  return (\n    <Modal noDelimiter={false} close={close} title={title}>\n      {items}\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { Defaults } from 'new/services/Defaults';\nimport { TokenAvatar } from 'new/ui/components/common/TokenAvatar';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport { FieldInfo, InfoTitle, InfoValue, InfoWrapper } from '../../common/styled';\n\ninterface Props {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const AmountSummaryView: FC<Props> = observer(({ viewModel }) => {\n  const wallet = viewModel.wallet;\n  const amount = viewModel.amount ?? 0;\n  const amountInFiat = amount * (wallet?.priceInCurrentFiat ?? 0);\n\n  return (\n    <FieldInfo>\n      <TokenAvatar token={wallet?.token} size={44} />\n      <InfoWrapper>\n        <InfoTitle>\n          {numberToString(amount, { maximumFractionDigits: 9 })} {wallet?.token.symbol ?? ''}\n        </InfoTitle>\n        <InfoValue>\n          {Defaults.fiat.symbol}\n          {numberToString(amountInFiat, { maximumFractionDigits: 2 })}\n        </InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { AddressText } from 'new/ui/components/common/AddressText';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  To,\n  Username,\n  WalletIcon,\n} from '../../common/styled';\n\ninterface Props {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const RecipientView: FC<Props> = observer(({ viewModel }) => {\n  const recipient = viewModel.recipient!;\n\n  return (\n    <FieldInfo>\n      <IconWrapper>\n        <WalletIcon name=\"wallet\" />\n      </IconWrapper>\n      <InfoWrapper>\n        {recipient.name ? (\n          <Username>\n            <To>To</To>\n            {recipient.name}\n          </Username>\n        ) : (\n          <InfoTitle className=\"secondary\">To address</InfoTitle>\n        )}\n        <InfoValue>\n          <AddressText address={recipient.address} medium />\n        </InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { ButtonCancel } from 'new/ui/components/common/ButtonCancel';\nimport { ErrorHint } from 'new/ui/components/common/ErrorHint';\nimport { PasswordInput } from 'new/ui/components/common/PasswordInput';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport type { ModalPropsType } from '../../ModalManager';\nimport { ArrowDown } from '../common/ArrowDown';\nimport { Section } from '../common/styled';\nimport { AmountSummaryView } from './AmountSummaryView';\nimport { RecipientView } from './RecipientView';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\nexport interface ConfirmSendModalProps {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const ConfirmSendModal: FC<ConfirmSendModalProps & ModalPropsType> = observer(\n  ({ close, viewModel }) => {\n    const { walletProviderInfo } = useWallet();\n    const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n    const [password, setPassword] = useState('');\n    const [hasError, setHasError] = useState(false);\n\n    const handleCloseClick = () => {\n      close(false);\n    };\n\n    const validatePassword = async (value: string) => {\n      try {\n        await tryUnlockSeedAndMnemonic(value);\n        setHasError(false);\n      } catch (error) {\n        setHasError(true);\n      }\n    };\n\n    const handlePasswordChange = (value: string) => {\n      setPassword(value);\n\n      if (value) {\n        void validatePassword(value);\n      }\n    };\n\n    const handleConfirmClick = () => {\n      close(true);\n      viewModel.authenticateAndSend();\n    };\n\n    const isSecretKeyWallet =\n      walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n    const isDisabled =\n      (isSecretKeyWallet && (!password || hasError)) ||\n      !viewModel.wallet ||\n      !viewModel.amount ||\n      !viewModel.recipient;\n\n    // const address = params.destination?.toBase58?.() || btcAddress;\n    // const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n    return (\n      <WrapperModal\n        title={<ModalTitle>Confirm sending {viewModel.wallet?.token.symbol ?? ''}</ModalTitle>}\n        close={handleCloseClick}\n        footer={\n          <>\n            <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n              <SendIcon name=\"top\" />\n              {viewModel.error?.buttonSuggestion ??\n                `Send ${numberToString(viewModel.amount, {\n                  maximumFractionDigits: 9,\n                })} ${viewModel.wallet?.token.symbol ?? ''}`}\n            </Button>\n            <ButtonCancel onClick={handleCloseClick} />\n          </>\n        }\n        noDelimiter={false}\n      >\n        <ActionTitle>You are going to send</ActionTitle>\n\n        <Section className=\"send\">\n          <div>\n            <AmountSummaryView viewModel={viewModel} />\n            <ArrowDown />\n            <RecipientView viewModel={viewModel} />\n          </div>\n\n          {/*<TransactionDetails sendState={sendState} amount={params.amount} />*/}\n        </Section>\n\n        {isSecretKeyWallet ? (\n          <Section className=\"password\">\n            <SubTitle>Enter password to confirm</SubTitle>\n            <PasswordInputStyled\n              value={password}\n              onChange={handlePasswordChange}\n              isError={hasError}\n            />\n            {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : null}\n          </Section>\n        ) : null}\n      </WrapperModal>\n    );\n  },\n);\n","import type { FC } from 'react';\nimport { useLayoutEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { ErrorHint } from 'new/ui/components/common/ErrorHint';\nimport { PasswordInput } from 'new/ui/components/common/PasswordInput';\nimport { Section } from 'new/ui/modals/confirmModals/common/styled';\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\ninterface Props {\n  onChange: (flag: boolean) => void;\n}\n\n// TODO: remake it during auth reimplementation\nexport const SectionPassword: FC<Props> = ({ onChange }) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n\n  useLayoutEffect(() => {\n    onChange(isSecretKeyWallet && (!password || hasError));\n  }, [hasError, isSecretKeyWallet, onChange, password]);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  if (!isSecretKeyWallet) {\n    return null;\n  }\n\n  return (\n    <Section className=\"password\">\n      <SubTitle>Enter password to confirm</SubTitle>\n      <PasswordInputStyled value={password} onChange={handlePasswordChange} isError={hasError} />\n      {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : null}\n    </Section>\n  );\n};\n","import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\n\nimport { Icon } from 'components/ui';\nimport { Button } from 'new/ui/components/ui/Button';\n\nimport type { ConfirmSwapModalViewModel } from '../ConfirmSwapModal.ViewModel';\n\nconst SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ninterface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n}\n\nexport const ActionButton: FC<Props> = observer(({ viewModel, ...props }) => {\n  return (\n    <Button primary {...props}>\n      <SwapIcon name=\"top\" /> Swap {viewModel.sourceWallet?.token.symbol ?? ''} →{' '}\n      {viewModel.destinationWallet?.token.symbol ?? ''}\n    </Button>\n  );\n});\n","import { action, computed, makeObservable } from 'mobx';\nimport assert from 'ts-invariant';\nimport { injectable } from 'tsyringe';\n\nimport type { LoadableRelay } from 'new/app/models/LoadableRelay';\nimport type { PayingFee } from 'new/app/models/PayingFee';\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport type { SwapViewModel } from 'new/scenes/Main/Swap';\nimport type { Wallet } from 'new/sdk/SolanaSDK';\nimport { Defaults } from 'new/services/Defaults';\nimport { PricesService } from 'new/services/PriceAPIs/PricesService';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\n// @web: i use injectable to don't reset swapViewModel during hmr, it cause\n// page crash then swapViewModel is not available\n@injectable()\nexport class ConfirmSwapModalViewModel extends ViewModel {\n  private _swapViewModel: Readonly<SwapViewModel> | null;\n\n  constructor(private _pricesService: PricesService) {\n    super();\n\n    this._swapViewModel = null;\n\n    makeObservable(this, {\n      sourceWallet: computed,\n      destinationWallet: computed,\n      inputAmount: computed,\n      estimatedAmount: computed,\n      minimumReceiveAmount: computed,\n      exchangeRate: computed,\n      fees: computed,\n      slippage: computed,\n\n      getPrice: action,\n      authenticateAndSwap: action,\n\n      inputAmountString: computed,\n      inputAmountInFiatString: computed,\n      estimatedAmountString: computed,\n      receiveAtLeastString: computed,\n      receiveAtLeastInFiatString: computed,\n\n      totalFees: computed,\n      setSwapViewModel: action,\n    });\n  }\n\n  protected override setDefaults() {\n    // this._swapViewModel = null;\n  }\n\n  protected override onInitialize() {}\n\n  protected override afterReactionsRemoved() {}\n\n  get sourceWallet(): Wallet | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.sourceWallet;\n  }\n\n  get destinationWallet(): Wallet | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.destinationWallet;\n  }\n\n  get inputAmount(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.inputAmount;\n  }\n\n  get estimatedAmount(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.estimatedAmount;\n  }\n\n  get minimumReceiveAmount(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.minimumReceiveAmount;\n  }\n\n  get exchangeRate(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.exchangeRate;\n  }\n\n  get fees(): LoadableRelay<PayingFee[]> {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.fees;\n  }\n\n  get slippage(): number {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.slippage;\n  }\n\n  getPrice(symbol: string): number | null {\n    return this._pricesService.currentPrice(symbol)?.value ?? null;\n  }\n\n  authenticateAndSwap(): void {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    this._swapViewModel.authenticateAndSwap();\n  }\n\n  // Extend\n\n  get inputAmountString(): string {\n    const wallet = this.sourceWallet;\n    const amount = this.inputAmount;\n    return `${numberToString(amount ?? 0, {\n      maximumFractionDigits: 9,\n    })} ${wallet?.token.symbol}`;\n  }\n\n  get inputAmountInFiatString(): string {\n    const wallet = this.sourceWallet;\n    const amount = this.inputAmount;\n    return `${Defaults.fiat.symbol}${numberToString(\n      (amount ?? 0) * (wallet?.priceInCurrentFiat ?? 0),\n      {\n        maximumFractionDigits: 2,\n      },\n    )}`;\n  }\n\n  get estimatedAmountString(): string {\n    const wallet = this.destinationWallet;\n    const amount = this.estimatedAmount;\n    return `${numberToString(amount ?? 0, { maximumFractionDigits: 9 })} ${wallet?.token.symbol}`;\n  }\n\n  get receiveAtLeastString(): string {\n    const wallet = this.destinationWallet;\n    const amount = this.minimumReceiveAmount;\n    return `${numberToString(amount ?? 0, { maximumFractionDigits: 9 })} ${\n      wallet?.token.symbol ?? ''\n    }`;\n  }\n\n  get receiveAtLeastInFiatString(): string {\n    const wallet = this.destinationWallet;\n    const amount = this.minimumReceiveAmount;\n    return `${Defaults.fiat.symbol}${numberToString(\n      (amount ?? 0) * (wallet?.priceInCurrentFiat ?? 0),\n      { maximumFractionDigits: 2 },\n    )}`;\n  }\n\n  // @web: own code\n\n  get totalFees(): {\n    totalFeesSymbol: string;\n    decimals: number;\n    amount: number;\n    amountInFiat: number;\n  } | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.totalFees;\n  }\n\n  setSwapViewModel(swapViewModel: Readonly<SwapViewModel>): void {\n    this._swapViewModel = swapViewModel;\n  }\n}\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { Row, Text } from 'components/ui/AccordionDetails/common';\n\nimport type { ConfirmSwapModalViewModel } from '../../ConfirmSwapModal.ViewModel';\n\ninterface Props {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n}\n\nexport const SlippageView: FC<Props> = observer(({ viewModel }) => {\n  return (\n    <Row>\n      <Text className=\"gray\">Max price slippage</Text>\n      <Text>{viewModel.slippage * 100}%</Text>\n    </Row>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\nimport { expr } from 'mobx-utils';\n\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { DetailFeesView } from 'new/scenes/Main/Swap/Swap/Subviews/DetailsView/DetailFeesView';\nimport { RatesStackView } from 'new/scenes/Main/Swap/Swap/Subviews/DetailsView/RatesStackView';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport type { ConfirmSwapModalViewModel } from '../ConfirmSwapModal.ViewModel';\nimport { SlippageView } from './SlippageView';\n\ninterface Props {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n}\n\nexport const DetailsView: FC<Props> = observer(({ viewModel }) => {\n  const totalFee = expr(() => {\n    const totalFees = viewModel.totalFees;\n    if (totalFees) {\n      const { amount, decimals, totalFeesSymbol } = totalFees;\n      return `${numberToString(amount, { maximumFractionDigits: decimals })} ${totalFeesSymbol}`;\n    }\n    return '';\n  });\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Swap details\"\n          titleBottomName=\"Total fee\"\n          titleBottomValue={totalFee}\n        />\n      }\n      open={true}\n      noContentPadding\n    >\n      <RatesStackView\n        exchangeRate={viewModel.exchangeRate}\n        sourceWallet={viewModel.sourceWallet}\n        destinationWallet={viewModel.destinationWallet}\n      />\n      <DetailFeesView viewModel={viewModel} slippageView={<SlippageView viewModel={viewModel} />} />\n    </Accordion>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { TokenAvatar } from 'new/ui/components/common/TokenAvatar';\n\nimport { FieldInfo, InfoTitle, InfoValue, InfoWrapper } from '../../common/styled';\nimport type { ConfirmSwapModalViewModel } from '../ConfirmSwapModal.ViewModel';\n\ninterface Props {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n  type: 'source' | 'destination';\n}\n\nexport const WalletView: FC<Props> = observer(({ viewModel, type }) => {\n  const wallet = type === 'source' ? viewModel.sourceWallet : viewModel.destinationWallet;\n  const amountLabel =\n    type === 'source' ? viewModel.inputAmountString : viewModel.estimatedAmountString;\n  const equityAmountLabel =\n    type === 'source'\n      ? `~${viewModel.inputAmountInFiatString}`\n      : `Receive at least: ${viewModel.receiveAtLeastString}`;\n\n  return (\n    <FieldInfo>\n      <TokenAvatar token={wallet?.token} size={44} />\n      <InfoWrapper>\n        <InfoTitle>{amountLabel}</InfoTitle>\n        <InfoValue>{equityAmountLabel}</InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\nimport { Modal } from 'components/ui/Modal';\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport type { SwapViewModel } from 'new/scenes/Main/Swap';\nimport { ButtonCancel } from 'new/ui/components/common/ButtonCancel';\n\nimport type { ModalPropsType } from '../../ModalManager';\nimport { ArrowDown } from '../common/ArrowDown';\nimport { SectionPassword } from '../common/SectionPassword';\nimport { Section } from '../common/styled';\nimport { ActionButton } from './ActionButton';\nimport { ConfirmSwapModalViewModel } from './ConfirmSwapModal.ViewModel';\nimport { DetailsView } from './DetailsView';\nimport { WalletView } from './WalletView';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n`;\n\nexport interface ConfirmSwapModalProps {\n  viewModel: Readonly<SwapViewModel>;\n}\n\nexport const ConfirmSwapModal: FC<ConfirmSwapModalProps & ModalPropsType> = observer(\n  ({ close, viewModel }) => {\n    const vm = useViewModel(ConfirmSwapModalViewModel);\n    vm.setSwapViewModel(viewModel);\n\n    const [isDisabled, setIsDisabled] = useState(true);\n\n    const handleCloseClick = () => {\n      close(false);\n    };\n\n    const handleConfirmClick = () => {\n      close(true);\n      vm.authenticateAndSwap();\n    };\n\n    const handleDisabledChange = (flag: boolean) => {\n      setIsDisabled(flag);\n    };\n\n    return (\n      <WrapperModal\n        title={\n          <ModalTitle>\n            Confirm swapping {vm.sourceWallet?.token.symbol ?? ''} →{' '}\n            {vm.destinationWallet?.token.symbol ?? ''}\n          </ModalTitle>\n        }\n        close={handleCloseClick}\n        footer={\n          <>\n            <ActionButton viewModel={vm} disabled={isDisabled} onClick={handleConfirmClick} />\n            <ButtonCancel onClick={handleCloseClick} />\n          </>\n        }\n        noDelimiter={false}\n      >\n        <ActionTitle>You are going to swap</ActionTitle>\n        <Section className=\"swap\">\n          <div>\n            <WalletView viewModel={vm} type=\"source\" />\n            <ArrowDown />\n            <WalletView viewModel={vm} type=\"destination\" />\n          </div>\n          <DetailsView viewModel={vm} />\n        </Section>\n        <SectionPassword onChange={handleDisabledChange} />\n      </WrapperModal>\n    );\n  },\n);\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const ArrowDown: FC = () => {\n  return (\n    <Wrapper>\n      <ArrowIconWrapper>\n        <ArrowIcon name=\"arrow-down\" />\n      </ArrowIconWrapper>\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    grid-gap: 36px;\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n"],"names":["CancelIcon","ButtonCancel","props","hollow","error","name","useCloseTokenAccount","providerMut","useSolana","publicKey","useWallet","handleTX","useSail","updateUserTokenAccountKeys","useTokenAccountsContext","useCallback","params","Error","tx","closeAccount","toBase58","result","success","Wrapper","IconWrapper","CloseAccountIcon","Header","Description","Buttons","ButtonClose","CloseTokenAccountModal","close","closeTokenAccount","useState","handleCloseTokenAButtonClick","setIsExecuting","console","setTimeout","history","disabled","onClick","lightBlue","StyledIcon","ButtonStyled","ErrorModal","primary","CloseButton","CloseIcon","ProceedUsernameModal","updateSettings","useSettings","usernameBannerHiddenByUser","type","ItemWrapper","Info","Top","Bottom","TokenAccountRow","className","loading","width","height","borderRadius","size","token","tokenAccount","value","MainWrapper","SelectedWrapper","InfoWrapper","Line","Text","ChevronIcon","DropDownListContainer","DropDownHeader","DropDownList","FeePaySelector","isShortList","selectorRef","useRef","dropdownRef","listRef","symbols","useMemo","tokenAccounts","markets","useMarketsData","handleAwayClick","e","setIsOpen","useEffect","window","filteredTokenAccounts","account","filteredWithBalance","matchesFilter","sortByRules","filter","handleTokenAccountClick","nextTokenAccount","onTokenAccountChange","ref","state","classNames","isOpen","symbol","placeholder","onChange","nextFilter","setFilter","WrapperModal","Section","List","Row","Create","solanaProvider","network","useRenNetwork","useUserTokenAccounts","expiryTime","useLockAndMintProvider","handleCreateAccountClick","setCreating","Bitcoin","ToastManager","title","description","iconName","iconBgClassName","footer","milliseconds","getRemainingGatewayTime","TopUp","useHistory","trackEvent","ReceiveBitcoinModal","nativeBalance","toU64","toNumber","accountRentExemption","SelectListMobileModal","items","Modal","noDelimiter","FieldInfo","WalletIcon","InfoTitle","Username","To","InfoValue","TokenAndUsd","AmountUSDStyled","TransactionDetails","amount","titleBottomName","titleBottomValue","sendState","open","noContentPadding","prefix","postfix","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","btcAddress","address","isFullName","test","medium","ModalTitle","SubTitle","ActionTitle","PasswordInputStyled","SendIcon","TransactionConfirmModal","walletProviderInfo","tryUnlockSeedAndMnemonic","useTryUnlockSeedAndMnemonic","validatePassword","setHasError","handleConfirmClick","handleCloseClick","isSecretKeyWallet","DEFAULT_WALLET_PROVIDERS","DefaultWalletType","isDisabled","password","swapInfo","action","renderButtons","setPassword","isError","hasError","noIcon","StatusWrapper","Status","StatusIndicator","FieldRowWrapper","ColumnWrapper","AddressWrapper","AddressTitle","AddressValue","FieldTitleWrapper","PaidByBadge","PaddedHeader","TransactionDetailsModal","source","transaction","useTransaction","signature","sourceTokenAccount","useTokenAccount","usePubkey","destinationTokenAccount","tokenAmount","useTokenAccountAmount","sourceToken","destinationToken","date","dayjs","isShowFeeBadge","titleCase","isShowDetails","destination","shortAddress","renderFromTo","formatNumber","href","getExplorerUrl","target","rel","isCentered","lightGray","setShowDetails","StatusColors","ProgressWrapper","Title","Desc","CloseWrapper","Content","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","mobile","Handle","Delimiter","IconStyled","children","isMobile","useIsMobile","location","useLocation","currentPath","doNotCloseOnPathChangeMobile","config","duration","t","from","transform","enter","leave","fadeTransition","useTransition","useSpring","y","mass","tension","friction","bind","useDrag","set","item","style","n","hasIcon","Boolean","WarningIcon","ErrorHint","WrapperLabel","Input","EyeWrapper","EyeIcon","REGEX_PASSWORD","PasswordInput","isFocused","isShowPassword","onFocus","setIsFocused","onBlur","setIsShowPassword","ActionButton","ActionsMobileModal","layoutViewModel","handleButtonClick","route","fromPage","pathname","icon","ActionRow","isMobilePopupChild","wallet","ChooseBuyTokenMobileModalViewModel","singleton","_wallets","_solanaService","solWallet","usdcWallet","solToken","usdcToken","makeObservable","observable","_setWallets","_getBuySelectionWallet","CryptoCurrency","this","addReaction","reaction","newSOLWallet","newUSDCWallet","cryptoCurrency","getWallets","find","mintAddress","getToken","runInAction","_getToken","then","newSOLToken","newUSDCToken","ViewModel","ChooseBuyTokenMobileModal","observer","useViewModel","handleRowClick","newPath","push","zIndexes","ExplorerBlockLink","Address","ExternalIcon","TransactionID","transactionID","truncatingMiddle","numOfSymbolsRevealed","numOfSymbolsRevealedInSuffix","Direction","TransferType","sourceAmount","destinationAmount","accountSymbol","spend","receive","transitive","direction","StatusType","TransferInfo","authority","destinationAuthority","rawAmount","pubkey","send","transferType","TransactionStatusType","percent","_percent","_error","SolanaSDKError","requesting","processing","confirmed","ParsedTransaction","status","info","amountInFiat","slot","blockTime","fee","blockhash","paidByP2POrg","TransactionStatus","numberOfConfirmed","_numberOfConfirmed","sending","numberOfConfirmations","maxConfirmed","finalized","PendingTransaction","transactionId","sentAt","writtenToRepository","rawTransaction","makeAutoObservable","pricesService","message","constructor","ProcessTransaction","convertToBalance","sender","decimals","SolanaSDK","receiver","lamports","ZERO","currentPrice","feeInToken","destinationWallet","PublicKey","_authority","getAssociatedTokenAddressSync","SolanaSDKPublicKey","toString","sourceWallet","estimatedAmount","networkFeesAll","fees","TransactionHandler","_apiClient","_walletsRepository","_pricesService","_socket","transactions","_onNewTransactionEmitter","listeners","emit","callbacks","i","length","on","cb","onNewTransaction","sendTransaction","observeTransaction","areSomeTransactionsInProgress","computed","getProccessingTransactions","getProcessingTransactionAll","sendAndObserve","_updateTransactionAtIndex","processingTransaction","txIndex","trx","Date","index","transactionIndex","some","isProcessing","pt","map","parse","nativeWallet","createRequest","_observe","currentValue","promiseRetry","retry","provider","connection","getSignatureStatus","txStatus","confirmations","confirmationStatus","retries","minTimeout","maxTimeout","factor","update","newValue","_updateRepository","isConnected","batchUpdate","wallets","findIndex","decreaseBalance","increaseBalance","payingFeeWallet","total","reimbursedAmount","closingWallet","isNative","add","isNativeSOL","toLamport","FeeTypeEnum","ProcessTransactionModalViewModel","injectable","_transactionHandler","pendingTransaction","observingTransactionIndex","setTransaction","isSwapping","getMainDescription","sendAndObserveTransaction","assert","isSwap","mainDescription","unknownErrorInfo","HeaderLabel","viewModel","text","expr","originalText","FeeRelayerError","ProgressIcon","ProgressLine","ProgressStub","BlockWrapper","ProgressView","isSending","isSuccess","newProgress","timerId","setInterval","setProgress","progress","clearTimeout","ProcessTransactionModal","useLayoutEffect","disposer","LoaderWrapper","RenBTCButton","buttonText","totalFee","payingWallet","numberToString","maximumFractionDigits","handleClick","createRenBTC","isLoading","Loader","RenBTCAccountStatus","RenBTCStatusService","_feeRelayerAPIClient","_orcaSwap","_feeRelayer","_feeRelayerContextManager","_minRentExemption","_lamportsPerSignature","_rentExemptMinimum","feeRelayerAPIClient","FeeRelayerAPIClient","FeeRelayerContextManager","owner","solanaAPIClient","load","getMinimumBalanceForRentExemption","AccountInfo","getLamportsPerSignature","gt","Promise","all","w","getCreationFee","group","walletsNew","lte","sub","lt","_address","_mint","mint","associatedAccount","getCurrentContext","feePayer","feePayerAddress","preparing","prepareTransaction","instructions","SPLToken","updating","preparedTransaction","context","topUpAndRelayTransaction","TokenAccount","FeeRelayerConfiguration","operationType","StatsInfoOperationType","currency","waitForConfirmation","string","nativeWalletAddress","renBTCAddress","Wallet","Token","_mintAddress","feeAmount","FeeAmount","u64","accountBalances","feeCalculator","expectedFee","payingTokenMint","feeInSOL","calculateNeededTopUpAmount","calculateFeeInPayingToken","orcaSwap","payingFeeTokenMint","log","toJSON","ReceiveBitcoinModalViewModel","_renBTCStatusService","_priceService","accountStatus","payableWallets","feeInFiat","solanaPubkey","reload","_bind","getPayableWallets","payingWalletAvailable","topUpRequired","price","createAccount","LoaderWrapperStyled","AmountSummaryView","Defaults","RecipientView","recipient","ConfirmSendModal","SectionPassword","ConfirmSwapModalViewModel","_swapViewModel","inputAmount","minimumReceiveAmount","exchangeRate","slippage","getPrice","authenticateAndSwap","inputAmountString","inputAmountInFiatString","estimatedAmountString","receiveAtLeastString","receiveAtLeastInFiatString","totalFees","setSwapViewModel","priceInCurrentFiat","swapViewModel","SlippageView","DetailsView","totalFeesSymbol","AccordionTitle","RatesStackView","DetailFeesView","slippageView","WalletView","amountLabel","equityAmountLabel","ConfirmSwapModal","vm","flag","setIsDisabled","ArrowDown"],"sourceRoot":""}