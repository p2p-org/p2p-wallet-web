{"version":3,"file":"0e8c1143124b0602aab5.chunk.js","mappings":"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","sources":["webpack://@p2p-wallet-web/web/src/components/common/ButtonCancel/ButtonCancel.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ActionsMobileModal/ActionButton/ActionButton.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ActionsMobileModal/ActionsMobileModal.tsx","webpack://@p2p-wallet-web/web/src/components/common/TokenAccountRowContent/TokenAccountRowContent.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ChooseBuyTokenMobileModal/ActionRow.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.tsx","webpack://@p2p-wallet-web/web/./src/app/hooks/useCloseTokenAccount.ts","webpack://@p2p-wallet-web/web/src/components/modals/CloseTokenAccountModal/CloseTokenAccountModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ErrorModal/ErrorModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ProceedUsernameModal/ProceedUsernameModal.tsx","webpack://@p2p-wallet-web/web/src/components/common/FeePaySelector/TokenAccountRow/TokenAccountRow.tsx","webpack://@p2p-wallet-web/web/src/components/common/FeePaySelector/FeePaySelector.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/Create/Create.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/TopUp/TopUp.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/SelectListMobileModal/SelectListMobileModal.tsx","webpack://@p2p-wallet-web/web/src/components/common/TransactionDetails/TransactionDetails.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/Send/Send.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/Swap/Swap.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionDetailsModal/TransactionDetailsModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionStatusSendModal/TransactionStatusSendModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionStatusSwapModal/TransactionStatusSwapModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/DateHeader/DateHeader.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/SolanaExplorerLink/SolanaExplorerLink.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/TransactionProgress/TransactionProgress.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/ui/Modal/Modal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ActionsMobileModal/ActionButton/ActionButton.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ActionsMobileModal/ActionsMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ChooseBuyTokenMobileModal/ActionRow.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.ViewModel.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/Modal/Modal.tsx","webpack://@p2p-wallet-web/web/./src/new/app/models/PendingTransaction.ts","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/Status/HeaderLabel/HeaderLabel.tsx","webpack://@p2p-wallet-web/web/./src/new/services/TransactionHandler/TransactionHandler.ts","webpack://@p2p-wallet-web/web/./src/new/utils/libs/nanoEvent.js","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ProcessTransactionModal/ProcessTransactionModal.ViewModel.ts","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/ProcessTransactionModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/common/styled.ts","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/AmountSummaryView/AmountSummaryView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/RecipientView/RecipientView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/ConfirmSendModal.tsx"],"sourcesContent":["import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import type { FC, HTMLAttributes } from 'react';\nimport React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n\n  &:not(:last-child)::before {\n    position: absolute;\n\n    bottom: -12px;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 20px;\n  height: 20px;\n`;\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon: string;\n}\n\nexport const ActionButton: FC<Props> = ({ icon, onClick, children }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      <IconWrapper>\n        <IconStyled name={icon} />\n      </IconWrapper>\n      {children}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { styled } from '@linaria/react';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ModalType, useModals } from 'app/contexts';\nimport { ActionButton } from 'components/modals/ActionsMobileModal/ActionButton';\nimport { Modal } from 'components/ui/Modal';\n\nconst Content = styled.div`\n  display: grid;\n  grid-gap: 25px;\n\n  padding: 18px 0;\n`;\n\ninterface Props {}\n\nexport const ActionsMobileModal: FC<Props & ModalPropsType> = ({ close }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { openModal } = useModals();\n\n  const handleButtonClick = (route: string) => () => {\n    close(false);\n    history.push(route, { fromPage: location.pathname });\n  };\n\n  const handleBuyButtonClick = () => {\n    openModal(ModalType.SHOW_MODAL_CHOOSE_BUY_TOKEN_MOBILE);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  return (\n    <Modal close={handleCloseClick} noDelimiter>\n      <Content>\n        <ActionButton icon=\"plus\" onClick={handleBuyButtonClick}>\n          Buy\n        </ActionButton>\n        <ActionButton icon=\"bottom\" onClick={handleButtonClick('/receive')}>\n          Receive\n        </ActionButton>\n        <ActionButton icon=\"top\" onClick={handleButtonClick('/send')}>\n          Send\n        </ActionButton>\n        <ActionButton icon=\"swap\" onClick={handleButtonClick('/swap')}>\n          Swap\n        </ActionButton>\n      </Content>\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nimport { getAvatarSize } from 'utils/common';\nimport { shortAddress } from 'utils/tokens';\n\nimport { AmountUSD } from '../AmountUSD';\nimport { TokenAvatar } from '../TokenAvatar';\n\nexport const TokenAvatarStyled = styled(TokenAvatar)``;\n\nconst TokenInfo = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-rows: 22px 22px;\n  grid-template-columns: 1fr 1fr;\n`;\n\nconst TokenName = styled.div`\n  flex: 1;\n\n  max-width: 300px;\n  overflow: hidden;\n\n  color: ${theme.colors.textIcon.primary};\n\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 140%;\n\n  ${up.tablet} {\n    font-weight: 600;\n    font-size: 16px;\n  }\n\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\n\nconst TokenBalance = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 13px;\n  line-height: 140%;\n\n  ${up.tablet} {\n    font-size: 14px;\n  }\n`;\n\nconst TokenUSD = styled.div`\n  grid-row: 1 / -1;\n  align-self: center;\n  justify-self: flex-end;\n\n  color: #202020;\n  font-weight: 600;\n  font-size: 17px;\n  line-height: 140%;\n\n  ${up.tablet} {\n    font-size: 18px;\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin-left: 12px;\n\n  &.isMobilePopupChild {\n    ${TokenInfo} {\n      grid-template-rows: 20px 20px;\n    }\n\n    ${TokenName} {\n      font-weight: 500;\n    }\n\n    ${TokenBalance} {\n      font-size: 14px;\n    }\n\n    ${TokenUSD} {\n      font-size: 16px;\n    }\n  }\n\n  .isSelected & {\n    ${TokenName} {\n      font-weight: 700;\n    }\n\n    ${TokenUSD} {\n      font-weight: 700;\n    }\n  }\n`;\n\ninterface Props {\n  tokenAccount?: TokenAccount;\n  isMobilePopupChild?: boolean;\n}\n\nexport const TokenAccountRowContent: FC<Props> = ({ tokenAccount, isMobilePopupChild }) => {\n  const isMobile = useIsMobile();\n\n  if (!tokenAccount) {\n    return null;\n  }\n\n  const avatarSize = getAvatarSize(isMobile);\n\n  const { loading } = tokenAccount;\n\n  const renderTokenName = () => {\n    const tokenName =\n      tokenAccount.balance?.token.name ||\n      tokenAccount.balance?.token.symbol ||\n      (tokenAccount.balance?.token.address && shortAddress(tokenAccount.balance?.token.address));\n\n    return (\n      <TokenName title={tokenAccount.balance?.token.address}>\n        {loading ? <Skeleton width={100} height={16} /> : tokenName}\n      </TokenName>\n    );\n  };\n\n  const elTokenBalance = (\n    <TokenBalance>\n      {loading ? <Skeleton width={100} height={14} /> : <>{tokenAccount.balance?.formatUnits()}</>}\n    </TokenBalance>\n  );\n\n  const renderTokenUSD = () => {\n    if (loading) {\n      return (\n        <TokenUSD>\n          <Skeleton width={50} height={14} />\n        </TokenUSD>\n      );\n    }\n\n    if (tokenAccount.balance) {\n      return (\n        <TokenUSD>\n          <AmountUSD value={tokenAccount.balance} />\n        </TokenUSD>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Skeleton height={avatarSize} width={avatarSize} borderRadius={12} />\n      ) : (\n        <TokenAvatarStyled\n          symbol={tokenAccount?.balance?.token.symbol}\n          address={tokenAccount?.balance?.token.address}\n          size={avatarSize}\n        />\n      )}\n      <Content className={classNames({ isMobilePopupChild })}>\n        <TokenInfo>\n          {renderTokenName()}\n          {elTokenBalance}\n          {renderTokenUSD()}\n        </TokenInfo>\n      </Content>\n    </>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\n\nimport { TokenAccountRowContent } from 'components/common/TokenAccountRowContent';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 26px 10px;\n`;\n\ninterface Props {\n  tokenAccount?: TokenAccount;\n  onClick: () => void;\n}\n\nexport const ActionRow: FC<Props> = ({ tokenAccount, onClick }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      <TokenAccountRowContent tokenAccount={tokenAccount} isMobilePopupChild />\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport {\n  useToken,\n  useUserAssociatedTokenAccountsWithNativeSOLOverride,\n} from '@p2p-wallet-web/core';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { useConfig } from 'app/contexts';\nimport { Modal } from 'components/ui/Modal';\n\nimport { ActionRow } from './ActionRow';\n\nexport const ChooseBuyTokenMobileModal: FC<ModalPropsType> = ({ close }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { tokenConfigs } = useConfig();\n  const tokenSOL = useToken(tokenConfigs['SOL']?.mint);\n  const tokenUSDC = useToken(tokenConfigs['USDC']?.mint);\n\n  const tokenAccountList = useUserAssociatedTokenAccountsWithNativeSOLOverride([\n    tokenSOL,\n    tokenUSDC,\n  ]);\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const handleRowClick = (tokenAccount?: TokenAccount) => {\n    handleCloseClick();\n\n    const symbol = tokenAccount?.balance?.token.symbol || 'SOL';\n    const newPath = `/buy/${symbol}`;\n\n    if (location.pathname !== newPath) {\n      history.push(newPath);\n    }\n  };\n\n  return (\n    <Modal noDelimiter={false} close={handleCloseClick} title=\"Choose a crypto for buying\">\n      {tokenAccountList.map((tokenAccount) => (\n        <ActionRow\n          key={tokenAccount?.key?.toBase58()}\n          tokenAccount={tokenAccount}\n          onClick={() => handleRowClick(tokenAccount)}\n        />\n      ))}\n    </Modal>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useSolana, useTokenAccountsContext, useWallet } from '@p2p-wallet-web/core';\nimport type { HandleTXResponse } from '@p2p-wallet-web/sail';\nimport { useSail } from '@p2p-wallet-web/sail';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { closeAccount } from 'app/instructions';\n\nexport type CloseTokenParams = {\n  publicKey: PublicKey;\n};\n\nexport const useCloseTokenAccount = () => {\n  const { providerMut } = useSolana();\n  const { publicKey } = useWallet();\n  const { handleTX } = useSail();\n  const { updateUserTokenAccountKeys } = useTokenAccountsContext();\n\n  return useCallback(\n    async (params: CloseTokenParams): Promise<HandleTXResponse> => {\n      if (!providerMut) {\n        throw new Error('Provider not ready');\n      }\n\n      const tx = closeAccount(providerMut, params.publicKey, publicKey);\n      const result = await handleTX(tx, `Close token account ${params.publicKey.toBase58()}`);\n      if (result.success) {\n        // TODO: as i checked, you need to reinvestigate better way to update tokens after close\n        // because now it shows after this update\n        updateUserTokenAccountKeys();\n      }\n\n      return result;\n    },\n    [handleTX, providerMut, publicKey],\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type * as web3 from '@solana/web3.js';\nimport type { History } from 'history';\n\nimport { useCloseTokenAccount } from 'app/hooks';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 0;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst CloseAccountIcon = styled(Icon)`\n  width: 25px;\n  height: 25px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px;\n`;\n\nconst ButtonClose = styled(Button)`\n  margin-right: 16px;\n\n  color: #f43d3d;\n\n  border: 1px solid #f43d3d;\n\n  &:disabled {\n    background: #f77;\n    border: none;\n    opacity: 0.5;\n  }\n`;\n\nconst ButtonCancel = styled(Button)`\n  min-width: 93px;\n`;\n\ntype Props = {\n  publicKey: web3.PublicKey;\n  tokenName: string;\n  history: History;\n  close: () => void;\n};\n\nexport const CloseTokenAccountModal: FunctionComponent<Props> = ({\n  publicKey,\n  tokenName,\n  history,\n  close,\n}) => {\n  const closeTokenAccount = useCloseTokenAccount();\n  const [isExecuting, setIsExecuting] = useState(false);\n\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  const handleCloseTokenAButtonClick = async () => {\n    try {\n      setIsExecuting(true);\n      await closeTokenAccount({ publicKey });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsExecuting(false);\n    }\n\n    setTimeout(() => {\n      history.push('/wallets');\n    }, 100);\n\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <CloseAccountIcon name=\"bucket\" />\n      </IconWrapper>\n      <Header>{`Close ${tokenName} account?`}</Header>\n      <Description>\n        Are you sure you want to delete token account? This will permanently disable token transfers\n        to this address and remove it from your wallet.\n      </Description>\n      <Buttons>\n        <ButtonClose disabled={isExecuting} onClick={handleCloseTokenAButtonClick}>\n          Close token account\n        </ButtonClose>\n        <ButtonCancel lightBlue disabled={isExecuting} onClick={handleCloseButtonClick}>\n          Cancel\n        </ButtonCancel>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 24px;\n\n  overflow: hidden;\n\n  background: #fff;\n\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px;\n  padding-bottom: 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px 0;\n`;\n\nconst ButtonStyled = styled(Button)`\n  width: 120px;\n`;\n\ntype Props = {\n  icon: string;\n  header: string;\n  text: string;\n  close: () => void;\n};\n\nexport const ErrorModal: FunctionComponent<Props> = ({ icon, header, text, close }) => {\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <StyledIcon name={icon} />\n      </IconWrapper>\n      <Header>{header}</Header>\n      <Description>{text}</Description>\n      <Buttons>\n        <ButtonStyled primary onClick={handleCloseButtonClick}>\n          Ok\n        </ButtonStyled>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { useSettings } from 'app/contexts/general/settings';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  padding: 22px 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n\n  text-align: center;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Description = styled.div`\n  padding: 16px 20px 24px;\n\n  font-weight: 600;\n  font-size: 16px;\n`;\n\nconst Buttons = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 16px;\n  padding: 16px 20px;\n`;\n\nconst ButtonCancel = styled(Button)`\n  width: 234px;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 32px;\n  right: 32px;\n\n  flex-shrink: 0;\n  width: 36px;\n  height: 36px;\n  margin: -10px -12px -10px 0;\n\n  color: #a3a5ba;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n\n  transition: color 0.15s;\n\n  appearance: none;\n\n  &:hover {\n    color: #000;\n  }\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 14px;\n  height: 14px;\n`;\n\ntype Props = {\n  close: (isHide?: boolean) => void;\n};\n\nexport const ProceedUsernameModal: FC<Props> = ({ close }) => {\n  const { updateSettings } = useSettings();\n\n  const handleCloseButtonClick = () => {\n    updateSettings({ usernameBannerHiddenByUser: true });\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <Header>Proceed without a username?</Header>\n      <Description>\n        Anytime you want, you can easily reserve a username by going to the settings in the Android\n        or iOS app.\n      </Description>\n      <Buttons>\n        <ButtonCancel primary onClick={handleCloseButtonClick}>\n          Proceed &amp; don’t show again\n        </ButtonCancel>\n      </Buttons>\n      <CloseButton type=\"button\" onClick={handleCloseClick}>\n        <CloseIcon name=\"close\" />\n      </CloseButton>\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\n\nconst Wrapper = styled.div`\n  padding: 12px;\n\n  border: 0.5px solid transparent;\n  border-radius: 12px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n    border-color: ${theme.colors.textIcon.links};\n  }\n`;\n\nconst ItemWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 44px;\n`;\n\nconst Info = styled.div`\n  flex: 1;\n  margin-left: 12px;\n`;\n\nconst Top = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 140%;\n  letter-spacing: 0.02em;\n`;\n\nconst Bottom = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\ntype Props = {\n  tokenAccount: TokenAccount;\n  onClick?: (tokenAccount: TokenAccount) => void;\n  className?: string;\n};\n\nexport const TokenAccountRow: FunctionComponent<Props> = ({ tokenAccount, onClick, className }) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(tokenAccount);\n    }\n  };\n\n  const { loading } = tokenAccount;\n\n  return (\n    <Wrapper onClick={handleClick} className={className}>\n      <ItemWrapper>\n        {loading ? (\n          <Skeleton width={44} height={44} borderRadius={12} />\n        ) : (\n          <TokenAvatar size={44} token={tokenAccount.balance?.token} />\n        )}\n        <Info>\n          <Top>\n            {loading ? (\n              <Skeleton width={100} height={16} />\n            ) : (\n              <>{tokenAccount.balance?.formatUnits()}</>\n            )}\n          </Top>\n          <Bottom>\n            {loading ? (\n              <Skeleton width={50} height={16} />\n            ) : tokenAccount.balance ? (\n              <AmountUSD value={tokenAccount.balance} />\n            ) : (\n              <div />\n            )}\n          </Bottom>\n        </Info>\n      </ItemWrapper>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { shadows, theme } from '@p2p-wallet-web/ui';\nimport type { Token } from '@saberhq/token-utils';\nimport classNames from 'classnames';\n\nimport { useMarketsData } from 'app/contexts';\nimport { Empty } from 'components/common/Empty';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { Icon } from 'components/ui';\nimport { SearchInput } from 'new/ui/components/ui/SearchInput';\nimport { matchesFilter, sortByRules } from 'utils/tokens';\n\nimport { TokenAccountRow } from './TokenAccountRow';\n\nconst Wrapper = styled.div`\n  position: relative;\n`;\n\nconst MainWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n  cursor: pointer;\n\n  &.isOpen {\n    border-color: ${theme.colors.textIcon.active};\n  }\n`;\n\nconst SelectedWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst InfoWrapper = styled.div`\n  display: grid;\n  grid-gap: 8px;\n\n  margin-left: 12px;\n`;\n\nconst Line = styled.div`\n  line-height: 17px;\n`;\n\nconst Text = styled.div`\n  display: inline-block;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n\n  &.gray {\n    color: ${theme.colors.textIcon.secondary};\n  }\n`;\n\nconst ChevronIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  &.isOpen {\n    color: ${theme.colors.textIcon.active};\n\n    transform: rotate(180deg);\n  }\n`;\n\nconst DropDownListContainer = styled.div`\n  position: absolute;\n  top: 100%;\n  right: 0;\n  left: 0;\n  z-index: 1;\n\n  padding: 8px;\n  overflow: hidden;\n\n  background: ${theme.colors.bg.primary};\n  border-radius: 8px;\n  ${shadows.notification};\n`;\n\nconst DropDownHeader = styled.div`\n  padding-bottom: 8px;\n\n  backdrop-filter: blur(15px);\n`;\n\nconst DropDownList = styled.div`\n  display: grid;\n  grid-gap: 8px;\n  max-height: 400px;\n  overflow-y: auto;\n\n  &.isShortList {\n    max-height: 200px;\n  }\n`;\n\ninterface Props {\n  tokenAccounts: readonly TokenAccount[];\n  onTokenAccountChange: (token: Token, tokenAccount: TokenAccount | null) => void;\n  isShortList?: boolean;\n}\n\nexport const FeePaySelector: FC<Props> = ({ tokenAccounts, onTokenAccountChange, isShortList }) => {\n  const selectorRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [filter, setFilter] = useState('');\n\n  const symbols = useMemo(() => {\n    return tokenAccounts.map((tokenAccount) => tokenAccount.balance?.token.symbol);\n  }, [tokenAccounts]);\n  const markets = useMarketsData(symbols);\n\n  const handleAwayClick = (e: MouseEvent) => {\n    if (\n      !selectorRef.current?.contains(e.target as HTMLDivElement) &&\n      !dropdownRef.current?.contains(e.target as HTMLDivElement)\n    ) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', handleAwayClick, true);\n\n    return () => {\n      window.removeEventListener('click', handleAwayClick, true);\n    };\n  }, []);\n\n  const handleFilterChange = (value: string) => {\n    const nextFilter = value.trim();\n\n    setFilter(nextFilter);\n  };\n\n  const filteredTokenAccounts = useMemo(() => {\n    if (!tokenAccounts) {\n      return [];\n    }\n\n    const filteredWithBalance = tokenAccounts.filter((account) => account.balance?.greaterThan(0));\n\n    return filteredWithBalance\n      .filter(\n        (account) =>\n          account.balance &&\n          (matchesFilter(account.balance.token.symbol, filter) ||\n            matchesFilter(account.balance.token.name, filter)),\n      )\n      .sort(sortByRules(markets));\n  }, [tokenAccounts, filter, markets]);\n\n  const handleTokenAccountClick = (nextTokenAccount: TokenAccount) => {\n    if (!nextTokenAccount.balance) {\n      return;\n    }\n\n    setIsOpen(false);\n    onTokenAccountChange(nextTokenAccount.balance?.token, nextTokenAccount);\n  };\n\n  return (\n    <Wrapper>\n      <MainWrapper\n        ref={selectorRef}\n        onClick={() => setIsOpen((state) => !state)}\n        className={classNames({ isOpen })}\n      >\n        <SelectedWrapper>\n          <div>\n            <TokenAvatar symbol=\"SOL\" size={44} />\n          </div>\n          <InfoWrapper>\n            <Line>\n              <Text className=\"gray\">USDC account creation:</Text> <Text>~$0.50</Text>\n            </Line>\n            <Line>\n              <Text className=\"gray\">Pay with:</Text> <Text>0.509 USDC</Text>\n            </Line>\n          </InfoWrapper>\n        </SelectedWrapper>\n        <ChevronIcon name=\"chevron\" className={classNames({ isOpen })} />\n      </MainWrapper>\n      {isOpen ? (\n        <DropDownListContainer ref={dropdownRef}>\n          <DropDownHeader>\n            <SearchInput\n              placeholder=\"Search for token\"\n              value={filter}\n              onChange={handleFilterChange}\n            />\n          </DropDownHeader>\n          <DropDownList ref={listRef} className={classNames({ isShortList })}>\n            {filteredTokenAccounts?.length ? (\n              <>\n                {filteredTokenAccounts.map(\n                  (account) =>\n                    account.key && (\n                      <TokenAccountRow\n                        key={account.key.toBase58()}\n                        tokenAccount={account}\n                        onClick={handleTokenAccountClick}\n                      />\n                    ),\n                )}\n              </>\n            ) : undefined}\n            {!filteredTokenAccounts?.length ? <Empty type=\"search\" /> : undefined}\n          </DropDownList>\n        </DropDownListContainer>\n      ) : undefined}\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\n\nimport { Modal } from 'components/ui/Modal';\n\nexport const WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nexport const Section = styled.div`\n  display: grid;\n  grid-gap: 24px;\n  padding: 16px 0 24px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-gap: 16px;\n  margin: 0;\n  padding-left: 32px;\n`;\n\nexport const Row = styled.li``;\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { useSolana, useUserTokenAccounts } from '@p2p-wallet-web/core';\nimport { Bitcoin } from '@renproject/chains-bitcoin';\nimport { Solana } from '@renproject/chains-solana';\nimport type { Token } from '@saberhq/token-utils';\nimport { Feature } from 'flagged';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { FeePaySelector } from 'components/common/FeePaySelector';\nimport { HMSCountdown } from 'components/common/HMSCountdown';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Button } from 'components/ui';\nimport { FEATURE_PAY_BY } from 'config/featureFlags';\nimport { getRemainingGatewayTime } from 'utils/hooks/renBridge/useLockAndMint';\nimport { useRenNetwork } from 'utils/hooks/renBridge/useNetwork';\nimport { useLockAndMintProvider } from 'utils/providers/LockAndMintProvider';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const Create: FC<Props> = ({ close }) => {\n  const solanaProvider = useSolana();\n  const network = useRenNetwork();\n  const tokenAccounts = useUserTokenAccounts();\n  const { expiryTime } = useLockAndMintProvider();\n\n  // TODO: use for progress bar in Modal. Add this feature to modal\n  const [creating, setCreating] = useState(false);\n\n  const handleFeeTokenAccountChange = (\n    _nextToken: Token,\n    nextTokenAccount: TokenAccount | null,\n  ) => {\n    if (!nextTokenAccount?.key) {\n      return;\n    }\n  };\n\n  const handleCreateAccountClick = async () => {\n    try {\n      setCreating(true);\n      await new Solana(solanaProvider, network).createAssociatedTokenAccount(Bitcoin.asset);\n      close(true);\n    } catch (error) {\n      ToastManager.error((error as Error).message);\n      console.error(error);\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleCreateAccountClick}>\n            Pay 0.002928 SOL & Continue\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>. You can choose which currency to pay in\n            below.\n          </Row>\n        </List>\n\n        <Feature name={FEATURE_PAY_BY}>\n          <FeePaySelector\n            tokenAccounts={tokenAccounts}\n            onTokenAccountChange={handleFeeTokenAccountChange}\n            isShortList\n          />\n        </Feature>\n\n        <List>\n          <Row>\n            This address accepts <strong>only Bitcoin</strong>. You may lose assets by sending\n            another coin.\n          </Row>\n          <Row>\n            Minimum transaction amount of <strong>0.000112 BTC</strong>.\n          </Row>\n          <Row>\n            <strong>\n              <HMSCountdown milliseconds={getRemainingGatewayTime(expiryTime)} />\n            </strong>\n            &nbsp; is the remaining time to safely send the assets\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory } from 'react-router';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { Button } from 'components/ui';\nimport { trackEvent } from 'utils/analytics';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const TopUp: FC<Props> = ({ close }) => {\n  const history = useHistory();\n\n  const handleTopUpClick = () => {\n    trackEvent('Receive_Topping_Up');\n\n    close(false);\n    history.push('/buy');\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleTopUpClick}>\n            Top up your account\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            A <strong>renBTC account is required</strong> to receive bitcoins over the Bitcoin\n            network.\n          </Row>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>.\n          </Row>\n          <Row>\n            You <strong>don't have funds</strong> to pay for account creation, but if someone sends\n            renBTC to your address, it will be created for you.\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport type { u64 } from '@solana/spl-token';\n\nimport type { ModalPropsType } from 'app/contexts';\n\nimport { Create } from './Create';\nimport { TopUp } from './TopUp';\n\ninterface Props {\n  accountRentExemption: u64;\n  nativeBalance: TokenAmount;\n}\n\nexport const ReceiveBitcoinModal: FC<ModalPropsType<boolean, Props>> = (props) => {\n  const nativeLamports = props.nativeBalance?.toU64().toNumber() ?? 0;\n  const lamportsRentExcemption = props.accountRentExemption.toNumber();\n  const isEnoughSol = nativeLamports > lamportsRentExcemption;\n\n  if (isEnoughSol) {\n    return <Create close={props.close} />;\n  }\n\n  return <TopUp close={props.close} />;\n};\n","import type { FC, ReactElement } from 'react';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { Modal } from 'components/ui/Modal';\n\ntype Props = {\n  items: ReactElement[];\n  title?: string;\n};\n\nexport const SelectListMobileModal: FC<ModalPropsType & Props> = ({ items, close, title }) => {\n  return (\n    <Modal noDelimiter={false} close={close} title={title}>\n      {items}\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { UseSendState } from 'app/contexts';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { ListWrapper, Row, Text } from 'components/ui/AccordionDetails/common';\n\nexport interface TransactionDetailsProps {\n  sendState?: UseSendState;\n  btcAddress?: string;\n  isOpen?: boolean;\n  amount?: TokenAmount;\n}\n\nconst TokenAndUsd = styled.div`\n  display: flex;\n`;\n\nconst AmountUSDStyled = styled(AmountUSD)`\n  margin-left: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const TransactionDetails: FC<TransactionDetailsProps> = ({ sendState, amount }) => {\n  /*const {\n    settings: { useFreeTransactions },\n  } = useSettings();*/\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Transaction details\"\n          titleBottomName=\"Total\"\n          titleBottomValue={sendState?.details.totalAmount || ''}\n        />\n      }\n      open={false}\n      noContentPadding\n    >\n      <ListWrapper>\n        <Row>\n          <Text className=\"gray\">Receive</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.receiveAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n        {/*<Row>\n          <Text className=\"gray\">Transaction fee</Text>\n          {useFreeTransactions ? (\n            <Text>\n              Free{' '}\n              <Text className=\"green inline-flex\">\n                (Paid by P2P.org) <FeeTransactionTooltip userFreeFeeLimits={userFreeFeeLimits} />\n              </Text>\n            </Text>\n          ) : (\n            <Text>1</Text>\n          )}\n          <Text>5000 lamport</Text>\n        </Row>*/}\n        {/*sendState?.details.accountCreationAmount ? (\n          <Row>\n            <Text className=\"gray\">{sendState.destinationAccount?.symbol} account creation</Text>\n            <TokenAndUsd>\n              <Text>{sendState.details.accountCreationAmount}</Text>\n              <AmountUSD\n                prefix=\"(~\"\n                postfix=\")\"\n                amount={networkFees?.accountRentExemption}\n                tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n              />\n            </TokenAndUsd>\n          </Row>\n        ) : undefined*/}\n      </ListWrapper>\n      <ListWrapper className=\"total\">\n        <Row>\n          <Text>Total</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.totalAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n      </ListWrapper>\n    </Accordion>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  To,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props & TransactionDetailsProps> = ({ params, sendState, btcAddress }) => {\n  const address = params.destination?.toBase58?.() || btcAddress;\n  const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>\n                <To>To</To>\n                {isFullName ? params.username : `${params.username}.p2p.sol`}\n              </Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>{address && <AddressText address={address} medium />}</InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <TransactionDetails sendState={sendState} amount={params.amount} />\n    </Section>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/solana/swap';\nimport { formatBigNumber } from 'app/contexts/solana/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { AmountUSD } from 'components/pages/swap/SwapWidget/AmountUSD';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { FeesOriginal } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  FromToWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Overlay,\n  Section,\n  Subtitle,\n  Wrapper,\n} from '../common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  outputTokenName: string;\n  inputAmount: u64;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n  showTitle: boolean;\n}\n\nexport const Swap: FC<Props & FeesOriginalProps> = ({\n  params: { inputTokenName, outputTokenName, inputAmount },\n  swapInfo,\n  showTitle,\n}) => {\n  const { tokenConfigs } = useConfig();\n  const inputDecimals = tokenConfigs[inputTokenName]?.decimals || 0;\n  const outputDecimals = tokenConfigs[outputTokenName]?.decimals || 0;\n  const minReceiveAmount = formatBigNumber(swapInfo.trade.getMinimumOutputAmount(), outputDecimals);\n  const outputAmount = formatBigNumber(swapInfo.trade.getOutputAmount(), outputDecimals);\n\n  return (\n    <Wrapper>\n      {showTitle && <Subtitle>You are going to swap</Subtitle>}\n      <Section className=\"swap\">\n        <FieldInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {formatBigNumber(inputAmount, inputDecimals)} {inputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              <AmountUSD prefix={'~'} amount={inputAmount} tokenName={inputTokenName} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <FromToWrapper>\n          <Overlay>\n            <Icon name={'arrow-down'} />\n          </Overlay>\n        </FromToWrapper>\n      </Section>\n      <Section className=\"top\">\n        <FieldInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {outputAmount} {outputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              Receive at least: {minReceiveAmount} {outputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <FeesOriginal swapInfo={swapInfo} open={false} forPage={false} />\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 27px;\n\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 40%;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 5px;\n  left: -2px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 19px;\n\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { ModalPropsType } from 'app/contexts/general/modals/types';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\nimport type { SwapParams } from './Swap';\nimport { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ntype ModalParams = {\n  type: 'send' | 'swap';\n  params: TransferParams | SwapParams;\n};\n\nexport type TransactionConfirmModalProps = TransactionDetailsProps &\n  ModalParams &\n  FeesOriginalProps;\n\nexport const TransactionConfirmModal: FunctionComponent<\n  ModalPropsType & TransactionConfirmModalProps\n> = ({ type, params, close, btcAddress, swapInfo, sendState }) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    if (type === 'send') {\n      trackEvent('Send_Reviewing');\n    }\n  }, []);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    if (type === 'send') {\n      trackEvent('Send_Verification_Invoked');\n    }\n\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled = isSecretKeyWallet && (!password || hasError);\n\n  const renderTitle = () => {\n    switch (type) {\n      case 'send':\n        return (\n          <ModalTitle>\n            Confirm sending {(params as TransferParams).source.balance?.token.symbol}\n          </ModalTitle>\n        );\n      default:\n        return (\n          <ModalTitle>\n            Confirm swapping {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </ModalTitle>\n        );\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = (\n          <>\n            <SendIcon name=\"swap\" />\n            Swap {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </>\n        );\n        break;\n      case 'send':\n      default:\n        action = (\n          <>\n            <SendIcon name=\"top\" />\n            Send {(params as TransferParams).amount.formatUnits()}\n          </>\n        );\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <ButtonCancel onClick={handleCloseClick} />\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title={renderTitle()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n      noDelimiter={false}\n    >\n      {type === 'send' ? <ActionTitle>You are going to send</ActionTitle> : undefined}\n      {type === 'send' ? (\n        <Send params={params as TransferParams} sendState={sendState} btcAddress={btcAddress} />\n      ) : undefined}\n      {type === 'swap' ? (\n        <Swap params={params as SwapParams} swapInfo={swapInfo} showTitle={true} />\n      ) : undefined}\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled\n            value={password}\n            onChange={handlePasswordChange}\n            isError={hasError}\n          />\n          {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport {\n  SwapTransaction,\n  titleCase,\n  TransferTransaction,\n  useTokenAccount,\n  useTokenAccountAmount,\n  useTransaction,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { usePubkey } from '@p2p-wallet-web/sail';\nimport type { TransactionSignature } from '@solana/web3.js';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { trackEvent } from 'utils/analytics';\nimport { getExplorerUrl } from 'utils/connection';\nimport { formatNumber } from 'utils/format';\nimport { shortAddress } from 'utils/tokens';\n\nimport {\n  ButtonExplorer,\n  CloseIcon,\n  CloseWrapper,\n  Content,\n  Desc,\n  FieldsWrapper,\n  FieldTitle,\n  FieldValue,\n  FieldWrapper,\n  Footer,\n  Header,\n  ProgressWrapper,\n  SendWrapper,\n  ShareIcon,\n  ShareWrapper,\n  SwapAmount,\n  SwapBlock,\n  SwapColumn,\n  SwapIcon,\n  SwapInfo,\n  SwapWrapper,\n  Title,\n  ValueCurrency,\n  ValueOriginal,\n  WrapperModal,\n} from '../common/styled';\n\nconst StatusWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 24px;\n`;\n\nconst Status = styled.div`\n  display: flex;\n  align-items: center;\n  height: 32px;\n  padding: 2px 10px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 20px;\n\n  background: rgba(246, 246, 248, 0.5);\n  border-radius: 6px;\n`;\n\nconst StatusIndicator = styled.div`\n  width: 8px;\n  height: 8px;\n  margin-right: 6px;\n\n  background: #77db7c;\n  border-radius: 2px;\n\n  &.error {\n    background: #f43d3d;\n  }\n\n  &.processing {\n    background: #ffa631;\n  }\n`;\n\nconst FieldRowWrapper = styled(FieldWrapper)`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 36px;\n`;\n\nconst ColumnWrapper = styled.div``;\n\nconst FieldInfo = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nconst AddressTitle = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst AddressValue = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n`;\n\nconst FieldTitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PaidByBadge = styled.div`\n  padding: 1px 8px;\n\n  color: #5887ff;\n  font-weight: 600;\n  font-size: 12px;\n\n  background: #eff3ff;\n  border-radius: 4px;\n`;\n\nconst PaddedHeader = styled(Header)`\n  padding: 24px;\n`;\n\ntype Props = {\n  signature: TransactionSignature;\n  source: string;\n  close: () => void;\n};\n\nexport const TransactionDetailsModal: FC<Props> = ({ signature, source: sourceAddress, close }) => {\n  const [isShowDetails, setShowDetails] = useState(false);\n  const { network } = useWallet();\n  const transaction = useTransaction(signature, sourceAddress);\n\n  const sourceTokenAccount = useTokenAccount(usePubkey(transaction?.data?.source));\n  const destinationTokenAccount = useTokenAccount(usePubkey(transaction?.data?.destination));\n\n  const tokenAmount = useTokenAccountAmount(\n    usePubkey(transaction?.details.tokenAccount),\n    transaction?.details.amount,\n  );\n\n  useEffect(() => {\n    const type = transaction?.details.type;\n\n    if (type === 'send') {\n      trackEvent('Send_Process_Shown');\n    } else if (type === 'swap') {\n      trackEvent('Swap_Process_Shown');\n    }\n  }, [transaction?.details.type]);\n\n  // useEffect(() => {\n  //   const mount = async () => {\n  //     const trx = unwrapResult(await dispatch(getTransaction(signature)));\n  //\n  //     if (!trx) {\n  //       setTimeout(mount, 3000);\n  //     }\n  //   };\n  //\n  //   if (!transaction) {\n  //     void mount();\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [signature]);\n\n  if (transaction?.loading) {\n    return null;\n  }\n\n  const handleToggleShowDetailsClick = () => {\n    setShowDetails((state) => !state);\n  };\n\n  const renderFromTo = () => {\n    const type = transaction?.details.type;\n\n    const source = transaction?.data?.source;\n    const destination = transaction?.data?.destination;\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <>\n          {source ? (\n            <FieldWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldValue>{source}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n          {destination ? (\n            <FieldWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldValue>{destination}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n        </>\n      );\n    }\n\n    if (type && ((source && sourceToken) || (destination && destinationToken))) {\n      return (\n        <FieldRowWrapper>\n          {source && sourceToken ? (\n            <ColumnWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar symbol={sourceToken.symbol} address={sourceToken.address} size={48} />\n                <AddressWrapper>\n                  <AddressTitle>{sourceToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(source)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n          {destination && destinationToken ? (\n            <ColumnWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar\n                  symbol={destinationToken.symbol}\n                  address={destinationToken.address}\n                  size={48}\n                />\n                <AddressWrapper>\n                  <AddressTitle>{destinationToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(destination)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n        </FieldRowWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const renderAmountBlock = () => {\n    const type = transaction?.details.type;\n\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <SwapWrapper>\n          <SwapColumn>\n            <SwapInfo>\n              {sourceTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={sourceToken?.symbol}\n                  address={sourceToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={50} height={16} />\n                ) : (\n                  <>- {sourceTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n          <SwapBlock>\n            <SwapIcon name=\"swap\" />\n          </SwapBlock>\n          <SwapColumn>\n            <SwapInfo>\n              {destinationTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={destinationToken?.symbol}\n                  address={destinationToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={80} height={16} />\n                ) : (\n                  <>+ {destinationTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n        </SwapWrapper>\n      );\n    }\n\n    if (transaction?.loading || sourceTokenAccount?.loading || tokenAmount.loading) {\n      return (\n        <SendWrapper>\n          <Skeleton width={70} height={53} />\n        </SendWrapper>\n      );\n    }\n\n    if (tokenAmount.balance) {\n      return (\n        <SendWrapper>\n          <ValueCurrency>\n            {transaction?.details.isReceiver ? '+' : '-'} {tokenAmount.balance.formatUnits()}\n          </ValueCurrency>\n          <ValueOriginal>\n            <AmountUSD\n              prefix={transaction?.details.isReceiver ? '+ ' : '- '}\n              value={tokenAmount.balance}\n            />\n          </ValueOriginal>\n        </SendWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const date = transaction?.raw?.blockTime\n    ? dayjs.unix(transaction.raw.blockTime).format('LLL')\n    : `${transaction?.raw?.slot} SLOT`;\n\n  const isShowFeeBadge =\n    transaction?.data instanceof TransferTransaction && transaction.data.wasPaidByP2POrg;\n\n  return (\n    <WrapperModal close={close}>\n      <PaddedHeader>\n        <Title>{titleCase(transaction?.details.type)}</Title>\n        <Desc title={`${transaction?.raw?.slot} SLOT`}>{date}</Desc>\n        <CloseWrapper onClick={close}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n      </PaddedHeader>\n      <ProgressWrapper />\n      <Content>\n        {/* {details.typeOriginal === 'transfer' ? ( */}\n        {/*  <SendWrapper> */}\n        {/*    <ValueCurrency> */}\n        {/*      {details.isReceiver ? '+' : '-'} {details.sourceAmount.toNumber()}{' '} */}\n        {/*      {details.sourceToken?.symbol} */}\n        {/*    </ValueCurrency> */}\n        {/*    <ValueOriginal> */}\n        {/*      <AmountUSD */}\n        {/*        prefix={details.isReceiver ? '+' : '-'} */}\n        {/*        symbol={details.sourceToken?.symbol} */}\n        {/*        value={details.sourceAmount} */}\n        {/*      /> */}\n        {/*    </ValueOriginal> */}\n        {/*  </SendWrapper> */}\n        {/* ) : undefined} */}\n\n        {renderAmountBlock()}\n        <StatusWrapper>\n          <Status>\n            <StatusIndicator\n              className={classNames({\n                error: !!transaction?.raw?.meta?.err,\n                // processing: !transaction?.raw?.slot,\n              })}\n            />{' '}\n            {transaction?.raw?.meta?.err\n              ? 'Failed'\n              : !transaction?.raw?.slot\n              ? 'Pending'\n              : 'Completed'}\n          </Status>\n        </StatusWrapper>\n        <FieldsWrapper>\n          {isShowDetails ? (\n            <>\n              {renderFromTo()}\n              {(sourceTokenAccount?.balance && destinationTokenAccount?.balance) ||\n              tokenAmount?.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Amount</FieldTitle>\n                  <FieldValue>\n                    {transaction?.data instanceof SwapTransaction ? (\n                      <>\n                        {sourceTokenAccount?.balance?.formatUnits()} to{' '}\n                        {destinationTokenAccount?.balance?.formatUnits()}\n                      </>\n                    ) : (\n                      <>{tokenAmount?.balance?.formatUnits()}</>\n                    )}\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {tokenAmount.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Value</FieldTitle>\n                  <FieldValue>\n                    <AmountUSD value={tokenAmount.balance} />\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {transaction?.raw?.meta ? (\n                <FieldWrapper>\n                  <FieldTitleWrapper>\n                    <FieldTitle>Transaction fee</FieldTitle>\n                    {isShowFeeBadge ? <PaidByBadge>Paid by p2p.org</PaidByBadge> : undefined}\n                  </FieldTitleWrapper>\n                  <FieldValue>{formatNumber(transaction.raw.meta?.fee)} lamports</FieldValue>\n                </FieldWrapper>\n              ) : null}\n              <FieldWrapper>\n                <FieldTitle>Block number</FieldTitle>\n                <FieldValue>#{transaction?.raw?.slot}</FieldValue>\n              </FieldWrapper>\n            </>\n          ) : undefined}\n          <FieldWrapper>\n            <FieldTitle>Transaction ID</FieldTitle>\n            <FieldValue>\n              {signature}{' '}\n              <a\n                href={getExplorerUrl('tx', signature, network)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer noindex\"\n                className=\"button\"\n              >\n                <ShareWrapper>\n                  <ShareIcon name=\"external\" />\n                </ShareWrapper>\n              </a>\n            </FieldValue>\n          </FieldWrapper>\n        </FieldsWrapper>\n      </Content>\n      <Footer className={classNames({ isCentered: true })}>\n        <ButtonExplorer lightGray onClick={handleToggleShowDetailsClick}>\n          {isShowDetails ? 'Hide transaction details' : 'Show transaction details'}\n        </ButtonExplorer>\n      </Footer>\n    </WrapperModal>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useTransaction, useWallet } from '@p2p-wallet-web/core';\nimport { useConnectionContext } from '@saberhq/use-solana';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ToastManager } from 'components/common/ToastManager';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { trackEvent } from 'utils/analytics';\nimport { transferNotification } from 'utils/transactionNotifications';\n\nimport { Send } from '../../TransactionConfirmModal/Send/Send';\nimport { DateHeader, SolanaExplorerLink, TransactionProgress } from '../common';\nimport { CloseIcon, CloseWrapper, Header, Section, WrapperModal } from '../common/styled';\nimport type { TransferParams } from './Send';\n\nexport type TransactionStatusModalProps = TransactionDetailsProps & {\n  action: () => Promise<string>;\n  params: TransferParams;\n};\n\nexport const INITIAL_PROGRESS = 5;\nconst ADDRESS_CHARS_SHOW = 4;\nconst DEFAULT_TRANSACTION_ERROR = 'Transaction error';\nconst CHECK_TRANSACTION_INTERVAL = 3000;\n\nexport const TransactionStatusSendModal: FunctionComponent<\n  ModalPropsType<string | null> & TransactionStatusModalProps\n> = ({ type, action, params, sendState, close }) => {\n  const { provider } = useWallet();\n\n  const { network } = useConnectionContext();\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [signature, setSignature] = useState<string | null>(null);\n  const transaction = useTransaction(signature as string);\n  const [transactionError, setTransactionError] = useState(\n    transaction?.raw?.meta?.err ? DEFAULT_TRANSACTION_ERROR : '',\n  );\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      switch (type) {\n        case 'send': {\n          const resultSignature = await action();\n          setSignature(resultSignature);\n\n          transferNotification({\n            header: 'Sent',\n            text: `- ${params.amount.formatUnits()}`,\n            symbol: params.amount.token.symbol,\n          });\n\n          break;\n        }\n        default:\n          throw new Error('Wrong type');\n      }\n    } catch (error) {\n      // setTransactionError((error as Error).message);\n      setIsExecuting(false);\n\n      if (type === 'send') {\n        ToastManager.error(type, (error as Error).message);\n        setTransactionError(DEFAULT_TRANSACTION_ERROR);\n      }\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = await provider.connection.getTransaction(signature, {\n          commitment: 'confirmed',\n        });\n        if (trx) {\n          if (trx.meta?.err) {\n            setTransactionError(DEFAULT_TRANSACTION_ERROR);\n          } else if (transactionError) {\n            setTransactionError('');\n          }\n        } else {\n          setTimeout(mount, CHECK_TRANSACTION_INTERVAL);\n        }\n      } catch (error) {\n        // setTransactionError((error as Error).message);\n        ToastManager.error((error as Error).message);\n      } finally {\n        setIsExecuting(false);\n      }\n    };\n\n    void mount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signature]);\n\n  const isProcessing = (!signature || !transaction?.key) && !transactionError;\n  const isSuccess = Boolean(signature && transaction?.key && !transactionError);\n  const isError = Boolean(transactionError);\n\n  const shortAddress = sendState?.destinationAddress.replace(\n    sendState?.destinationAddress.substring(\n      ADDRESS_CHARS_SHOW,\n      sendState?.destinationAddress.length - ADDRESS_CHARS_SHOW,\n    ),\n    '...',\n  );\n\n  const handleCloseClick = () => {\n    trackEvent('send_close_click', { transactionConfirmed: !isExecuting });\n\n    close(signature);\n  };\n\n  return (\n    <WrapperModal close={handleCloseClick}>\n      <Section>\n        <Header>\n          {params.amount.token.symbol} → {shortAddress}\n          <CloseWrapper onClick={handleCloseClick}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n          <DateHeader />\n        </Header>\n      </Section>\n      <TransactionProgress\n        isError={isError}\n        isProcessing={isProcessing}\n        isSuccess={isSuccess}\n        isExecuting={isExecuting}\n        label={'Transaction status:'}\n      />\n      <Section>\n        <Send sendState={sendState} params={params} />\n      </Section>\n      <SolanaExplorerLink\n        signature={signature}\n        network={network}\n        amplitudeAction={{\n          name: 'send_explorer_click',\n          data: { transactionConfirmed: !isExecuting },\n        }}\n      />\n    </WrapperModal>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useConnectionContext, useTransaction, useWallet } from '@p2p-wallet-web/core';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Swap } from 'components/modals/TransactionConfirmModal/Swap';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { DateHeader, SolanaExplorerLink, TransactionProgress } from '../common';\nimport { CloseIcon, CloseWrapper, Header, Section, WrapperModal } from '../common/styled';\nimport type { SwapParams } from '../TransactionStatusSendModal/Swap';\n\nconst DEFAULT_TRANSACTION_ERROR = 'Transaction error';\n\ntype SwapActionType = () => Promise<string>;\n\ntype ModalProps = {\n  action: SwapActionType;\n  params: SwapParams;\n};\n\nexport type TransactionStatusModalProps = FeesOriginalProps & ModalProps;\n\nconst CHECK_TRANSACTION_INTERVAL = 3000;\n\nexport const TransactionStatusModal: FunctionComponent<\n  ModalPropsType<string | null> & TransactionStatusModalProps\n> = ({ action, close, swapInfo, params }) => {\n  const { provider } = useWallet();\n\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [signature, setSignature] = useState<string>('');\n  const transaction = useTransaction(signature);\n  const [transactionError, setTransactionError] = useState(\n    transaction?.raw?.meta?.err ? DEFAULT_TRANSACTION_ERROR : '',\n  );\n  const { network } = useConnectionContext();\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      const resultSignature = await action();\n      setSignature(resultSignature);\n    } catch (error) {\n      setIsExecuting(false);\n      setTransactionError(DEFAULT_TRANSACTION_ERROR);\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = await provider.connection.getTransaction(signature, {\n          commitment: 'confirmed',\n        });\n        if (trx) {\n          if (trx?.meta?.err) {\n            setTransactionError(DEFAULT_TRANSACTION_ERROR);\n          } else if (transactionError) {\n            setTransactionError('');\n          }\n        } else {\n          setTimeout(mount, CHECK_TRANSACTION_INTERVAL);\n        }\n      } catch (error) {\n        setTransactionError((error as Error).message);\n        ToastManager.error((error as Error).message);\n      } finally {\n        setIsExecuting(false);\n      }\n    };\n\n    void mount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signature]);\n\n  const handleCloseClick = () => {\n    trackEvent('swap_close_click', { transactionConfirmed: !isExecuting });\n\n    close(signature);\n  };\n  const isError = Boolean(transactionError);\n  const isProcessing = (!signature || !transaction?.key) && !isError;\n  const isSuccess = Boolean(signature && transaction?.key && !isError);\n\n  return (\n    <WrapperModal close={handleCloseClick} noDelimiter>\n      <Section>\n        <Header>\n          {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          <CloseWrapper onClick={handleCloseClick}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n          <DateHeader />\n        </Header>\n      </Section>\n      <TransactionProgress\n        isError={isError}\n        isProcessing={isProcessing}\n        isSuccess={isSuccess}\n        isExecuting={isExecuting}\n        label={'Swap status:'}\n      />\n      <Section>\n        <Swap params={params} swapInfo={swapInfo} forPage={false} showTitle={false} />\n      </Section>\n      <SolanaExplorerLink\n        signature={signature}\n        network={network}\n        amplitudeAction={{\n          name: 'swap_explorer_click',\n          data: { transactionConfirmed: !isExecuting },\n        }}\n      />\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport dayjs from 'dayjs';\n\nexport const Time = styled.div`\n  color: ${theme.colors.textIcon.primary};\n`;\n\nexport const DateHeaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n\n  & > *:not(:first-child) {\n    margin-left: 4px;\n  }\n`;\nexport const DateHeader: FC = () => {\n  const today = new Date();\n  const utcDiff = today.getHours() - today.getUTCHours();\n\n  return (\n    <DateHeaderWrapper>\n      <span>{dayjs().format('MMMM D, YYYY')}</span>\n      <Time>{dayjs().format('hh:mm:ss')}</Time>\n      <span>\n        (UTC{utcDiff >= 0 ? '+' : '-'}\n        {utcDiff})\n      </span>\n    </DateHeaderWrapper>\n  );\n};\n\nexport default DateHeader;\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { Network } from '@saberhq/solana-contrib';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\nimport { trackEventUniversal } from 'utils/analytics';\nimport type { AmplitudeActions } from 'utils/analytics/types';\nimport { getExplorerUrl } from 'utils/connection';\n\nimport { Footer } from '../styled';\n\ninterface IProps {\n  signature: string | null;\n  network: Network;\n  amplitudeAction: AmplitudeActions;\n}\n\nconst GoToExplorerIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\nconst GoToExplorerLink = styled.a`\n  display: inline-flex;\n  align-items: center;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  text-decoration: none;\n\n  &.isDisabled {\n    pointer-events: none;\n  }\n`;\n\nexport const SolanaExplorerLink: FC<IProps> = (props) => {\n  return (\n    <Footer>\n      <GoToExplorerLink\n        href={props.signature ? getExplorerUrl('tx', props.signature, props.network) : ''}\n        target=\"_blank\"\n        rel=\"noopener noreferrer noindex\"\n        onClick={() => {\n          trackEventUniversal(props.amplitudeAction);\n        }}\n        className={classNames({\n          isDisabled: !props.signature,\n        })}\n      >\n        <GoToExplorerIcon name={'external'} />\n        View in Solana explorer\n      </GoToExplorerLink>\n    </Footer>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme, zIndexes } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\nimport { INITIAL_PROGRESS } from '../../TransactionStatusSendModal';\nimport { StatusColors, TransactionLabel } from '../styled';\n\nexport const ProgressIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionStatus = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-top: 13px;\n  margin-left: 38px;\n\n  color: ${theme.colors.textIcon.primary};\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const TransactionBadge = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-left: 4px;\n  padding: 5px 12px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 12px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 4px;\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const ProgressLine = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.middle};\n\n  width: ${INITIAL_PROGRESS}%;\n  height: 2px;\n\n  background: ${theme.colors.bg.buttonPrimary};\n\n  transition: width 0.15s;\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const ProgressStub = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.bottom};\n\n  width: 100%;\n  height: 1px;\n\n  background: ${theme.colors.stroke.secondary};\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nexport interface Props {\n  isError: boolean;\n  isProcessing: boolean;\n  isSuccess: boolean;\n  isExecuting: boolean;\n  label: string;\n}\n\nconst UPPER_PROGRESS_BOUND = 95;\nconst LOWER_PROGRESS_BOUND = 7;\nconst FULL_PROGRESS = 100;\nconst CHECK_PROGRESS_INTERVAL = 2500;\n\nexport const TransactionProgress: FC<Props> = (props) => {\n  const [progress, setProgress] = useState(INITIAL_PROGRESS);\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!props.isExecuting) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= UPPER_PROGRESS_BOUND) {\n        newProgress += LOWER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      } else {\n        newProgress = UPPER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      }\n    }, CHECK_PROGRESS_INTERVAL);\n\n    return () => {\n      clearTimeout(timerId);\n      setProgress(FULL_PROGRESS);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isExecuting]);\n\n  const renderStatus = (executing: boolean, success: boolean, error: boolean) => {\n    switch (true) {\n      case executing:\n        return 'Pending';\n      case error:\n        return 'Error';\n      case success:\n        return 'Completed';\n      default:\n        return 'Pending';\n    }\n  };\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressLine\n          style={{ width: `${progress}%` }}\n          className={classNames({\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        />\n        <ProgressStub />\n\n        <BlockWrapper\n          className={classNames({\n            isProcessing: props.isProcessing,\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        >\n          {props.isSuccess ? (\n            <ProgressIcon name=\"success-send\" />\n          ) : (\n            <ProgressIcon name={props.isError ? 'error-send' : 'clock-send'} />\n          )}\n        </BlockWrapper>\n      </ProgressWrapper>\n      <TransactionStatus>\n        {props.label}\n        <TransactionBadge>\n          <TransactionLabel\n            className={classNames({\n              isProcessing: props.isProcessing,\n              isSuccess: props.isSuccess,\n              isError: props.isError,\n            })}\n          />\n          {renderStatus(props.isExecuting, props.isSuccess, props.isError)}\n        </TransactionBadge>\n      </TransactionStatus>\n    </>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme, up, zIndexes } from '@p2p-wallet-web/ui';\n\nimport { Button, Icon } from 'components/ui';\nimport { Content as ModalContent, Modal } from 'components/ui/Modal';\n\nexport const StatusColors = styled.div`\n  &.isProcessing {\n    background: ${theme.colors.system.warningMain};\n  }\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const WrapperModal = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  padding: 0;\n  overflow: scroll;\n\n  background: ${theme.colors.bg.primary};\n\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n\n  ${ModalContent} {\n    ${up.tablet} {\n      width: 524px;\n    }\n\n    padding: 0;\n  }\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 24px;\n  font-style: normal;\n  line-height: 140%;\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.bg.buttonPrimary};\n\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionLabel = styled(StatusColors)`\n  display: block;\n  width: 8px;\n  height: 8px;\n\n  margin-right: 8px;\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: ${theme.colors.bg.buttonSecondary};\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid rgba(0, 0, 0, 0.05);\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n\n    ${ShareIcon} {\n      color: ${theme.colors.textIcon.active};\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 20px;\n`;\n","import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  doNotCloseOnPathChangeMobile?: boolean;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  doNotCloseOnPathChangeMobile,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && !doNotCloseOnPathChangeMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, doNotCloseOnPathChangeMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import type { FC, HTMLAttributes } from 'react';\nimport React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n\n  &:not(:last-child)::before {\n    position: absolute;\n\n    bottom: -12px;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 20px;\n  height: 20px;\n`;\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon: string;\n}\n\nexport const ActionButton: FC<Props> = ({ icon, onClick, children }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      <IconWrapper>\n        <IconStyled name={icon} />\n      </IconWrapper>\n      {children}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { styled } from '@linaria/react';\n\nimport type { ModalPropsType } from 'new/services/ModalService';\nimport type { LayoutViewModel } from 'new/ui/components/common/Layout/Layout.ViewModel';\nimport { ActionButton } from 'new/ui/modals/ActionsMobileModal/ActionButton';\nimport { Modal } from 'new/ui/modals/Modal';\n\nconst Content = styled.div`\n  display: grid;\n  grid-gap: 25px;\n\n  padding: 18px 0;\n`;\n\ninterface Props {\n  layoutViewModel: LayoutViewModel;\n}\n\nexport const ActionsMobileModal: FC<Props & ModalPropsType> = ({ close, layoutViewModel }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const handleButtonClick = (route: string) => () => {\n    close(false);\n\n    if (location.pathname !== route) {\n      history.push(route, { fromPage: location.pathname });\n    }\n  };\n\n  const handleBuyButtonClick = () => {\n    close(false);\n    layoutViewModel.openChooseBuyTokenMobileModal();\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  return (\n    <Modal close={handleCloseClick} noDelimiter>\n      <Content>\n        <ActionButton icon=\"plus\" onClick={handleBuyButtonClick}>\n          Buy\n        </ActionButton>\n        <ActionButton icon=\"bottom\" onClick={handleButtonClick('/receive')}>\n          Receive\n        </ActionButton>\n        <ActionButton icon=\"top\" onClick={handleButtonClick('/send')}>\n          Send\n        </ActionButton>\n        <ActionButton icon=\"swap\" onClick={handleButtonClick('/swap')}>\n          Swap\n        </ActionButton>\n      </Content>\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport type { Token, Wallet } from 'new/sdk/SolanaSDK';\nimport {\n  BaseTokenCellContent,\n  BaseWalletCellContent,\n} from 'new/ui/components/common/BaseWalletCellContent';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 26px 10px;\n`;\n\ninterface Props {\n  wallet?: Wallet;\n  token?: Token;\n  onClick: () => void;\n}\n\nexport const ActionRow: FC<Props> = ({ wallet, token, onClick }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      {token ? (\n        <BaseTokenCellContent token={token} isMobilePopupChild />\n      ) : (\n        <BaseWalletCellContent wallet={wallet} isMobilePopupChild />\n      )}\n    </Wrapper>\n  );\n};\n","import { action, makeObservable, observable, reaction, runInAction } from 'mobx';\nimport { singleton } from 'tsyringe';\n\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport type { Token, Wallet } from 'new/sdk/SolanaSDK';\nimport { CryptoCurrency } from 'new/services/BuyService/structures';\nimport { WalletsRepository } from 'new/services/Repositories';\nimport { SolanaService } from 'new/services/SolanaService';\n\n@singleton()\nexport class ChooseBuyTokenMobileModalViewModel extends ViewModel {\n  solWallet?: Wallet;\n  usdcWallet?: Wallet;\n\n  solToken?: Token;\n  usdcToken?: Token;\n\n  constructor(private _wallets: WalletsRepository, private _solanaService: SolanaService) {\n    super();\n\n    makeObservable(this, {\n      solWallet: observable,\n      usdcWallet: observable,\n\n      solToken: observable,\n      usdcToken: observable,\n    });\n\n    this._setWallets(\n      this._getBuySelectionWallet(CryptoCurrency.sol),\n      this._getBuySelectionWallet(CryptoCurrency.usdc),\n    );\n  }\n\n  protected override setDefaults() {}\n\n  protected override onInitialize() {\n    this.addReaction(\n      reaction(\n        () => [\n          this._getBuySelectionWallet(CryptoCurrency.sol),\n          this._getBuySelectionWallet(CryptoCurrency.usdc),\n        ],\n        ([newSOLWallet, newUSDCWallet]) => this._setWallets(newSOLWallet, newUSDCWallet),\n      ),\n    );\n  }\n\n  protected override afterReactionsRemoved() {}\n\n  private _getBuySelectionWallet(cryptoCurrency: CryptoCurrency): Wallet | undefined {\n    return this._wallets\n      .getWallets()\n      .find(\n        (wallet) =>\n          wallet.token.symbol === cryptoCurrency.symbol &&\n          wallet.token.address === cryptoCurrency.mintAddress,\n      );\n  }\n\n  private _getToken(cryptoCurrency: CryptoCurrency): Promise<Token | undefined> {\n    return this._solanaService.getToken(cryptoCurrency.mintAddress);\n  }\n\n  private _setWallets(newSOLWallet?: Wallet, newUSDCWallet?: Wallet): void {\n    if (newSOLWallet) {\n      runInAction(() => (this.solWallet = newSOLWallet));\n    } else {\n      this._getToken(CryptoCurrency.sol).then(\n        action((newSOLToken) => (this.solToken = newSOLToken)),\n      );\n    }\n\n    if (newUSDCWallet) {\n      runInAction(() => (this.usdcWallet = newUSDCWallet));\n    } else {\n      this._getToken(CryptoCurrency.usdc).then(\n        action((newUSDCToken) => (this.usdcToken = newUSDCToken)),\n      );\n    }\n  }\n}\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport { CryptoCurrency } from 'new/services/BuyService/structures';\nimport type { ModalPropsType } from 'new/services/ModalService';\nimport { ActionRow } from 'new/ui/modals/ChooseBuyTokenMobileModal/ActionRow';\nimport { ChooseBuyTokenMobileModalViewModel } from 'new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.ViewModel';\nimport { Modal } from 'new/ui/modals/Modal';\n\nexport const ChooseBuyTokenMobileModal: FC<ModalPropsType> = observer(({ close }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { solWallet, solToken, usdcWallet, usdcToken } =\n    useViewModel<ChooseBuyTokenMobileModalViewModel>(ChooseBuyTokenMobileModalViewModel);\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const handleRowClick = (cryptoCurrency: CryptoCurrency) => {\n    close(false);\n\n    const newPath = `/buy/${cryptoCurrency.symbol}`;\n\n    if (location.pathname !== newPath) {\n      history.push(newPath);\n    }\n  };\n\n  return (\n    <Modal noDelimiter={false} close={handleCloseClick} title=\"Choose a crypto for buying\">\n      <ActionRow\n        wallet={solWallet}\n        token={solToken}\n        onClick={() => handleRowClick(CryptoCurrency.sol)}\n      />\n      <ActionRow\n        wallet={usdcWallet}\n        token={usdcToken}\n        onClick={() => handleRowClick(CryptoCurrency.usdc)}\n      />\n    </Modal>\n  );\n});\n","import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import { ZERO } from '@orca-so/sdk';\nimport { PublicKey } from '@solana/web3.js';\n\nimport { networkFeesAll } from 'new/app/models/PayingFee';\nimport * as SolanaSDK from 'new/sdk/SolanaSDK';\nimport {\n  convertToBalance,\n  getAssociatedTokenAddressSync,\n  SolanaSDKPublicKey,\n} from 'new/sdk/SolanaSDK';\nimport type { PricesServiceType } from 'new/services/PriceAPIs/PricesService';\nimport type { RawTransactionType } from 'new/ui/modals/ProcessTransactionModal';\nimport * as ProcessTransaction from 'new/ui/modals/ProcessTransactionModal/ProcessTransaction.Models';\n\nexport enum TransactionStatusType {\n  sending,\n  confirmed,\n  finalized,\n  error,\n}\n\nexport class TransactionStatus {\n  type: TransactionStatusType;\n  private readonly _numberOfConfirmed: number | null;\n  private readonly _error: Error | null;\n\n  static maxConfirmed = 31;\n\n  private constructor({\n    type,\n    numberOfConfirmed = null,\n    error = null,\n  }: {\n    type: TransactionStatusType;\n    numberOfConfirmed?: number | null;\n    error?: Error | null;\n  }) {\n    this.type = type;\n    this._numberOfConfirmed = numberOfConfirmed;\n    this._error = error;\n  }\n\n  // enum\n\n  static sending(): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.sending,\n    });\n  }\n\n  static confirmed(numberOfConfirmed: number): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.confirmed,\n      numberOfConfirmed,\n    });\n  }\n\n  static finalized(): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.finalized,\n    });\n  }\n\n  static error(error: Error): TransactionStatus {\n    return new TransactionStatus({\n      type: TransactionStatusType.error,\n      error,\n    });\n  }\n\n  // getters\n\n  get numberOfConfirmations(): number | null {\n    switch (this.type) {\n      case TransactionStatusType.confirmed:\n        return this._numberOfConfirmed;\n      default:\n        return null;\n    }\n  }\n\n  get isProcessing(): boolean {\n    switch (this.type) {\n      case TransactionStatusType.sending:\n      case TransactionStatusType.confirmed:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  get progress(): number {\n    switch (this.type) {\n      case TransactionStatusType.sending:\n        return 0;\n      case TransactionStatusType.confirmed: {\n        // treat all number of confirmed as unfinalized\n        let numberOfConfirmations = this.numberOfConfirmations!;\n        if (numberOfConfirmations >= TransactionStatus.maxConfirmed) {\n          numberOfConfirmations = TransactionStatus.maxConfirmed - 1;\n        }\n        return numberOfConfirmations / TransactionStatus.maxConfirmed;\n      }\n      case TransactionStatusType.finalized:\n      case TransactionStatusType.error:\n        return 1;\n    }\n  }\n\n  get error(): Error | null {\n    switch (this.type) {\n      case TransactionStatusType.error:\n        return this._error;\n      default:\n        return null;\n    }\n  }\n\n  get rawValue(): string {\n    switch (this.type) {\n      case TransactionStatusType.sending:\n        return 'sending';\n      case TransactionStatusType.confirmed:\n        return `processing(${this._numberOfConfirmed!})`;\n      case TransactionStatusType.finalized:\n        return 'finalized';\n      case TransactionStatusType.error:\n        return 'error';\n    }\n  }\n}\n\nexport class PendingTransaction {\n  transactionId: SolanaSDK.TransactionID | null;\n  sentAt: Date;\n  writtenToRepository: boolean;\n  rawTransaction: RawTransactionType;\n  status: TransactionStatus;\n  slot: number;\n\n  constructor({\n    transactionId,\n    sentAt,\n    writtenToRepository = false,\n    rawTransaction,\n    status,\n    slot = 0,\n  }: {\n    transactionId: SolanaSDK.TransactionID | null;\n    sentAt: Date;\n    writtenToRepository?: boolean;\n    rawTransaction: RawTransactionType;\n    status: TransactionStatus;\n    slot?: number;\n  }) {\n    this.transactionId = transactionId;\n    this.sentAt = sentAt;\n    this.writtenToRepository = writtenToRepository;\n    this.rawTransaction = rawTransaction;\n    this.status = status;\n    this.slot = slot;\n  }\n\n  parse({\n    pricesService,\n    authority = null,\n  }: {\n    pricesService: PricesServiceType;\n    authority?: string | null;\n  }): SolanaSDK.ParsedTransaction | null {\n    // status\n    let status: SolanaSDK.Status;\n\n    switch (this.status.type) {\n      case TransactionStatusType.sending:\n        status = SolanaSDK.Status.requesting();\n        break;\n      case TransactionStatusType.confirmed:\n        status = SolanaSDK.Status.processing(0);\n        break;\n      case TransactionStatusType.finalized:\n        status = SolanaSDK.Status.confirmed();\n        break;\n      case TransactionStatusType.error:\n        status = SolanaSDK.Status.error(this.status.error?.message);\n        break;\n    }\n\n    const signature = this.transactionId;\n\n    let value: SolanaSDK.ParsedTransactionValueType | null;\n    let amountInFiat: number | null;\n    let fee: SolanaSDK.FeeAmount | null;\n\n    const transaction = this.rawTransaction;\n    switch (transaction.constructor) {\n      case ProcessTransaction.SendTransaction: {\n        const amount = convertToBalance(\n          (transaction as ProcessTransaction.SendTransaction).amount,\n          (transaction as ProcessTransaction.SendTransaction).sender.token.decimals,\n        );\n        value = new SolanaSDK.TransferTransaction({\n          source: (transaction as ProcessTransaction.SendTransaction).sender,\n          destination: new SolanaSDK.Wallet({\n            pubkey: (transaction as ProcessTransaction.SendTransaction).receiver.address,\n            lamports: ZERO,\n            token: (transaction as ProcessTransaction.SendTransaction).sender.token,\n          }),\n          authority,\n          destinationAuthority: null,\n          amount,\n          myAccount: (transaction as ProcessTransaction.SendTransaction).sender.pubkey,\n        });\n        amountInFiat =\n          amount *\n          (pricesService.currentPrice(\n            (transaction as ProcessTransaction.SendTransaction).sender.token.symbol,\n          )?.value ?? 0);\n        fee = (transaction as ProcessTransaction.SendTransaction).feeInToken;\n        break;\n      }\n      case ProcessTransaction.SwapTransaction: {\n        const destinationWallet = (transaction as ProcessTransaction.SwapTransaction)\n          .destinationWallet;\n        const mintAddress = new PublicKey(destinationWallet.mintAddress);\n        if (authority && mintAddress) {\n          const _authority = new PublicKey(authority);\n          // TODO: use getAssociatedTokenAddressSync from spl-token when it will be published\n          destinationWallet.pubkey = getAssociatedTokenAddressSync(\n            mintAddress,\n            _authority,\n            false,\n            SolanaSDKPublicKey.splAssociatedTokenAccountProgramId,\n            SolanaSDKPublicKey.tokenProgramId,\n          ).toString();\n        }\n\n        value = new SolanaSDK.SwapTransaction({\n          source: (transaction as ProcessTransaction.SwapTransaction).sourceWallet,\n          sourceAmount: (transaction as ProcessTransaction.SwapTransaction).amount,\n          destination: destinationWallet,\n          destinationAmount: (transaction as ProcessTransaction.SwapTransaction).estimatedAmount,\n          myAccountSymbol: null,\n        });\n        amountInFiat =\n          (transaction as ProcessTransaction.SwapTransaction).amount *\n          (pricesService.currentPrice(\n            (transaction as ProcessTransaction.SwapTransaction).sourceWallet.token.symbol,\n          )?.value ?? 0);\n        fee = networkFeesAll((transaction as ProcessTransaction.SwapTransaction).fees);\n        break;\n      }\n      default:\n        return null;\n    }\n\n    return new SolanaSDK.ParsedTransaction({\n      status,\n      signature,\n      value,\n      amountInFiat,\n      slot: this.slot,\n      blockTime: this.sentAt,\n      fee,\n      blockhash: null,\n    });\n  }\n}\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\nimport { expr } from 'mobx-utils';\n\nimport { TransactionStatusType } from 'new/app/models/PendingTransaction';\nimport { FeeRelayerError } from 'new/sdk/FeeRelayer';\nimport * as ProcessTransaction from 'new/ui/modals/ProcessTransactionModal/ProcessTransaction.Models';\n\nimport type { ProcessTransactionModalViewModel } from '../../ProcessTransactionModal.ViewModel';\n\nconst Wrapper = styled.div``;\n\ninterface Props {\n  viewModel: ProcessTransactionModalViewModel;\n}\n\nexport const HeaderLabel: FC<Props> = observer(({ viewModel }) => {\n  const text = expr(() => {\n    const info = viewModel.pendingTransaction;\n    const originalText = info.rawTransaction.isSwap\n      ? 'The swap is being processed'\n      : 'The transaction is being processed';\n\n    switch (info.status.type) {\n      case TransactionStatusType.sending:\n      case TransactionStatusType.confirmed:\n        return originalText;\n      case TransactionStatusType.error: {\n        // TODO: check all condition works\n        const error = info.status.error;\n        if (error) {\n          if (error.message.includes('Swap instruction exceeds desired slippage limit')) {\n            return 'Low slippage caused the swap to fail';\n          }\n\n          if (\n            error instanceof FeeRelayerError &&\n            error.code === FeeRelayerError.topUpSuccessButTransactionThrows().code\n          ) {\n            return 'The transaction failed due to a blockchain error';\n          }\n        }\n        return 'The transaction has been rejected';\n      }\n      case TransactionStatusType.finalized: {\n        // TODO: check all condition works\n        const transaction = info.rawTransaction;\n        if (transaction instanceof ProcessTransaction.SendTransaction) {\n          return `${transaction.sender.token.symbol} was sent successfully`;\n        }\n\n        if (transaction instanceof ProcessTransaction.SwapTransaction) {\n          return `${transaction.sourceWallet.token.symbol} → ${transaction.destinationWallet.token.symbol} swapped successfully`;\n        }\n\n        throw Error('fatal');\n      }\n    }\n  });\n\n  return <Wrapper>{text}</Wrapper>;\n});\n","import { ZERO } from '@orca-so/sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport promiseRetry from 'promise-retry';\nimport { injectable } from 'tsyringe';\n\nimport { FeeTypeEnum } from 'new/app/models/PayingFee';\nimport { PendingTransaction, TransactionStatus } from 'new/app/models/PendingTransaction';\nimport type * as SolanaSDK from 'new/sdk/SolanaSDK';\nimport {\n  getAssociatedTokenAddressSync,\n  SolanaSDKError,\n  SolanaSDKPublicKey,\n  toLamport,\n} from 'new/sdk/SolanaSDK';\nimport { PricesService } from 'new/services/PriceAPIs/PricesService';\nimport { WalletsRepository } from 'new/services/Repositories';\nimport { AccountObservableService } from 'new/services/Socket';\nimport { SolanaService } from 'new/services/SolanaService';\nimport type { RawTransactionType } from 'new/ui/modals/ProcessTransactionModal';\nimport * as ProcessTransaction from 'new/ui/modals/ProcessTransactionModal/ProcessTransaction.Models';\nimport type { Emitter } from 'new/utils/libs/nanoEvent';\nimport { createNanoEvent } from 'new/utils/libs/nanoEvent';\n\ntype TransactionIndex = number;\n\ninterface TransactionHandlerType {\n  sendTransaction(processingTransaction: RawTransactionType): TransactionIndex;\n  observeTransaction(transactionIndex: TransactionIndex): PendingTransaction | null; // TODO: observable\n  areSomeTransactionsInProgress(): boolean;\n\n  observeProcessingTransactions(account: string): SolanaSDK.ParsedTransaction[]; // TODO: observable\n  observeProcessingTransactionsAll(): SolanaSDK.ParsedTransaction[]; // TODO: observable\n\n  getProccessingTransactions(account: string): SolanaSDK.ParsedTransaction[];\n  getProccessingTransactionAll(): SolanaSDK.ParsedTransaction[];\n\n  readonly onNewTransaction: Emitter<[{ trx: PendingTransaction; index: number }]>['on']; // TODO: observable\n}\n\n@injectable()\nexport class TransactionHandler implements TransactionHandlerType {\n  transactions: PendingTransaction[] = [];\n  private _onNewTransactionEmitter =\n    createNanoEvent<[{ trx: PendingTransaction; index: number }]>(); // new EventEmitter<{ trx: PendingTransaction; index: number }>();\n  onNewTransaction: Emitter<[{ trx: PendingTransaction; index: number }]>['on'] =\n    this._onNewTransactionEmitter.on;\n\n  constructor(\n    private _apiClient: SolanaService,\n    private _walletsRepository: WalletsRepository,\n    private _pricesService: PricesService,\n    private _socket: AccountObservableService,\n  ) {}\n\n  sendTransaction(processingTransaction: RawTransactionType): TransactionIndex {\n    // get index to return\n    const txIndex = this.transactions.length;\n\n    // add to processing\n    const trx = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: processingTransaction,\n      status: TransactionStatus.sending(),\n    });\n\n    const value = this.transactions;\n    value.push(trx);\n\n    this.transactions = value;\n    this._onNewTransactionEmitter.emit({ trx, index: txIndex });\n\n    // process\n    this.sendAndObserve({ index: txIndex, processingTransaction });\n\n    return txIndex;\n  }\n\n  observeTransaction(transactionIndex: TransactionIndex): PendingTransaction | null {\n    return this.transactions[transactionIndex] ?? null;\n  }\n\n  areSomeTransactionsInProgress(): boolean {\n    return this.transactions.some((tx) => tx.status.isProcessing);\n  }\n\n  // observeProcessingTransactions(account: string): SolanaSDK.ParsedTransaction[] {}\n  // observeProcessingTransactionsAll(): SolanaSDK.ParsedTransaction[] {}\n\n  getProccessingTransactions(account: string): SolanaSDK.ParsedTransaction[] {\n    return this.transactions\n      .filter((pt) => {\n        const transaction = pt.rawTransaction;\n        switch (transaction.constructor) {\n          case ProcessTransaction.SendTransaction: {\n            if (\n              (transaction as ProcessTransaction.SendTransaction).sender.pubkey === account ||\n              (transaction as ProcessTransaction.SendTransaction).receiver.address === account ||\n              (transaction as ProcessTransaction.SendTransaction).authority === account\n            ) {\n              return true;\n            }\n            break;\n          }\n          case ProcessTransaction.SwapTransaction: {\n            if (\n              (transaction as ProcessTransaction.SwapTransaction).sourceWallet.pubkey === account ||\n              (transaction as ProcessTransaction.SwapTransaction).destinationWallet.pubkey ===\n                account ||\n              (transaction as ProcessTransaction.SwapTransaction).authority === account\n            ) {\n              return true;\n            }\n            break;\n          }\n          default:\n            break;\n        }\n        return false;\n      })\n      .map((pt) => {\n        return pt.parse({\n          pricesService: this._pricesService,\n          authority: this._walletsRepository.nativeWallet?.pubkey,\n        });\n      })\n      .filter((tx): tx is SolanaSDK.ParsedTransaction => Boolean(tx));\n  }\n\n  getProcessingTransactionAll(): SolanaSDK.ParsedTransaction[] {\n    return this.transactions\n      .map((pt) => {\n        return pt.parse({\n          pricesService: this._pricesService,\n          authority: this._walletsRepository.nativeWallet?.pubkey,\n        });\n      })\n      .filter((tx): tx is SolanaSDK.ParsedTransaction => Boolean(tx));\n  }\n\n  // Send and observe transaction\n  async sendAndObserve({\n    index,\n    processingTransaction,\n  }: {\n    index: TransactionIndex;\n    processingTransaction: RawTransactionType;\n  }): Promise<void> {\n    try {\n      const transactionId = await processingTransaction.createRequest();\n\n      // show notification\n      // this._notificationsService.showInAppNotification(done(transactionHasBeenSent))\n\n      // update status\n      this._updateTransactionAtIndex(index, () => {\n        return new PendingTransaction({\n          transactionId,\n          sentAt: new Date(),\n          rawTransaction: processingTransaction,\n          status: TransactionStatus.confirmed(0),\n        });\n      });\n\n      // observe confirmations\n      this.observe({ index, transactionId });\n    } catch (error) {\n      // update status\n      // TODO: notification this._notificationsService.showInAppNotification(error(error));\n\n      // mark transaction as failured\n      this._updateTransactionAtIndex(index, (currentValue) => {\n        const info = currentValue;\n        info.status = TransactionStatus.error(error as Error);\n        return info;\n      });\n    }\n  }\n\n  // Observe confirmation statuses of given transaction\n  observe({ index, transactionId }: { index: TransactionIndex; transactionId: string }): void {\n    promiseRetry(\n      (_retry) =>\n        this._apiClient.provider.connection.getSignatureStatus(transactionId).then((result) => {\n          const status = result.value;\n          if (!status) {\n            throw SolanaSDKError.other('Invalid status');\n          }\n\n          let txStatus: TransactionStatus;\n          if (!status.confirmations || status.confirmationStatus === 'finalized') {\n            txStatus = TransactionStatus.finalized();\n          } else {\n            txStatus = TransactionStatus.confirmed(status.confirmations ?? 0);\n          }\n\n          this._updateTransactionAtIndex(index, (currentValue) => {\n            const value = currentValue;\n            value.status = txStatus;\n            value.slot = status.slot;\n            return value;\n          });\n\n          const confirmed = !status.confirmations || status.confirmationStatus === 'finalized';\n          if (confirmed) {\n            return null;\n          } else {\n            throw ProcessTransaction.ErrorType.notEnoughNumberOfConfirmations;\n          }\n        }),\n      {\n        retries: 10,\n        minTimeout: 1000,\n        maxTimeout: 60000,\n        factor: 1,\n      },\n    );\n  }\n\n  // Update transaction\n  private _updateTransactionAtIndex(\n    index: TransactionIndex,\n    update: (tx: PendingTransaction) => PendingTransaction,\n  ): boolean {\n    const value = this.transactions;\n\n    const currentValue = value[index];\n    if (currentValue) {\n      const newValue = update(currentValue);\n\n      // write to repository if the transaction is not yet written and there is at least 1 confirmation\n      const numberOfConfirmations = newValue.status.numberOfConfirmations;\n      if (!newValue.writtenToRepository && numberOfConfirmations && numberOfConfirmations > 0) {\n        // manually update balances if socket is not connected\n        this._updateRepository(newValue.rawTransaction);\n\n        // mark as written\n        newValue.writtenToRepository = true;\n      }\n\n      // update\n      value[index] = newValue;\n      this.transactions = value;\n      return true;\n    }\n\n    return false;\n  }\n\n  private _updateRepository(rawTransaction: RawTransactionType): void {\n    switch (rawTransaction.constructor) {\n      case ProcessTransaction.SendTransaction: {\n        if (this._socket.isConnected) {\n          return;\n        }\n\n        this._walletsRepository.batchUpdate((currentValue) => {\n          const wallets = currentValue;\n          let index;\n\n          // update sender\n          index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SendTransaction).sender.pubkey,\n          );\n          if (index) {\n            wallets[index]!.decreaseBalance(\n              (rawTransaction as ProcessTransaction.SendTransaction).amount,\n            );\n          }\n\n          // update receiver if user send to different wallet of THIS account\n          index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SendTransaction).receiver.address,\n          );\n          if (index) {\n            wallets[index]!.increaseBalance(\n              (rawTransaction as ProcessTransaction.SendTransaction).amount,\n            );\n          }\n\n          // update paying wallet\n          index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SendTransaction).payingFeeWallet?.pubkey,\n          );\n          if (index) {\n            const feeInToken = (rawTransaction as ProcessTransaction.SendTransaction).feeInToken;\n            if (feeInToken) {\n              wallets[index]!.decreaseBalance(feeInToken.total);\n            }\n          }\n\n          return wallets;\n        });\n        break;\n      }\n      case ProcessTransaction.CloseTransaction: {\n        if (this._socket.isConnected) {\n          return;\n        }\n\n        this._walletsRepository.batchUpdate((currentValue) => {\n          let wallets = currentValue;\n          let reimbursedAmount = (rawTransaction as ProcessTransaction.CloseTransaction)\n            .reimbursedAmount;\n\n          // remove closed wallet\n          const wallet = (rawTransaction as ProcessTransaction.CloseTransaction).closingWallet;\n          wallets = wallets.filter((item) => item.pubkey === wallet.pubkey);\n\n          // if closing non-native Solana wallet, then convert its balances and send it to native Solana wallet\n          if (wallet.token.symbol === 'SOL' && !wallet.token.isNative) {\n            reimbursedAmount = reimbursedAmount.add(wallet.lamports ?? ZERO);\n          }\n\n          // update native wallet\n          const index = wallets.findIndex((wallet) => wallet.isNativeSOL);\n          if (index) {\n            wallets[index]!.increaseBalance(reimbursedAmount);\n          }\n\n          return wallets;\n        });\n        break;\n      }\n      case ProcessTransaction.SwapTransaction: {\n        this._walletsRepository.batchUpdate((currentValue) => {\n          const wallets = currentValue;\n\n          // update source wallet if socket is not connected\n          if (!this._socket.isConnected) {\n            const index = wallets.findIndex(\n              (wallet) =>\n                wallet.pubkey ===\n                (rawTransaction as ProcessTransaction.SwapTransaction).sourceWallet.pubkey,\n            );\n            if (index) {\n              wallets[index]!.decreaseBalance(\n                toLamport(\n                  (rawTransaction as ProcessTransaction.SwapTransaction).amount,\n                  (rawTransaction as ProcessTransaction.SwapTransaction).sourceWallet.token\n                    .decimals,\n                ),\n              );\n            }\n          }\n\n          // update destination wallet if exists\n          const index = wallets.findIndex(\n            (wallet) =>\n              wallet.pubkey ===\n              (rawTransaction as ProcessTransaction.SwapTransaction).destinationWallet.pubkey,\n          );\n          if (index) {\n            // update only if socket is not connected\n            if (!this._socket.isConnected) {\n              wallets[index]!.increaseBalance(\n                toLamport(\n                  (rawTransaction as ProcessTransaction.SwapTransaction).estimatedAmount,\n                  (rawTransaction as ProcessTransaction.SwapTransaction).destinationWallet.token\n                    .decimals,\n                ),\n              );\n            }\n          } else {\n            // add destination wallet if not exists, event when socket is connected, because socket doesn't handle new wallet\n            let publicKey = null;\n            try {\n              const authority = (rawTransaction as ProcessTransaction.SwapTransaction).authority;\n              if (!authority) {\n                throw false;\n              }\n\n              publicKey = getAssociatedTokenAddressSync(\n                new PublicKey(\n                  (\n                    rawTransaction as ProcessTransaction.SwapTransaction\n                  ).destinationWallet.mintAddress,\n                ),\n                new PublicKey(authority),\n                false,\n                SolanaSDKPublicKey.splAssociatedTokenAccountProgramId,\n                SolanaSDKPublicKey.tokenProgramId,\n              );\n            } catch {\n              /// ignore\n            }\n            if (publicKey) {\n              const destinationWallet = (rawTransaction as ProcessTransaction.SwapTransaction)\n                .destinationWallet;\n              destinationWallet.pubkey = publicKey.toString();\n              destinationWallet.lamports = toLamport(\n                (rawTransaction as ProcessTransaction.SwapTransaction).estimatedAmount,\n                destinationWallet.token.decimals,\n              );\n              wallets.push(destinationWallet);\n            }\n          }\n\n          // update paying wallet\n          if (!this._socket.isConnected) {\n            for (const fee of (rawTransaction as ProcessTransaction.SwapTransaction).fees) {\n              switch (fee.type.type) {\n                case FeeTypeEnum.accountCreationFee:\n                case FeeTypeEnum.transactionFee: {\n                  const index = wallets.findIndex(\n                    (wallet) => wallet.mintAddress === fee.token.address,\n                  );\n                  if (index) {\n                    wallets[index]!.decreaseBalance(fee.lamports);\n                  }\n                  break;\n                }\n                case FeeTypeEnum.liquidityProviderFee:\n                case FeeTypeEnum.orderCreationFee:\n                case FeeTypeEnum.depositWillBeReturned:\n                  break;\n              }\n            }\n          }\n\n          return wallets;\n        });\n        break;\n      }\n      default:\n        break;\n    }\n  }\n}\n","export const createNanoEvent = () => ({\n  listeners: [],\n  emit(...args) {\n    const callbacks = this.listeners || [];\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args);\n    }\n  },\n  on(cb) {\n    this.listeners?.push(cb) || (this.listeners = [cb]);\n    return () => {\n      this.listeners = this.listeners.filter((i) => cb !== i);\n    };\n  },\n});\n","import { makeObservable, observable } from 'mobx';\nimport { injectable } from 'tsyringe';\n\nimport { PendingTransaction, TransactionStatus } from 'new/app/models/PendingTransaction';\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport { SolanaSDKError } from 'new/sdk/SolanaSDK';\nimport { TransactionHandler } from 'new/services/TransactionHandler';\n\nimport type { RawTransactionType } from './ProcessTransaction.Models';\n\ninterface ProcessTransactionModalViewModelType {\n  pendingTransaction: PendingTransaction;\n  observingTransactionIndex: number | null;\n}\n\n@injectable()\nexport class ProcessTransactionModalViewModel\n  extends ViewModel\n  implements ProcessTransactionModalViewModelType\n{\n  pendingTransaction: PendingTransaction;\n  observingTransactionIndex: number | null = null;\n\n  rawTransaction: RawTransactionType;\n\n  constructor(private _transactionHandler: TransactionHandler) {\n    super();\n\n    makeObservable(this, {\n      pendingTransaction: observable,\n      observingTransactionIndex: observable,\n\n      rawTransaction: observable,\n    });\n  }\n\n  protected override onInitialize() {}\n\n  protected override afterReactionsRemoved() {}\n\n  setTransaction(processingTransaction: RawTransactionType) {\n    this.rawTransaction = processingTransaction;\n\n    this.pendingTransaction = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: processingTransaction,\n      status: TransactionStatus.sending(),\n    });\n  }\n\n  get isSwapping(): boolean {\n    return this.rawTransaction.isSwap;\n  }\n\n  get transactionID(): string | null {\n    return this.pendingTransaction.transactionId;\n  }\n\n  getMainDescription(): string {\n    return this.rawTransaction.mainDescription;\n  }\n\n  // Actions\n\n  sendAndObserveTransaction(): void {\n    // send transaction and get observation index\n    const index = this._transactionHandler.sendTransaction(this.rawTransaction);\n    this.observingTransactionIndex = index;\n\n    // send and catch error\n    const unknownErrorInfo = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: this.rawTransaction,\n      status: TransactionStatus.error(SolanaSDKError.unknown()),\n    });\n\n    // observe transaction based on transaction index\n    // TODO: it should wait\n    this.pendingTransaction =\n      this._transactionHandler.observeTransaction(index) ?? unknownErrorInfo;\n  }\n}\n","import type { FC } from 'react';\nimport { useLayoutEffect } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\n\nimport {\n  CloseIcon,\n  CloseWrapper,\n  DateHeader,\n  Header,\n  Section,\n  WrapperModal,\n} from 'components/modals/TransactionInfoModals/common';\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\nimport type { RawTransactionType } from 'new/ui/modals/ProcessTransactionModal/ProcessTransaction.Models';\nimport { HeaderLabel } from 'new/ui/modals/ProcessTransactionModal/Status/HeaderLabel';\n\nimport { ProcessTransactionModalViewModel } from './ProcessTransactionModal.ViewModel';\n\nconst Wrapper = styled.div``;\n\nexport interface ProcessTransactionModalProps {\n  transaction: RawTransactionType;\n}\n\nexport const ProcessTransactionModal: FC<ModalPropsType & ProcessTransactionModalProps> = observer(\n  ({ close, transaction }) => {\n    const viewModel = useViewModel(ProcessTransactionModalViewModel);\n\n    useLayoutEffect(() => {\n      viewModel.setTransaction(transaction);\n      viewModel.sendAndObserveTransaction();\n    });\n\n    const handleCloseClick = () => {\n      close(false);\n    };\n\n    return (\n      <WrapperModal close={handleCloseClick}>\n        <Section>\n          <Header>\n            1 → 2\n            <CloseWrapper onClick={handleCloseClick}>\n              <CloseIcon name=\"close\" />\n            </CloseWrapper>\n            <DateHeader />\n          </Header>\n          <HeaderLabel viewModel={viewModel} />\n        </Section>\n      </WrapperModal>\n    );\n  },\n);\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 27px;\n\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 40%;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 5px;\n  left: -2px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 19px;\n\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { Defaults } from 'new/services/Defaults';\nimport { TokenAvatar } from 'new/ui/components/common/TokenAvatar';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport { FieldInfo, InfoTitle, InfoValue, InfoWrapper } from '../../common/styled';\n\ninterface Props {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const AmountSummaryView: FC<Props> = observer(({ viewModel }) => {\n  const wallet = viewModel.wallet;\n  const amount = viewModel.amount ?? 0;\n  const amountInFiat = amount * (wallet?.priceInCurrentFiat ?? 0);\n\n  return (\n    <FieldInfo>\n      <TokenAvatar token={wallet?.token} size={44} />\n      <InfoWrapper>\n        <InfoTitle>\n          {numberToString(amount, { maximumFractionDigits: 9 })} {wallet?.token.symbol ?? ''}\n        </InfoTitle>\n        <InfoValue>\n          {Defaults.fiat.symbol}\n          {numberToString(amountInFiat, { maximumFractionDigits: 2 })}\n        </InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { AddressText } from 'components/common/AddressText';\nimport type { SendViewModel } from 'new/scenes/Main/Send';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  To,\n  Username,\n  WalletIcon,\n} from '../../common/styled';\n\ninterface Props {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const RecipientView: FC<Props> = observer(({ viewModel }) => {\n  const recipient = viewModel.recipient!;\n\n  return (\n    <FieldInfo>\n      <IconWrapper>\n        <WalletIcon name=\"wallet\" />\n      </IconWrapper>\n      <InfoWrapper>\n        {recipient.name ? (\n          <Username>\n            <To>To</To>\n            {recipient.name}\n          </Username>\n        ) : (\n          <InfoTitle className=\"secondary\">To address</InfoTitle>\n        )}\n        <InfoValue>\n          <AddressText address={recipient.address} medium />\n        </InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport type { ModalPropsType } from '../../ModalManager';\nimport { Section } from '../common/styled';\nimport { AmountSummaryView } from './AmountSummaryView';\nimport { RecipientView } from './RecipientView';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport interface ConfirmSendModalProps {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const ConfirmSendModal: FC<ModalPropsType & ConfirmSendModalProps> = ({\n  close,\n  viewModel,\n}) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    close(true);\n    viewModel.authenticateAndSend();\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled =\n    (isSecretKeyWallet && (!password || hasError)) ||\n    !viewModel.wallet ||\n    !viewModel.amount ||\n    !viewModel.recipient;\n\n  // const address = params.destination?.toBase58?.() || btcAddress;\n  // const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n  return (\n    <WrapperModal\n      title={<ModalTitle>Confirm sending</ModalTitle>}\n      close={handleCloseClick}\n      footer={\n        <>\n          <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n            <SendIcon name=\"top\" />\n            {viewModel.error?.buttonSuggestion ??\n              `Send ${numberToString(viewModel.amount, {\n                maximumFractionDigits: 9,\n              })} ${viewModel.wallet?.token.symbol ?? ''}`}\n          </Button>\n          <ButtonCancel onClick={handleCloseClick} />\n        </>\n      }\n      noDelimiter={false}\n    >\n      <ActionTitle>You are going to send</ActionTitle>\n\n      <Section className=\"send\">\n        <div>\n          <AmountSummaryView viewModel={viewModel} />\n          <ArrowWrapper>\n            <ArrowIconWrapper>\n              <ArrowIcon name=\"arrow-down\" />\n            </ArrowIconWrapper>\n          </ArrowWrapper>\n          <RecipientView viewModel={viewModel} />\n        </div>\n\n        {/*<TransactionDetails sendState={sendState} amount={params.amount} />*/}\n      </Section>\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled\n            value={password}\n            onChange={handlePasswordChange}\n            isError={hasError}\n          />\n          {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : null}\n        </Section>\n      ) : null}\n    </WrapperModal>\n  );\n};\n"],"names":["CancelIcon","ButtonCancel","props","hollow","error","name","Wrapper","IconWrapper","IconStyled","ActionButton","children","onClick","Content","ActionsMobileModal","close","history","useHistory","location","useLocation","openModal","useModals","handleButtonClick","route","fromPage","pathname","noDelimiter","icon","ModalType","TokenAvatarStyled","TokenInfo","TokenName","TokenBalance","TokenUSD","TokenAccountRowContent","isMobilePopupChild","isMobile","useIsMobile","tokenName","avatarSize","getAvatarSize","loading","elTokenBalance","width","height","tokenAccount","borderRadius","symbol","address","size","className","classNames","shortAddress","title","value","ActionRow","ChooseBuyTokenMobileModal","tokenConfigs","useConfig","tokenSOL","useToken","mint","tokenUSDC","tokenAccountList","useUserAssociatedTokenAccountsWithNativeSOLOverride","handleCloseClick","Modal","map","balance","token","newPath","push","handleRowClick","key","toBase58","useCloseTokenAccount","providerMut","useSolana","publicKey","useWallet","handleTX","useSail","updateUserTokenAccountKeys","useTokenAccountsContext","useCallback","params","Error","tx","closeAccount","result","success","CloseAccountIcon","Header","Description","Buttons","ButtonClose","CloseTokenAccountModal","closeTokenAccount","useState","handleCloseTokenAButtonClick","setIsExecuting","console","setTimeout","disabled","lightBlue","StyledIcon","ButtonStyled","ErrorModal","primary","CloseButton","CloseIcon","ProceedUsernameModal","updateSettings","useSettings","usernameBannerHiddenByUser","type","ItemWrapper","Info","Top","Bottom","TokenAccountRow","MainWrapper","SelectedWrapper","InfoWrapper","Line","Text","ChevronIcon","DropDownListContainer","DropDownHeader","DropDownList","FeePaySelector","isShortList","selectorRef","useRef","dropdownRef","listRef","symbols","useMemo","tokenAccounts","markets","useMarketsData","handleAwayClick","e","setIsOpen","useEffect","window","filteredTokenAccounts","account","filteredWithBalance","matchesFilter","sortByRules","filter","handleTokenAccountClick","nextTokenAccount","onTokenAccountChange","ref","state","isOpen","placeholder","onChange","nextFilter","setFilter","WrapperModal","Section","List","Row","Create","solanaProvider","network","useRenNetwork","useUserTokenAccounts","expiryTime","useLockAndMintProvider","handleCreateAccountClick","setCreating","Bitcoin","ToastManager","description","iconName","iconBgClassName","footer","milliseconds","getRemainingGatewayTime","TopUp","trackEvent","ReceiveBitcoinModal","nativeBalance","toU64","toNumber","accountRentExemption","SelectListMobileModal","items","TokenAndUsd","AmountUSDStyled","TransactionDetails","amount","titleBottomName","titleBottomValue","sendState","open","noContentPadding","prefix","postfix","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","btcAddress","isFullName","test","medium","Swap","inputAmount","showTitle","inputDecimals","outputDecimals","minReceiveAmount","formatBigNumber","swapInfo","outputAmount","forPage","FieldInfo","WalletIcon","InfoTitle","Username","To","InfoValue","Subtitle","FromToWrapper","Overlay","ModalTitle","SubTitle","ActionTitle","PasswordInputStyled","SendIcon","TransactionConfirmModal","walletProviderInfo","tryUnlockSeedAndMnemonic","useTryUnlockSeedAndMnemonic","validatePassword","setHasError","handleConfirmClick","isSecretKeyWallet","DEFAULT_WALLET_PROVIDERS","DefaultWalletType","isDisabled","password","action","renderButtons","setPassword","isError","hasError","noIcon","StatusWrapper","Status","StatusIndicator","FieldRowWrapper","ColumnWrapper","AddressWrapper","AddressTitle","AddressValue","FieldTitleWrapper","PaidByBadge","PaddedHeader","TransactionDetailsModal","source","transaction","useTransaction","signature","sourceTokenAccount","useTokenAccount","usePubkey","destinationTokenAccount","tokenAmount","useTokenAccountAmount","sourceToken","destinationToken","date","dayjs","isShowFeeBadge","titleCase","isShowDetails","destination","renderFromTo","formatNumber","href","getExplorerUrl","target","rel","isCentered","lightGray","setShowDetails","INITIAL_PROGRESS","DEFAULT_TRANSACTION_ERROR","TransactionStatusSendModal","provider","useConnectionContext","executeAction","resultSignature","setSignature","transferNotification","header","text","setTransactionError","mount","commitment","trx","transactionError","isProcessing","isSuccess","Boolean","transactionConfirmed","isExecuting","label","amplitudeAction","data","TransactionStatusModal","Time","DateHeaderWrapper","DateHeader","today","utcDiff","GoToExplorerIcon","GoToExplorerLink","SolanaExplorerLink","trackEventUniversal","ProgressIcon","TransactionStatus","TransactionBadge","ProgressWrapper","ProgressLine","ProgressStub","zIndexes","BlockWrapper","TransactionProgress","newProgress","timerId","setInterval","setProgress","progress","clearTimeout","style","executing","renderStatus","StatusColors","Title","Desc","CloseWrapper","TransactionLabel","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","mobile","Handle","Delimiter","currentPath","doNotCloseOnPathChangeMobile","config","duration","t","from","transform","enter","leave","fadeTransition","useTransition","useSpring","y","mass","tension","friction","bind","useDrag","set","item","n","hasIcon","layoutViewModel","wallet","ChooseBuyTokenMobileModalViewModel","singleton","_wallets","_solanaService","solWallet","usdcWallet","solToken","usdcToken","makeObservable","observable","_setWallets","_getBuySelectionWallet","CryptoCurrency","this","addReaction","reaction","newSOLWallet","newUSDCWallet","cryptoCurrency","getWallets","find","mintAddress","getToken","runInAction","_getToken","then","newSOLToken","newUSDCToken","ViewModel","observer","useViewModel","TransactionStatusType","numberOfConfirmed","_numberOfConfirmed","_error","confirmed","sending","numberOfConfirmations","maxConfirmed","finalized","PendingTransaction","transactionId","sentAt","writtenToRepository","rawTransaction","status","slot","pricesService","authority","SolanaSDK","message","amountInFiat","fee","constructor","ProcessTransaction","convertToBalance","sender","decimals","pubkey","receiver","lamports","ZERO","destinationAuthority","myAccount","currentPrice","feeInToken","destinationWallet","PublicKey","_authority","getAssociatedTokenAddressSync","SolanaSDKPublicKey","toString","sourceWallet","sourceAmount","destinationAmount","estimatedAmount","myAccountSymbol","networkFeesAll","fees","blockTime","blockhash","HeaderLabel","viewModel","expr","info","originalText","FeeRelayerError","TransactionHandler","injectable","_apiClient","_walletsRepository","_pricesService","_socket","transactions","_onNewTransactionEmitter","listeners","emit","callbacks","i","length","on","cb","onNewTransaction","processingTransaction","txIndex","Date","index","sendAndObserve","transactionIndex","some","pt","parse","nativeWallet","createRequest","_updateTransactionAtIndex","observe","currentValue","promiseRetry","_retry","connection","getSignatureStatus","txStatus","SolanaSDKError","confirmations","confirmationStatus","retries","minTimeout","maxTimeout","factor","update","newValue","_updateRepository","isConnected","batchUpdate","wallets","findIndex","decreaseBalance","increaseBalance","payingFeeWallet","total","reimbursedAmount","closingWallet","isNative","add","isNativeSOL","toLamport","FeeTypeEnum","ProcessTransactionModalViewModel","_transactionHandler","pendingTransaction","observingTransactionIndex","isSwap","mainDescription","sendTransaction","unknownErrorInfo","observeTransaction","ProcessTransactionModal","useLayoutEffect","AmountSummaryView","numberToString","maximumFractionDigits","Defaults","RecipientView","recipient","ConfirmSendModal"],"sourceRoot":""}