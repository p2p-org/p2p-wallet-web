{"version":3,"file":"41d6206ac8ce6615685e.chunk.js","mappings":"m4BAOA,IAAMA,GAAU,mDAQHC,EAA2BC,SAAAA,GACtC,OACE,6BAAmBC,QAAnB,EAA0BC,OAA1B,aACE,YAAYC,KAAZ,UADF,c,8PCJG,IAAMC,EAAuB,WAClC,IAAQC,GAAgBC,EAAAA,EAAAA,KAAhBD,YACAE,GAAcC,EAAAA,EAAAA,MAAdD,UACAE,GAAaC,EAAAA,EAAAA,MAAbD,SACAE,GAA+BC,EAAAA,EAAAA,MAA/BD,2BAER,OAAOE,EAAAA,EAAAA,aAAW,e,EAAA,G,EAAA,yBAChB,WAAOC,GAAP,2FACOT,EADP,sBAEU,IAAIU,MAAM,sBAFpB,cAKQC,GAAKC,EAAAA,EAAAA,GAAaZ,EAAaS,EAAOP,UAAWA,GALzD,SAMuBE,EAASO,EAAD,8BAA4BF,EAAOP,UAAUW,aAN5E,cAMQC,EANR,QAOaC,SAGTT,IAVJ,kBAaSQ,GAbT,0C,+KADgB,sDAgBhB,CAACV,EAAUJ,EAAaE,K,+lCCzB5B,IAAMc,GAAO,gDAcPC,GAAW,qDAcXC,GAAgB,yDAOhBC,GAAM,+CAQNC,GAAW,oDAYXC,GAAO,iDAIPC,GAAW,oDAcX5B,GAAY,qDAWL6B,EAAmD,SAAC,GAK3D,IAL2D,EAK3D,EAL2D,YAK3D,EAL2D,YAK3D,EAL2D,QAI/DC,EACI,EADJA,MAEMC,EAAoB1B,IAC1B,KAAsC2B,EAAAA,EAAAA,WAAtC,MAAM,EAAN,KAAM,EAAN,KAMMC,EAA4B,e,EAAA,G,EAAA,yBAAG,6GAEjCC,GAAAA,GAFiC,SAG3BH,EAAkB,CAAEvB,UAAAA,IAHO,sDAKjC2B,QAAAA,IAAAA,EAAAA,IALiC,uBAOjCD,GAAAA,GAPiC,oBAUnCE,YAAW,WACTC,EAAAA,KAAAA,cADFD,KAIAN,IAdmC,6D,+KAAH,qDAiBlC,OACE,wBACE,sBACE,YAAkB1B,KAAlB,cAEF,qCAAQ,EAAR,gBACA,uKAIA,wBACE,YAAakC,SAAb,EAAoCC,QAApC,oCAGA,YAAcC,WAAd,EAAwBF,SAAxB,EAA+CC,QAnCtB,WAC7BT,KAkCI,2B,gHCnIFR,GAAO,gDAePC,GAAW,qDAcXkB,GAAU,mDAOVhB,GAAM,+CAQNC,GAAW,qDAaXC,GAAO,iDAIPe,GAAY,oDAWLC,EAAuC,SAAC,GAAkC,IAAlC,EAAkC,EAAlC,OAAkC,EAAlC,SAAkC,EAAlC,KAAsBb,EAAY,EAAZA,MAKzE,OACE,wBACE,sBACE,YAAY1B,KAAZ,OAEF,qBAAQ,KACR,qBAAa,KACb,sBACE,YAAcwC,SAAd,EAAsBL,QAZG,WAC7BT,KAWI,sB,2HCrFFR,GAAO,gDAaPG,GAAM,gDAWNC,GAAW,qDAOXC,GAAO,gDAQP3B,GAAY,oDAIZ6C,GAAW,wDA0BXC,GAAS,iDASFC,EAAkC,SAAC,GAAc,IAAZjB,EAAY,EAAZA,MACxCkB,GAAmBC,EAAAA,EAAAA,MAAnBD,eAWR,OACE,wBACE,sDACA,kIAIA,sBACE,YAAcJ,SAAd,EAAsBL,QAjBG,WAC7BS,EAAe,CAAEE,4BAA4B,IAC7CpB,GAAAA,IAeI,2CAIF,YAAaqB,KAAb,SAA2BZ,QAhBN,WACvBT,KAeE,UACE,YAAW1B,KAAX,gB,kRCpGFkB,GAAO,iDAaP8B,GAAW,oDAMXC,GAAI,6CAKJC,GAAG,6CAWHC,GAAM,+CAiBCC,EAA4C,SAAC,GAAyC,QAAzC,EAAyC,EAAzC,eAAyC,EAAzC,QAAyBC,EAAgB,EAAhBA,UAOzEC,EAAR,EAAQA,QAER,OACE,YAASnB,QATS,WAClB,GACEA,EAAAA,IAO6BkB,UAA/B,YACE,uBACGC,GACC,cAAUC,MAAV,GAAqBC,OAArB,GAAiCC,aAD3B,MAGN,cAAaC,KAAb,GAAuBC,MAAA,UAAOC,EAAAA,eAAP,aAAOA,EAHhC,SAKA,wBACE,qBACGN,GACC,cAAUC,MAAV,IAAsBC,OADhB,MAGN,wCAAGI,EAAAA,eAAH,aAAGA,EAHL,mBAMF,qBACGN,GACC,cAAUC,MAAV,GAAqBC,OADf,KAEJI,EAAAA,SACF,cAAWC,MAAOD,EADhBA,WAFJ,8B,y9BCtEZ,IAAM1C,GAAO,gDAIP4C,GAAW,qDAiBXC,GAAe,yDAKfC,GAAW,oDAOXC,GAAI,8CAIJC,GAAI,8CAcJC,GAAW,mDAaXC,GAAqB,+DAerBC,GAAc,wDAMdC,GAAY,sDAiBLC,EAA4B,SAAC,GAAyD,IAAzD,EAAyD,EAAzD,gBAAyD,EAAzD,qBAAuCC,EAAkB,EAAlBA,YACzEC,GAAcC,EAAAA,EAAAA,QAApB,MACMC,GAAcD,EAAAA,EAAAA,QAApB,MACME,GAAUF,EAAAA,EAAAA,QAAhB,MAEA,KAA4B9C,EAAAA,EAAAA,WAA5B,MAAM,EAAN,KAAM,EAAN,KACA,KAA4BA,EAAAA,EAAAA,UAA5B,OAAM,EAAN,KAAM,EAAN,KAEMiD,GAAUC,EAAAA,EAAAA,UAAQ,WACtB,OAAOC,EAAAA,KAAmBnB,SAAAA,GAAD,uBAAkBA,EAAAA,eAAlB,aAAkBA,EAAAA,MAA3C,YACC,CAFH,IAGMoB,GAAUC,EAAAA,EAAAA,IAAhB,GAEMC,EAAkB,SAACC,GAAkB,QAEvC,UAACV,EAAAA,eAAD,OAACA,EAAAA,SAA8BU,EAA/B,SACA,UAACR,EAAAA,eAAD,OAACA,EAAAA,SAA8BQ,EAFjC,SAIEC,GAAAA,KAIJC,EAAAA,EAAAA,YAAU,WAGR,OAFAC,OAAAA,iBAAAA,QAAAA,GAAAA,GAEO,WACLA,OAAAA,oBAAAA,QAAAA,GAAAA,MAJJD,IAQA,IAMME,GAAwBT,EAAAA,EAAAA,UAAQ,WACpC,SAI4BC,EAAAA,QAAsBS,SAAAA,GAAD,uBAAaA,EAAAA,eAAb,aAAaA,EAAAA,YAA9D,MAEOC,QAEFD,SAAAA,GAAD,OACEA,EAAAA,WACCE,EAAAA,EAAAA,IAAcF,EAAAA,QAAAA,MAAD,OAAbE,KACCA,EAAAA,EAAAA,IAAcF,EAAAA,QAAAA,MAAD,KALdC,OAAAA,MAOCE,EAAAA,EAAAA,IAPR,IALE,KAaD,CAACZ,EAAea,EAfnB,IAiBMC,EAA0B,SAACC,GAAmC,MAC7DA,EAAL,UAIAV,GAAAA,GACAW,EAAoB,UAACD,EAAAA,eAAD,aAACA,EAAD,MAApBC,KAGF,OACE,wBACE,aACEC,IADF,EAEE7D,QAAS,kBAAMiD,GAAWa,SAAAA,GAAD,OAF3B,MAGE5C,UAAW6C,GAAAA,CAAW,CAAEC,OAAAA,IAH1B,WAKE,wBACE,0BACE,cAAaC,OAAb,MAA0B1C,KAA1B,QAEF,wBACE,wBACE,YAAML,UAAN,2CADF,KACuD,oCAEvD,wBACE,YAAMA,UAAN,8BADF,KAC0C,8CAI9C,YAAarD,KAAb,UAA4BqD,UAAW6C,GAAAA,CAAW,CAAEC,OAAAA,SAErDA,GACC,aAAuBH,IAAvB,aACE,sBACE,cACEK,YADF,mBAEExC,MAFF,EAGEyC,SA5De,SAACzC,GAC1B,IAAM0C,EAAa1C,EAAnB,OAEA2C,EAAAA,SA4DM,aAAcR,IAAd,EAA4B3C,UAAW6C,GAAAA,CAAW,CAAE1B,YAAAA,IAApD,UACGe,MAAAA,GAAAA,EAAAA,QACC,8BACGA,EAAAA,KACEC,SAAAA,GAAD,OACEA,EAAAA,MACE,YAEE5B,aAFF,EAGEzB,QANR,GAIaqD,EAAAA,IADP,sBALV,EAcED,MAAAA,GAAAA,EAAD,YAAD,GAAkC,cAAOxC,KAAxC,sBAxBP,M,SC5MN,IAIM0D,EAAoB,SAACC,GACzB,IAAMC,EAAUC,KAAKC,MAAOH,EAAe,IAAQ,IAC7CI,EAAUF,KAAKC,MAAOH,EAAe,IAAO,GAAM,IAElDK,EARS,SAACL,GAChB,OAAOE,KAAKC,MAAMH,EAAe,MAOnBM,CAASN,GACvB,MAAO,CAAEK,MAAAA,EAAOD,QAAAA,EAASH,QAAAA,IAGrBM,EAAM,SAACpD,GACX,OAAOqD,OAAOrD,GAAOsD,SAAS,EAAG,M,g9BCF5B,IAAMC,EAA0B,SAAC,GAAqB,ICP7BC,EAAsBC,EAC9CC,EDMkCb,EAAmB,EAAnBA,aACxC,KAA0B9E,EAAAA,EAAAA,UAAS8E,GAAnC,GAAOc,EAAP,KAAcC,EAAd,KCR8BJ,EDUd,WACVG,EAAQ,GACVC,GAAS,SAACC,GAAD,OAAQA,EAAK,QCZ0BJ,EDcjD,ICbGC,GAAgB7C,EAAAA,EAAAA,QAAO2C,IAE7BhC,EAAAA,EAAAA,YAAU,WACRkC,EAAcI,QAAUN,IACvB,CAACA,KAEJhC,EAAAA,EAAAA,YAAU,WAIR,GAAc,OAAViC,EAAgB,CAClB,IAAMM,EAAKC,aAJb,WACEN,EAAcI,YAGeL,GAC7B,OAAO,kBAAMQ,cAAcF,OAE5B,CAACN,IDCJ,IAAMS,EDJuB,SAACrB,GAC9B,MAAoCD,EAAkBC,GAA9CK,EAAR,EAAQA,MAAOD,EAAf,EAAeA,QAASH,EAAxB,EAAwBA,QACxB,gBAAUM,EAAIF,GAAd,YAAwBE,EAAIH,GAA5B,YAAwCG,EAAIN,ICE/BqB,CAAgBR,GAE7B,OAAO,4BAASO,K,iEElBLE,GAAY,mDAIZC,GAAO,iDAMPC,GAAI,4CAOJC,IAAG,2C,ulCCIT,IAAMC,GAAoB,SAAC,GAAc,IAAZ3G,EAAY,EAAZA,MAC5B4G,GAAiBnI,EAAAA,EAAAA,KACjBoI,GAAUC,EAAAA,EAAAA,KACVzD,GAAgB0D,EAAAA,EAAAA,MACdC,GAAeC,EAAAA,EAAAA,MAAfD,WAGR,MAAgC9G,EAAAA,EAAAA,WAAhC,MAAM,GAAN,WAWMgH,EAAwB,e,EAAA,G,EAAA,yBAAG,6GAE7BC,GAAAA,GAF6B,SAGvB,IAAI,EAAJ,oCAAiEC,EAAAA,GAAAA,OAH1C,OAI7BpH,GAAAA,GAJ6B,gDAM7BqH,EAAAA,EAAAA,MAAmB,KAAnBA,SACAhH,QAAAA,MAAAA,EAAAA,IAP6B,yBAS7B8G,GAAAA,GAT6B,2E,iLAAH,qDAa9B,OACE,YACEG,MADF,gCAEEC,YAFF,yCAGEC,SAHF,QAIEC,gBAJF,UAKEzH,MAAO,kBAAMA,GALf,IAME0H,QACE,iCACE,eAAQ5G,SAAR,EAAgBL,QAAhB,4CAGA,cAAcA,QAAS,kBAAMT,GAA7B,SAXN,UAeE,wBACE,sBACE,gGACuE,KACrE,+DAFF,yDAOF,eAAS1B,KAAT,eACE,YACE+E,cADF,EAEEgB,qBAlD0B,SAAC,EAAD,GAI7BD,MAAAA,GAAAA,EAAL,KA+CQtB,aAHF,OAOF,wBACE,iDACuB,6CADvB,qDAIA,0DACgC,6CADhC,QAGA,yBACE,6BACE,YAAckC,cAAc2C,EAAAA,EAAAA,IAA5B,OAFJ,gE,WCtFGC,GAAmB,SAAC,GAAc,IAAZ5H,EAAY,EAAZA,MAC3BO,GAAUsH,EAAAA,GAAAA,MAOhB,OACE,YACEP,MADF,gCAEEC,YAFF,yCAGEC,SAHF,QAIEC,gBAJF,UAKEzH,MAAO,kBAAMA,GALf,IAME0H,QACE,iCACE,eAAQ5G,SAAR,EAAgBL,QAdC,WACvBT,GAAAA,GACAO,EAAAA,KAAAA,SAYM,kCAGA,cAAcE,QAAS,kBAAMT,GAA7B,SAXN,UAeE,sBACE,wBACE,8BACI,2DADJ,qDAIA,gGACuE,KACrE,+DAFF,QAIA,gCACM,iDADN,oHC9BG8H,GAA0D,SAAC3J,GAAU,QAKhF,OAJoB,oBAAGA,EAAM4J,qBAAT,aAAG,EAAqBC,QAAQC,kBAAhC,QAA8C,GACnC9J,EAAM+J,qBAAqBD,YAIjD,SAACtB,GAAD,CAAQ3G,MAAO7B,EAAM6B,SAGvB,SAAC4H,GAAD,CAAO5H,MAAO7B,EAAM6B,U,2FCdhBmI,EAAoD,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MAAOpI,EAAmB,EAAnBA,MAAOsH,EAAY,EAAZA,MAChF,OACE,SAACe,EAAA,EAAD,CAAOC,aAAa,EAAOtI,MAAOA,EAAOsH,MAAOA,EAAhD,SACGc,M,6JCPM5B,GAAO,gDA2BP+B,GAAS,mDASTC,GAAU,mDAOV/I,GAAW,oDAWX6C,GAAW,oDAQXmG,GAAS,kDAaTC,GAAQ,6CAMRC,GAAE,4CAMFC,GAAS,mD,4CCvFhBC,GAAO,iDAyBPC,GAAQ,mDAcDC,EAAyB,SAAC,GAOjC,IAPiC,EAOjC,EAPiC,UAOjC,EAPiC,QAOjC,EAPiC,SAOjC,EAPiC,IAOjC,IAFJC,KAAAA,OAEI,SADJrH,EACI,EADJA,UAEA,OACE,aAAS2F,MAAT,EAAyB3F,UAAW6C,GAAAA,CAAW7C,EAAW,CAAEqH,KAAAA,EAAMC,MAAAA,EAAOC,OAAAA,EAAQC,IAAAA,IAAjF,WACE,qBAAWC,EAAAA,MAAAA,EAAD,KACTA,EAAAA,MAAAA,GAAD,IACA,qBAAWA,EAAAA,OAAD,S,wDCtCVC,GAAW,qDAIXC,GAAe,sDAMRC,EAAkD,SAAC,GAA0B,IAA1B,EAA0B,EAA1B,UAAaC,EAAa,EAAbA,OAK3E,OACE,gBACElC,OACE,cACEA,MADF,sBAEEmC,gBAFF,QAGEC,kBAAkBC,MAAAA,OAAAA,EAAAA,EAAAA,QAAAA,cALxB,KAQEC,MARF,EASEC,kBATF,aAWE,yBACE,2BACE,eAAMlI,UAAN,6BACA,wBACE,wBAAOgI,MAAAA,OAAP,EAAOA,EAAAA,QAAD,iBACN,YAAiBG,OAAjB,KAA6BC,QAA7B,IAAyC5H,OAAOwH,MAAAA,OAAAA,EAAAA,EAAAA,eAAhD,aAgCN,eAAahI,UAAb,kBACE,2BACE,mCACA,wBACE,wBAAOgI,MAAAA,OAAP,EAAOA,EAAAA,QAAD,eACN,YAAiBG,OAAjB,KAA6BC,QAA7B,IAAyC5H,OAAOwH,MAAAA,OAAAA,EAAAA,EAAAA,eAAhD,gB,SC7DZ,IAAMK,GAAY,qDAOZC,GAAgB,0DAqChBC,GAAS,kDAgBFC,EAA4C,SAAC,GAAsC,YAAtC,EAAsC,EAAtC,SAAsC,EAAtC,UAAqBC,EAAiB,EAAjBA,WACvEhB,GAAUnK,QAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,GAAAA,QAAAA,EAAAA,EAAAA,gBAAAA,IAAAA,OAAAA,EAAAA,EAAAA,KAAAA,KAAhB,EACMoL,EAAa,WAAWC,KAAKrL,EAAAA,UAAnC,IAEA,OACE,aAAS0C,UAAT,kBACE,4BACE,wBACE,cACE+C,OAAA,UAAQzF,EAAAA,OAAAA,eAAR,aAAQA,EAAAA,MADV,OAEEmK,QAAA,UAASnK,EAAAA,OAAAA,eAAT,aAASA,EAAAA,MAFX,QAGE+C,KAHF,MAKA,wBACE,qBAAY/C,EAAAA,OAAD,iBACX,sBACE,cAAWkD,MAAOlD,EAAlB,kBAIN,sBACE,sBACE,YAAWX,KAAX,oBAGJ,wBACE,sBACE,YAAYA,KAAZ,cAEF,uBACGW,EAAAA,UACC,wBACE,4BACCoL,EAAapL,EAAH,mBAAwBA,EAAnC,SAAW,gBAGb,YAAW0C,UANb,YAME,yBAEF,qBAAYyH,IAAW,YAAaA,QAAb,EAA+BF,QAA3C,gBAKjB,YAAoBS,UAApB,EAA0CH,OAAQvK,EAAlD,a,klCCvGN,IAAMsH,GAAY,mDAIZgE,GAAU,oDAOVC,GAAQ,kDAWRC,GAAW,oDAUXC,GAAmB,0DAInBC,GAAQ,iDAeDC,EAET,SAAC,GAA6D,IAoCtC,EApCvB,EAA6D,EAA7D,OAA6D,EAA7D,SAA6D,EAA7D,QAA6D,EAA7D,aAA6D,EAA7D,SAA6CjB,EAAgB,EAAhBA,UACxCkB,GAAuBlM,EAAAA,EAAAA,MAAvBkM,mBACFC,GAA2BC,EAAAA,EAAAA,MAEjC,KAAgC7K,EAAAA,EAAAA,UAAhC,OAAM,EAAN,KAAM,EAAN,KACA,KAAgCA,EAAAA,EAAAA,WAAhC,MAAM,EAAN,KAAM,EAAN,KAEM8K,EAAgB,e,EAAA,G,EAAA,yBAAG,uHAEfF,EAAN,GAFqB,OAGrBG,GAAAA,GAHqB,+CAKrBA,GAAAA,GALqB,uD,+KAAH,sDAiBhBC,EAAqB,WACzBlL,GAAAA,IAGImL,EAAmB,WACvBnL,GAAAA,IAGIoL,GACJP,MAAAA,OAAAA,EAAAA,EAAAA,QAA6BQ,EAAAA,GAAyBC,EAAAA,GAAAA,WADxD,KAEMC,EAAaH,KAAuBI,GAA1C,GAgDA,OACE,aACElE,MA9CA,SADF,GAEW,oDAA6BrI,EAAAA,OAAAA,eAA7B,aAA6BA,EAAAA,MAApC,WAGE,2CACoBwM,EAAAA,MAAD,eADnB,MACsDA,EAAAA,MAAD,mBA0CzDzL,MAFF,EAGE0H,OArCkB,WACpB,MAEA,GACE,SADF,EAEIgE,GACE,iCACE,YAAUpN,KAAV,SADF,QAEQmN,EAAAA,MAAD,eAFP,MAE0CA,EAAAA,MAAD,wBAM3CC,GACE,iCACE,YAAUpN,KAAV,QADF,QAEQW,EAAAA,OAAD,iBAMb,OACE,iCACE,eAAQ6B,SAAR,EAAgBN,SAAhB,EAAsCC,QAAtC,WACE,KAEF,cAAcA,QAAd,OASMkL,GACRrD,aAJF,YAMGjH,SAAAA,GAAkB,SAAlBA,EAAkB,yCAAnB,EACCA,SAAAA,GACC,YAAMpC,OAAN,EAAsB0K,UAAtB,EAA4CS,WAD7C/I,SAAD,EAOC+J,GACC,aAASzJ,UAAT,sBACE,oDACA,YACEQ,MADF,EAEEyC,SAtFmB,SAACzC,GAC5ByJ,EAAAA,GAEA,GACOZ,EAAL,IAmFMa,QAHF,IAKCC,GAAW,cAAWzN,MAAX,8BAA+C0N,QAAlD,SAAT,UARJ,M,2sCC5HN,IAAMC,GAAa,sDAObC,GAAM,+CAeNC,GAAe,yDAiBfC,GAAe,uDAMfC,GAAa,uDAEb7D,GAAS,kDAKT8D,GAAc,wDAQdC,GAAY,sDAOZC,GAAY,sDAOZC,GAAiB,0DAKjBC,GAAW,qDAWXC,GAAY,oDAaLC,EAAqC,SAAC,GAAgD,oCAAhD,EAAgD,EAAhD,YAAgD,EAAnCC,OAAuB5M,EAAY,EAAZA,MACrF,KAAwCE,EAAAA,EAAAA,WAAxC,MAAM,EAAN,KAAM,EAAN,KACQ2G,GAAYlI,EAAAA,EAAAA,MAAZkI,QACFgG,GAAcC,EAAAA,EAAAA,IAAeC,EAAnC,GAEMC,GAAqBC,EAAAA,EAAAA,IAAgBC,EAAAA,EAAAA,IAAUL,MAAAA,GAAD,UAACA,EAAAA,YAAD,aAACA,EAArD,SACMM,GAA0BF,EAAAA,EAAAA,IAAgBC,EAAAA,EAAAA,IAAUL,MAAAA,GAAD,UAACA,EAAAA,YAAD,aAACA,EAA1D,cAEMO,GAAcC,EAAAA,EAAAA,KAClBH,EAAAA,EAAAA,IAAUL,MAAAA,OAAD,EAACA,EAAAA,QAD6B,cAEvCA,MAAAA,OAFuC,EAEvCA,EAAAA,QAV+F,QA4BjG,GAAIA,MAAAA,GAAAA,EAAJ,QACE,YAGF,IAqEgC,MAMT,MALfxL,GAEAiM,GACAC,GA+EFC,GAAOX,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,WAAAA,IAAAA,GAAAA,EAAAA,UACTY,IAAAA,KAAWZ,EAAAA,IAAXY,WAAAA,OADSZ,OAAAA,GAAAA,OAENA,MAAAA,GAFMA,QAAAA,EAENA,EAAAA,WAFMA,IAAAA,OAAAA,EAENA,EAFP,KAAaA,SAIPa,IACJb,MAAAA,OAAAA,EAAAA,EAAAA,gBAAAA,EAAAA,IAAoDA,EAAAA,KADtD,gBAGA,OACE,gBAAc7M,MAAd,aACE,wBACE,yBAAQ2N,EAAAA,EAAAA,IAAUd,MAAAA,OAAD,EAACA,EAAAA,QAAX,SACP,eAAMvF,MAAA,UAAUuF,MAAAA,GAAV,UAAUA,EAAAA,WAAV,aAAUA,EAAhB,KAAM,SAAN,SAA+C,MAC/C,eAAcpM,QAAd,YACE,eAAWnC,KAAX,gBAGJ,mBACA,2BAnGI+C,GAAOwL,MAAAA,OAAH,EAAGA,EAAAA,QAAb,KAEMS,GAAcN,MAAAA,GAAH,WAAGA,EAAAA,eAAH,cAAGA,GAApB,MACMO,GAAmBJ,MAAAA,GAAH,WAAGA,EAAAA,eAAH,cAAGA,GAAzB,MAEA,SAAI9L,IAEA,2BACE,yBACE,0BACG2L,MAAAA,GAAAA,EAAAA,SACC,cAAUnL,MAAV,GAAqBC,OAArB,GAAiCC,aADlCiL,MAGC,cACEtI,OAAQ4I,MAAAA,QAAR,EAAQA,GADV,OAEElE,QAASkE,MAAAA,QAAT,EAASA,GAFX,QAGEtL,KANJ,MASA,wBACGgL,MAAAA,GAAAA,EAAAA,SACC,cAAUnL,MAAV,GAAqBC,OADtBkL,MAGC,qCAAKA,MAAAA,GAAL,WAAKA,EAAAA,eAAL,cAAKA,GAHP,yBAQN,yBACE,eAAU1O,KAAV,YAEF,yBACE,0BACG6O,MAAAA,GAAAA,EAAAA,SACC,cAAUtL,MAAV,GAAqBC,OAArB,GAAiCC,aADlCoL,MAGC,cACEzI,OAAQ6I,MAAAA,QAAR,EAAQA,GADV,OAEEnE,QAASmE,MAAAA,QAAT,EAASA,GAFX,QAGEvL,KANJ,MASA,wBACGgL,MAAAA,GAAAA,EAAAA,SACC,cAAUnL,MAAV,GAAqBC,OADtBkL,MAGC,qCAAKG,MAAAA,GAAL,WAAKA,EAAAA,eAAL,cAAKA,GAHP,2BAYRN,MAAAA,GAAAA,EAAAA,SAAwBG,MAAAA,GAAAA,EAAxBH,SAAuDO,EAA3D,SAEI,yBACE,cAAUvL,MAAV,GAAqBC,OAArB,OAKFsL,EAAJ,SAEI,2BACE,0BACGP,MAAAA,GAAAA,EAAAA,QAAAA,WAAAA,IAAD,IADF,IACiDO,EAAAA,QAAD,kBAEhD,yBACE,cACEtD,OAAQ+C,MAAAA,GAAAA,EAAAA,QAAAA,WAAAA,KADV,KAEE1K,MAAOiL,EAFT,eASR,OAsCI,sBACE,wBACE,YACEzL,UAAW6C,GAAAA,CAAW,CACpBnG,QAASwO,MAAAA,GAAD,UAACA,EAAAA,WAAD,iBAACA,EAAAA,YAAD,QAACA,EADW,SAItB,IACDA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,WAAAA,IAAAA,GAAAA,QAAAA,EAAAA,EAAAA,YAAAA,IAAAA,GAAAA,EAAAA,IAAAA,SAEIA,MAAAA,GAAD,UAACA,EAAAA,WAAD,OAACA,EAAD,KAFJ,YAEI,gBAKR,0BACGe,GACC,gCAxMW,WAAM,YACnBvM,EAAOwL,MAAAA,OAAH,EAAGA,EAAAA,QAAb,KAEMD,EAASC,MAAAA,GAAH,UAAGA,EAAAA,YAAH,aAAGA,EAAf,OACMgB,EAAchB,MAAAA,GAAH,UAAGA,EAAAA,YAAH,aAAGA,EAApB,YACMS,EAAcN,MAAAA,GAAH,UAAGA,EAAAA,eAAH,aAAGA,EAApB,MACMO,EAAmBJ,MAAAA,GAAH,UAAGA,EAAAA,eAAH,aAAGA,EAAzB,MAEA,eAAI9L,GAEA,gCACGuL,GACC,2BACE,kCACA,wBAAY,YAHhB,EAMCiB,GACC,2BACE,gCACA,wBAAY,YAHhB,KAUFxM,IAAUuL,GAAD,GAA4BiB,GAAzC,IAEI,uBACGjB,GAAAA,GACC,wBACE,kCACA,wBACE,cAAalI,OAAQ4I,EAArB,OAAyClE,QAASkE,EAAlD,QAAuEtL,KAAvE,MACA,wBACE,qBAAesL,EAAD,UACd,sBAAeQ,EAAAA,EAAAA,IAAD,mBAPtB,EAYCD,GAAAA,GACC,wBACE,gCACA,wBACE,cACEnJ,OAAQ6I,EADV,OAEEnE,QAASmE,EAFX,QAGEvL,KAHF,MAKA,wBACE,qBAAeuL,EAAD,UACd,sBAAeO,EAAAA,EAAAA,IAAD,mBAXtB,KAoBN,KA2IWC,GACCf,MAAAA,GAAAA,EAAAA,SAAAA,MAA+BG,GAAAA,EAAhC,SACDC,MAAAA,GAAAA,EADC,SAEC,2BACE,oCACA,yBACGP,MAAAA,OAAAA,EAAAA,EAAAA,gBAAAA,EAAAA,IACC,gCACGG,MAAAA,GADH,UACGA,EAAAA,eADH,aACGA,EAAD,cADF,MACiD,IAC9CG,MAAAA,GAFH,UAEGA,EAAAA,eAFH,aAEGA,EAAD,kBAGF,8BAAGC,MAAAA,GAAH,UAAGA,EAAAA,eAAH,aAAGA,EANL,0BALN,EAgBCA,EAAAA,SACC,2BACE,mCACA,yBACE,cAAWjL,MAAOiL,EAAlB,oBAJN,EAQCP,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,WAAAA,IAAAA,GAAAA,EAAAA,MACC,2BACE,wBACE,4CACCa,IAAiB,SAAH,EAAG,mCAAlB,MAEF,2BAAaM,EAAAA,EAAAA,IAAY,UAACnB,EAAAA,IAAAA,YAAD,aAACA,EAAd,KAAZ,kBANJ,MASA,2BACE,0CACA,8BAAcA,MAAAA,GAAd,UAAcA,EAAAA,WAAd,aAAcA,EAAD,mBAtCnB,GA0CA,2BACE,4CACA,0BACE,EAAW,KACX,cACEoB,MAAMC,EAAAA,EAAAA,GAAe,KAAMnB,EAD7B,GAEEoB,OAFF,SAGEC,IAHF,8BAIEzM,UAJF,mBAME,yBACE,eAAWrD,KAAX,8BAOZ,eAAQqD,UAAW6C,GAAAA,CAAW,CAAE6J,YAAY,IAA5C,UACE,eAAgBC,WAAhB,EAA0B7N,QAxQK,WACnC8N,GAAgBhK,SAAAA,GAAD,OAAfgK,MAuQI,SACGX,EAAgB,2BAAjB,mC,6rBC/bGY,GAAY,sDAcZjI,GAAY,mDAyBZkI,GAAe,yDA6Bf9O,GAAM,gDAWN+O,GAAK,8CAWLC,GAAI,8CAOJC,GAAY,sDAiBZ5N,GAAS,kDAoBT6N,GAAO,iDAIPC,GAAW,mDAOXC,GAAa,sDAObC,GAAa,uDASbC,GAAW,oDAOXC,GAAU,mDAcVC,GAAQ,kDAMRC,GAAS,mDAaTC,GAAQ,gDAORC,GAAU,mDASVC,GAAa,uDAEbC,GAAY,sDAYZC,GAAU,oDAOVC,GAAU,oDAUVC,GAAS,iDAOTC,GAAY,qDAsBZC,GAAM,+CAiBNC,GAAc,uD,giEC5R3B,IAAMC,EAASC,GAAAA,CAAa,IAAD,MAA3B,KAEMC,GAAwBC,EAAAA,EAAAA,GAA9B,MAKMC,GAAmB,QAAU,gBAAMhS,EAAN,eAAkB,gBAA5B,sEAGT,qBAAGiS,OAAuB,SAHjB,cA0CnBC,GAAM,gDAoBN1Q,GAAM,+CAWN2Q,GAAS,kDA2BT7Q,GAAW,oDAsBX8Q,GAAU,kDAYV7B,GAAK,8CAQL9O,GAAW,qDAQXoB,GAAS,iDAaF6N,GAAO,gDAQdgB,GAAM,gDA0BCxH,EAAuC,SAAC,GAa/C,IAb+C,EAa/C,EAb+C,QAa/C,EAb+C,cAa/C,EAb+C,SAa/C,EAb+C,WAa/C,EAb+C,kBAa/C,EAb+C,cAa/C,EAb+C,QAa/C,EAb+C,+BAa/C,EAb+C,UAYnDmI,EACI,EADJA,SAEA,KAA4BtQ,EAAAA,EAAAA,WAA5B,MAAM,EAAN,KAAM,EAAN,KACMuQ,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAc7N,EAAAA,EAAAA,QAAO2N,EAA3B,WAEAhN,EAAAA,EAAAA,YAAU,WACJ8M,IAAAA,GAA6CI,EAAAA,UAAwBF,EAAzE,UACE3Q,MAED,CAACyQ,EAAUK,EAA8BH,EAJ5ChN,YAMAA,EAAAA,EAAAA,YAAU,WAGR,OAFAD,GAAAA,GAEO,WACLA,GAAAA,MAJJC,IAQA,IAAMoN,GAAS3N,EAAAA,EAAAA,UAAQ,WACrB,SACS,CACL2N,OAAQ,CAAEC,SAAF,IAAiBjB,OAAQ,mBAAeA,EAAOkB,KACvDC,KAAM,CAAEC,UAAW,qBACnBC,MAAO,CAAED,UAAW,iBACpBE,MAAO,CAAEF,UAAW,sBAIjB,KAMN,CAhBH,IAkBMG,GAAiBC,EAAAA,EAAAA,IAAc9M,EAAQ,KAA7C,GAEA,KAAqB+M,EAAAA,EAAAA,KAAU,iBAAO,CAAEC,EAAF,EAAQV,OAAQ,CAAEW,KAAF,EAAWC,QAAX,IAAyBC,SAAU,QAAzF,GAASH,EAAT,KAASA,EAAH,EAAN,KACMI,GAAOC,EAAAA,EAAAA,UAASvN,SAAAA,GACpBwN,EAAI,CACFN,EAAGlN,EAAAA,KAAaA,EAAAA,SAAbA,GAAiC,KAGpCA,EAAAA,SAAAA,GAnQN,KAoQOA,EAAAA,SAAAA,GAnQP,GAmQsDA,EAAAA,UAAAA,GAFlD,IAIEvE,OAIJ,OACE,8BACGsR,EAAAA,KACC,gBAAC,EAAD,EAAC,OAAD,EAAC,IAAanT,EAAd,EAAcA,MAAd,OACE6T,IACE,mBAEOvB,EAAQ,OAEJoB,KAFI,IAGPI,MAAO,EAAF,KAAE,GAAF,IAEHd,UAAWM,EAAAA,aAAeS,SAAAA,GAAD,2BAAqB,MAAnCT,EAAc,cAG7B,CACEQ,MAAO9T,IAXf,IAaE,aAbF,SAcEwD,UAdF,YAgBG8O,GAAW,SAAH,EAAG,SAAZ,EACCnJ,GAAAA,GACC,uBACGA,GAAQ,qBAAH,SAAN,EACCC,GAAc,qBAAH,SAAZ,EACEkJ,OAAF,GAAa,YAAWnS,KAAX,QAAwBmC,QAApC,YAJL,EAOE6H,OAAF,GACE,YAAW3G,UAAW6C,GAAAA,CAAW,CAAE2N,QAASC,QAAQ5K,KAApD,SACGA,GACC,YAAa7F,UAAb,YACE,YAAYrD,KAAZ,WAFJ,IAOHkS,GAAW,qBAAH,SAAT,EACC9I,GAAS,qBAAH,SAAP,KAlCF,S,myBC5RZ,IAAMzJ,GAAU,mDAQHC,EAA2BC,SAAAA,GACtC,OACE,6BAAmBC,QAAnB,EAA0BC,OAA1B,aACE,YAAYC,KAAZ,UADF,c,mGCXEkB,GAAO,gDAWP6S,GAAW,mDAaJC,EAAuB,SAAC,GAAsB,IAAtB,EAAsB,EAAtB,MAASvG,EAAa,EAAbA,OAC5C,OACE,uBACIA,OAAF,GAAW,YAAazN,KAAvB,YACD,M,qrECxBN,IAAMiU,GAAY,uDAuBZC,GAAK,iDA0BLC,GAAU,oDAIVC,GAAO,+CAOPC,EAAN,2CAOaC,EAET,SAAC,GAAgE,IAAhE,EAAgE,EAAhE,WAAgE,EAAhE,UAAgE,EAAhE,SAAgE,EAAhE,YAAgE,EAAhE,QAAoDzU,EAAY,OACnE,KAA4C+B,EAAAA,EAAAA,WAA5C,MAAM,EAAN,KAAM,EAAN,KACA,KAAkCA,EAAAA,EAAAA,WAAlC,MAAM,EAAN,KAAM,EAAN,KA2BA,OACE,aAAcyB,UAAW6C,GAAAA,CAAW7C,EAAW,CAAEkR,UAAAA,EAAWhH,QAAAA,IAA5D,WACE,gBACExK,KAAMyR,EAAiB,QADzB,mBAGEnO,YAHF,WAIEC,SA/Be,SAACnB,GACpB,IAAMtB,EAAQsB,EAAAA,OAAAA,MAAAA,QAAAA,EAAd,IACAmB,EAAAA,IA8BImO,QA3Bc,SAACtP,GACnBuP,GAAAA,GAEA,GACED,EAAAA,IAwBEE,OApBa,SAACxP,GAClBuP,GAAAA,GAEA,GACEC,EAAAA,QAkBA,YAAYxS,QAdiB,WAC/ByS,GAAmB3O,SAAAA,GAAD,OAAlB2O,MAaE,UACE,YAAS5U,KAAMwU,EAAiB,MAAhC,mB,qIC/GFtT,GAAO,gDA0BPC,GAAW,oDAWX8Q,GAAU,mDASH4C,EAA0B,SAAC,GAAgC,IAAhC,EAAgC,EAAhC,OAAgC,EAAhC,QAAiB3C,EAAe,EAAfA,SACvD,OACE,aAAS/P,QAAT,aACE,sBACE,YAAYnC,KAAZ,MAEF,M,uBClDAuQ,GAAO,iDAWAuE,EAAiD,SAAC,GAA+B,IAA/B,EAA+B,EAA/B,MAASC,EAAsB,EAAtBA,gBAChE9S,GAAUsH,EAAAA,EAAAA,MACV8I,GAAWC,EAAAA,EAAAA,MAEX0C,EAAoB,SAACC,GAAD,OAAmB,WAC3CvT,GAAAA,GAEI2Q,EAAAA,WAAJ,GACEpQ,EAAAA,KAAAA,EAAoB,CAAEiT,SAAU7C,EAAS8C,aAa7C,OACE,cAAOzT,MALgB,WACvBA,GAAAA,IAIgCsI,aAAhC,YACE,wBACE,YAAcoL,KAAd,OAA0BjT,QAZH,WAC3BT,GAAAA,GACAqT,EAAAA,iCAUI,kBAGA,YAAcK,KAAd,SAA4BjT,QAAS6S,EAArC,kCAGA,YAAcI,KAAd,MAAyBjT,QAAS6S,EAAlC,4BAGA,YAAcI,KAAd,OAA0BjT,QAAS6S,EAAnC,iC,4JC5CF9T,GAAO,iDAYAmU,EAAuB,SAAC,GAA+B,IAA/B,EAA+B,EAA/B,SAA+B,EAA/B,MAAiBlT,EAAc,EAAdA,QACpD,OACE,YAASA,QAAT,WACGwB,GACC,cAAsBA,MAAtB,EAAoC2R,oBADhC,KAGJ,cAAuBC,OAAvB,EAAuCD,oBAHzC,O,y0EChBC,IAAME,GADZC,EAAAA,EAAAA,KACD,qJ,+QAAA,U,MAAA,OAOE,WAAoBC,EAAqCC,GAAqC,a,4FAAA,UAC5F,gBADkBD,SAAAA,EAA0E,EAArCC,kBAAAA,EAAqC,EAN9FC,eAM8F,IAL9FC,gBAK8F,IAH9FC,cAG8F,IAF9FC,eAE8F,GAG5FC,EAAAA,EAAAA,IAAe,EAAD,GAAO,CACnBJ,UAAWK,EAAAA,GACXJ,WAAYI,EAAAA,GAEZH,SAAUG,EAAAA,GACVF,UAAWE,EAAAA,KAGb,EAAKC,YACH,EAAKC,uBAAuBC,EAAAA,GAAAA,KAC5B,EAAKD,uBAAuBC,EAAAA,GAAAA,OAb8D,EAPhG,O,EAAA,G,EAAA,0BAwBE,cAxBF,0BA0BE,WAAkC,WAChCC,KAAKC,aACHC,EAAAA,EAAAA,KACE,iBAAM,CACJ,EAAKJ,uBAAuBC,EAAAA,GAAAA,KAC5B,EAAKD,uBAAuBC,EAAAA,GAAAA,UAE9B,yBAAEI,EAAF,KAAgBC,EAAhB,YAAmC,EAAKP,YAAYM,EAAcC,SAjC1E,mCAsCE,cAtCF,oCAwCE,SAA+BC,GAC7B,OAAOL,KAAKX,SACTiB,aACAC,MACC,SAACrB,GAAD,OACEA,EAAO5R,MAAMyC,SAAWsQ,EAAetQ,QACvCmP,EAAO5R,MAAMmH,UAAY4L,EAAeG,iBA9ClD,uBAkDE,SAAkBH,GAChB,OAAOL,KAAKV,kBAAkBmB,iBAAiBJ,EAAeG,eAnDlE,yBAsDE,SAAoBL,EAAuBC,GAA8B,WACnED,GACFO,EAAAA,EAAAA,IAAY,kBAAO,EAAKnB,UAAYY,KAEpCH,KAAKW,UAAUZ,EAAAA,GAAAA,KAAoBa,MACjC7J,EAAAA,EAAAA,KAAO,SAAC8J,GAAD,OAAkB,EAAKpB,SAAWoB,MAIzCT,GACFM,EAAAA,EAAAA,IAAY,kBAAO,EAAKlB,WAAaY,KAErCJ,KAAKW,UAAUZ,EAAAA,GAAAA,MAAqBa,MAClC7J,EAAAA,EAAAA,KAAO,SAAC+J,GAAD,OAAmB,EAAKpB,UAAYoB,W,8EAnEnD,GAAwDC,EAAAA,KAAxD,U,WCGaC,GAAgDC,EAAAA,EAAAA,KAAS,YAAe,IAAZ5V,EAAY,EAAZA,MACjEO,GAAUsH,EAAAA,EAAAA,MACV8I,GAAWC,EAAAA,EAAAA,MACjB,GAAuDiF,EAAAA,EAAAA,IACrD/B,GADMI,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,SAAUD,EAA7B,EAA6BA,WAAYE,EAAzC,EAAyCA,UAQnCyB,EAAiB,SAACd,GACtBhV,GAAM,GAEN,IAAM+V,EAAU,QAAH,OAAWf,EAAetQ,QAEnCiM,EAAS8C,WAAasC,GACxBxV,EAAQyV,KAAKD,IAIjB,OACE,UAAC1N,EAAA,EAAD,CAAOC,aAAa,EAAOtI,MAfJ,WACvBA,GAAM,IAc8CsH,MAAM,6BAA1D,WACE,SAACqM,EAAD,CACEE,OAAQK,EACRjS,MAAOmS,EACP3T,QAAS,kBAAMqV,EAAepB,EAAAA,GAAAA,SAEhC,SAACf,EAAD,CACEE,OAAQM,EACRlS,MAAOoS,EACP5T,QAAS,kBAAMqV,EAAepB,EAAAA,GAAAA,gB,uhEC3BtC,IAAM3E,EAASC,GAAAA,CAAa,IAAD,MAA3B,KAEMC,GAAwBC,EAAAA,EAAAA,GAA9B,MAKMC,GAAmB,QAAU,gBAAMhS,EAAN,eAAkB,gBAA5B,wEAGT,qBAAGiS,OAAuB,SAHjB,cA0CnBC,GAAM,gDAoBN1Q,GAAM,gDAWN2Q,GAAS,mDA2BT7Q,GAAW,qDAsBX8Q,GAAU,kDAYV7B,GAAK,8CAQL9O,GAAW,oDAQXoB,GAAS,kDAaF6N,GAAO,gDAQdgB,GAAM,+CAyBCxH,EAAuC,SAAC,GAY/C,IAZ+C,EAY/C,EAZ+C,QAY/C,EAZ+C,cAY/C,EAZ+C,SAY/C,EAZ+C,WAY/C,EAZ+C,kBAY/C,EAZ+C,cAY/C,EAZ+C,QAY/C,EAZ+C,UAWnDmI,EACI,EADJA,SAEA,KAA4BtQ,EAAAA,EAAAA,WAA5B,MAAM,EAAN,KAAM,EAAN,KACMuQ,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAc7N,EAAAA,EAAAA,QAAO2N,EAA3B,WAEAhN,EAAAA,EAAAA,YAAU,WACJ8M,GAAYI,EAAAA,UAAwBF,EAAxC,UACE3Q,MAED,CAACyQ,EAAUE,EAJdhN,YAMAA,EAAAA,EAAAA,YAAU,WAGR,OAFAD,GAAAA,GAEO,WACLA,GAAAA,MAJJC,IAQA,IAAMoN,GAAS3N,EAAAA,EAAAA,UAAQ,WACrB,SACS,CACL2N,OAAQ,CAAEC,SAAF,IAAiBjB,OAAQ,mBAAeA,EAAOkB,KACvDC,KAAM,CAAEC,UAAW,qBACnBC,MAAO,CAAED,UAAW,iBACpBE,MAAO,CAAEF,UAAW,sBAIjB,KAMN,CAhBH,IAkBMG,GAAiBC,EAAAA,EAAAA,IAAc9M,EAAQ,KAA7C,GAEA,KAAqB+M,EAAAA,EAAAA,KAAU,iBAAO,CAAEC,EAAF,EAAQV,OAAQ,CAAEW,KAAF,EAAWC,QAAX,IAAyBC,SAAU,QAAzF,GAASH,EAAT,KAASA,EAAH,EAAN,KACMI,GAAOC,EAAAA,EAAAA,UAASvN,SAAAA,GACpBwN,EAAI,CACFN,EAAGlN,EAAAA,KAAaA,EAAAA,SAAbA,GAAiC,KAGpCA,EAAAA,SAAAA,GAjQN,KAkQOA,EAAAA,SAAAA,GAjQP,GAiQsDA,EAAAA,UAAAA,GAFlD,IAIEvE,OAIJ,OACE,8BACGsR,EAAAA,KACC,gBAAC,EAAD,EAAC,OAAD,EAAC,IAAanT,EAAd,EAAcA,MAAd,OACE6T,IACE,mBAEOvB,EAAQ,OAEJoB,KAFI,IAGPI,MAAO,EAAF,KAAE,GAAF,IAEHd,UAAWM,EAAAA,aAAeS,SAAAA,GAAD,2BAAqB,MAAnCT,EAAc,cAG7B,CACEQ,MAAO9T,IAXf,IAaE,aAbF,SAcEwD,UAdF,YAgBG8O,GAAW,SAAH,EAAG,SAAZ,EACCnJ,GAAAA,GACC,uBACGA,GAAQ,qBAAH,SAAN,EACCC,GAAc,qBAAH,SAAZ,EACEkJ,OAAF,GAAa,YAAWnS,KAAX,QAAwBmC,QAApC,YAJL,EAOE6H,OAAF,GACE,YAAW3G,UAAW6C,GAAAA,CAAW,CAAE2N,QAASC,QAAQ5K,KAApD,SACGA,GACC,YAAa7F,UAAb,YACE,YAAYrD,KAAZ,WAFJ,IAOHkS,GAAW,qBAAH,SAAT,EACC9I,GAAS,qBAAH,SAAP,KAlCF,S,8dCzMCuO,EAAAA,GAAAA,O,mCC9EPzW,GAAO,iDAOP0W,GAAiB,yDAUjBrN,GAAO,iDAOPsN,GAAY,oDAaLC,EAA2B,SAAC,GAAgD,IAAhD,EAAgD,EAAhD,cAAgD,IAA/BvP,QAAAA,OAA+B,MAArB,eAAqB,EACvF,OACE,wBACE,6CACA,aACEoH,MAAMC,EAAAA,EAAAA,IAAe,KAAMmI,EAD7B,GAEElI,OAFF,SAGEC,IAHF,yCAKE,wBACGkI,EAAAA,EAAAA,IAAiBD,EAAe,CAC/BE,qBAD+B,EAE/BC,6BAA8B,KAEhC,YAAclY,KAAd,iBAEF,4D,05CC5CD,IAAMmY,GADZC,EAAAA,EAAAA,KACD,6H,+QAAA,U,MAAA,OAQE,WAAoBC,GAAyC,a,4FAAA,UAC3D,gBADkBA,oBAAAA,EAAyC,EAJ7DC,oBAI6D,IAH7DC,wBAG6D,IAF7DC,+BAE6D,EAG3D,EAAKF,eAAiB,KACtB,EAAKC,mBAAqB,KAC1B,EAAKC,0BAA4B,MAEjCxC,EAAAA,EAAAA,IAAe,EAAD,GAAO,CACnBsC,eAAgBrC,EAAAA,GAChBsC,mBAAoBtC,EAAAA,GACpBuC,0BAA2BvC,EAAAA,GAE3BwC,eAAgBrL,EAAAA,GAEhBsL,WAAYC,EAAAA,GACZZ,cAAeY,EAAAA,GACfC,mBAAoBD,EAAAA,GAEpBE,0BAA2BzL,EAAAA,KAlB8B,EAR/D,O,EAAA,G,EAAA,6BA8BE,SAAe0L,GACbzC,KAAKiC,eAAiBQ,EACtBzC,KAAKkC,mBAAqB,IAAIQ,EAAAA,GAAmB,CAC/CC,cAAe,KACfC,OAAQ,IAAIC,KACZZ,eAAgBQ,EAChBK,OAAQC,EAAAA,GAAAA,cApCd,yBAwCE,WACE/C,KAAKiC,eAAiB,KACtBjC,KAAKkC,mBAAqB,KAC1BlC,KAAKmC,0BAA4B,OA3CrC,0BA8CE,cA9CF,mCAgDE,cAhDF,sBAkDE,WAEE,OADAa,EAAAA,EAAAA,IAAOhD,KAAKiC,eAAgB,6BACrBjC,KAAKiC,eAAegB,SApD/B,yBAuDE,WAEE,OADAD,EAAAA,EAAAA,IAAOhD,KAAKkC,mBAAoB,iCACzBlC,KAAKkC,mBAAmBS,gBAzDnC,8BA4DE,WAEE,OADAK,EAAAA,EAAAA,IAAOhD,KAAKiC,eAAgB,6BACrBjC,KAAKiC,eAAeiB,kBA9D/B,uCAmEE,WAA+C,YAC7CF,EAAAA,EAAAA,IAAOhD,KAAKiC,eAAgB,6BAE5B,IAAMkB,EAAQnD,KAAKgC,oBAAoBoB,gBAAgBpD,KAAKiC,gBAC5DjC,KAAKmC,0BAA4BgB,EAGjC,IAAME,EAAmB,IAAIX,EAAAA,GAAmB,CAC9CC,cAAe,KACfC,OAAQ,IAAIC,KACZZ,eAAgBjC,KAAKiC,eACrBa,OAAQC,EAAAA,GAAAA,MAAwBO,EAAAA,GAAAA,aAIlC,OAAOtD,KAAKgC,oBAAoBuB,mBAAmBJ,GAAO,SAACjB,GACzD,EAAKA,mBAAqBA,GAAsBmB,U,8EAnFtD,GACUtC,EAAAA,KADV,U,sBCPMlW,GAAO,gDAQA2Y,GAAyBvC,EAAAA,EAAAA,KAAS,YAAmB,IAAhBwC,EAAgB,EAAhBA,UAC1CC,GAAOC,EAAAA,EAAAA,KAAK,WAChB,IAAMC,EAAOH,EAAb,mBACA,MACE,SAGF,IAAMI,EAAeD,EAAAA,eAAAA,OAAAA,8BAArB,qCAIA,OAAQA,EAAAA,OAAR,MACE,KAAKE,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACH,SACF,KAAKA,EAAAA,GAAAA,MAEH,IAAMpa,EAAQka,EAAAA,OAAd,MACA,KAAW,CACT,GAAIla,EAAAA,QAAAA,SAAJ,mDACE,6CAGF,GACEA,aAAAA,EAAAA,IACAA,EAAAA,OAAeqa,EAAAA,GAAAA,mCAFjB,KAIE,yDAGJ,0CAEF,KAAKD,EAAAA,GAAAA,UAEH,IAAM5L,EAAc0L,EAApB,eACA,GAAI1L,aAAuB8L,EAAAA,GACzB,gBAAU9L,EAAAA,OAAAA,MAAV,iCAGF,GAAIA,aAAuB8L,EAAAA,GACzB,gBAAU9L,EAAAA,aAAAA,MAA+BnI,OAAzC,cAAqDmI,EAAAA,kBAAAA,MAArD,gCAGF,MAAM3N,MAAN,aAKN,OAAO,qBAAP,O,y9BCtDF,IAEM0Z,GAAY,oDAsCZnK,GAAe,wDAUfoK,GAAY,sDA2BZC,GAAY,wEAKL7C,EAAAA,GAAAA,WAQPzH,GAAY,sDAsBZuK,GAAY,iDAsBLC,GAA0BpD,EAAAA,EAAAA,KAAS,YAA6B,IAA1BwC,EAA0B,EAA1BA,UACjD,KAAgClY,EAAAA,EAAAA,UAvIlC,GAuIE,GAAM,EAAN,KAAM,EAAN,KAEMuX,EAASW,EAAAA,mBAAf,OACMa,EAAYxB,EAAAA,OAAgBgB,EAAAA,GAAAA,QAC5BS,EAAezB,EAAAA,OAAgBgB,EAAAA,GAAAA,UAC/BU,EAAY1B,EAAAA,OAAgBgB,EAAAA,GAAAA,UAC5B5M,EAAU4L,EAAAA,OAAgBgB,EAAAA,GAAAA,MAwDhC,OAtDA9U,EAAAA,EAAAA,YAAU,WAAM,MACVyV,EAhJR,EAkJI,GAEIF,GAECD,IACC,UAACb,EAAAA,0BAAD,aAACA,EAAD,gBALN,2BAYA,IAAMiB,EAAUlT,aAAY,WAGxBmT,EAFEC,GAnCV,GAoCQH,GAnCR,EAsCQA,EAvCR,MAGA,KAyCI,OAAO,WACLI,aAAAA,OAED,CAAC/B,EA5BJ9T,QA8BAA,EAAAA,EAAAA,YAAU,WACR,OAAQ8T,EAAR,MACE,KAAKgB,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,UACHa,EAnDR,KAoDQhZ,YAAW,WACTgZ,EAAAA,KADFhZ,QAKH,CAACmX,EAjDuE,QAgEzE,+BACE,wBACE,YACExF,MAAO,CAAEpQ,MAAO,GAAF,OAAK0X,EAAL,MACd5X,UAAW6C,GAAAA,CAAW,CAAE2U,UAAAA,EAAWtN,QAAAA,OAErC,gBAEA,YACElK,UAAW6C,GAAAA,CAAW,CAAE0U,aAAcD,GAAhB,EAA2CE,UAAAA,EAAWtN,QAAAA,IAD9E,SAGGsN,GACC,YAAc7a,KADN,kBAGR,YAAcA,KAAMuN,EAAU,aAHhC,yB,SCvMV,IAAMa,GAAY,qDAOZlG,GAAO,gDAMP5G,GAAW,qDAgBJ6Z,GAA6E7D,EAAAA,EAAAA,KACxF,YAA4B,IAA3B,EAA2B,EAA3B,MAAS/I,EAAkB,EAAlBA,YACFuL,GAAYvC,EAAAA,EAAAA,IADQ,GAGrBuC,EAAL,gBACEA,EAAAA,eAAAA,IAGFsB,EAAAA,EAAAA,kBAAgB,WACd,OAAOtB,EAAP,8BADFsB,IAIA,IAAMvO,EAAmB,WACvBnL,GAAAA,IAGI2Z,EACJvB,EAAAA,gBACEA,EAAD,eAFH,0BAIA,OACE,gBAAcpY,MAAd,aACE,wBACE,YAAaoY,UAAb,KAEA,eAAc3X,QAAd,YACE,eAAWnC,KAAX,aAEF,qBAAc8Z,EAAD,yBAGf,YAAcA,UAAU,IAOvBuB,GACC,sBACE,YAAetD,cAAe+B,EAA9B,kBAFJ,MAKA,sBACE,eAAQtX,SAAR,EAAgBL,QAAhB,4B,wIC7FG8F,GAAY,mDAIZC,GAAO,gDAMPC,GAAI,4CAOJC,GAAG,2CAEHkT,GAAa,sD,kNCPnB,IAAMC,GAA2CjE,EAAAA,EAAAA,KAAS,YAA0B,IAAvBwC,EAAuB,EAAvBA,UAAWpY,EAAY,EAAZA,MACvE8Z,GAAaxB,EAAAA,EAAAA,KAAK,WACtB,IAAMyB,EAAM3B,EAAU4B,SAChBnG,EAASuE,EAAU6B,aACzB,OAAKF,IAAQlG,GAAUkG,GAAO,EACrB,WAGT,eAAcG,EAAAA,EAAAA,IAAeH,EAAK,CAAEI,sBAAuB,IAA3D,YACEtG,EAAO5R,MAAMyC,OADf,kBAKI0V,EAAW,e,EAAA,G,EAAA,yBAAG,8GAEhBC,EAAAA,EAAAA,IAAW,CAAE/b,KAAM,uBAFH,SAIV8Z,EAAUkC,eAJA,OAKhBta,GAAM,GALU,sG,+KAAH,qDAWjB,OACE,SAAC,KAAD,CAAQc,SAAO,EAACN,SAAU4X,EAAUmC,UAAW9Z,QAAS2Z,EAAxD,SACGhC,EAAUmC,WAAY,SAACC,EAAA,EAAD,IAAaV,O,qBC/BpCW,GAAa,sDAMbC,GAAiB,wDAIjBC,GAAI,8CAIJnZ,GAAG,6CAEHoZ,GAAK,+CAYLC,GAAY,qDASLC,GAAmClF,EAAAA,EAAAA,KAAS,YAAmB,QAAhBwC,EAAgB,EAAhBA,UAC1D,OACE,wBACE,YAAmBnW,MAAA,UAAOmW,EAAAA,oBAAP,aAAOA,EAA1B,MAAyDpW,KAAzD,MACA,sBACE,sBACE,wBACE,+CACuB,KACrB,aAAOL,UAAP,wBACIoZ,EAAAA,EAAAA,KAAAA,QACDb,EAAAA,EAAAA,IAAc,UAAC9B,EAAAA,iBAAD,UAA2B,CAAE+B,sBAAuB,WAGvE,YAAOxY,UAAP,mBAA4ByW,EAAD,yB,SC9CvC,IAAM4C,GAAkB,yDAYXrU,GAAqCiP,EAAAA,EAAAA,KAAS,YAA0B,IAAzB,EAAyB,EAAzB,UAAa5V,EAAY,EAAZA,MAKvE,OACE,YACEsH,MADF,gCAEEC,YAFF,yCAGEC,SAHF,QAIEC,gBAJF,UAKEzH,MAAO,kBAAMA,GALf,IAME0H,QACE,iCACE,YAAc0Q,UAAd,EAAoCpY,MAApC,KACA,cAAcS,QAAS,kBAAMT,GAA7B,SATN,UAaE,wBACE,sBACE,+FACuE,KACrE,+DAFF,yDAMF,gBAAKiS,MAAO,CAAEgJ,SAAU,YAAxB,UACE,YACE7C,UAAWA,EADb,4BAEE8C,UAAU,YAAuB9C,UAFnC,IAGE+C,eAAgB/C,EAHlB,aAIEgD,eA/BiB,SAACvH,GAC1BuE,EAAAA,gBAAAA,IA+BQiD,cAAejD,EALjB,eAMEkD,kBANF,OASF,wBACE,gDACuB,6CADvB,qDAIA,yDACgC,6CADhC,QAGA,wBACE,yCADF,kE,itEC7CH,I,GCfKC,GDeCC,IADZ9E,EAAAA,EAAAA,KACD,qMAOE,WACU+E,EACAC,EACAC,EACAC,I,4FACR,cAJQH,qBAAAA,EAIR,KAHQC,UAAAA,EAGR,KAFQC,mBAAAA,EAER,KADQC,YAAAA,EACR,KAXMC,+BAWN,OATMC,uBASN,OARMC,2BAQN,OAPMC,wBAON,EACA,IAAMC,EAAsB,IAAIC,EAAAA,GAChCvH,KAAKkH,0BAA4B,IAAIM,EAAAA,GAAyB,CAC5DC,MAAOzH,KAAK8G,qBAAqBY,SAASxI,OAAOnV,UACjD4d,gBAAiB3H,KAAK8G,qBACtBQ,oBAAAA,I,UAjBN,e,EAAA,E,EAAA,iDAqBE,6GACQtH,KAAK+G,UAAUa,OADvB,uBAGiC5H,KAAK8G,qBAAqBe,kCACvDC,EAAAA,GAAAA,MAJJ,cAGE9H,KAAKmH,kBAHP,gBAMqCnH,KAAK8G,qBAAqBiB,0BAN/D,cAME/H,KAAKoH,sBANP,iBAOkCpH,KAAK8G,qBAAqBe,kCAAkC,GAP9F,QAOE7H,KAAKqH,mBAPP,wDArBF,0GA+BE,qIACQW,EAAUhI,KAAKgH,mBAClB1G,aACA/Q,QAAO,SAAC2P,GAAD,uBAAYA,EAAO+I,gBAAnB,aAAY,EAAiBC,GAAGC,EAAAA,SAH5C,SAMsBC,QAAQC,IAC1BL,EAAQM,KAAI,SAACC,GAAD,OAA4B,EAAKC,eAAeD,EAAE/H,aAAaiI,OAAM,kBAAM,YAP3F,OAMQC,EANR,OAUQC,EAAuB,GAV/B,KAWyBC,EAAAA,EAAAA,GAAIZ,EAASU,IAXtC,2EAWcH,EAXd,OAWiBnD,EAXjB,QAYeA,EAAIyD,IAAJ,UAAQN,EAAEN,gBAAV,QAAsBE,EAAAA,MAZrC,qBAgBUI,EAAEO,eAAe,UAACP,EAAEN,gBAAH,QAAeE,EAAAA,MAAMY,IAAI3D,GAAK4D,GAA9B,UAAiChJ,KAAKqH,0BAAtC,QAA4Dc,EAAAA,MAhBvF,wDAmBQQ,EAAWtH,KAAKkH,GAnBxB,wKAuBSI,GAvBT,gEA/BF,sGAyDE,WAAoBM,EAAkBC,GAAtC,mHACQzU,EAAU,IAAI0U,EAAAA,UAAUF,GACxBG,EAAO,IAAID,EAAAA,UAAUD,GACrBzB,EAAQzH,KAAK8G,qBAAqBY,SAASxI,OAAOnV,UAElDsf,GAAoBC,EAAAA,EAAAA,IAA8BC,EAAAA,GAAAA,WAA+B9B,GALzF,SAQ0BzH,KAAKkH,0BAA0BsC,oBARzD,cAQQC,EARR,OAQ8EC,gBACtEC,EAAY3J,KAAK8G,qBAAqB8C,mBAAmB,CAC7DC,aAAc,CACZC,EAAAA,GAAAA,wCACEP,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,WACAF,EACA5B,EACAgC,IAGJA,SAAAA,IAGIM,EAAW/J,KAAKkH,0BAA0B8C,SAvBlD,UAyBsC5B,QAAQC,IAAI,CAACsB,EAAWI,IAzB9D,kCAyBSE,EAzBT,MA4BsBxC,MAAQA,EA5B9B,UA8BwBzH,KAAKkH,0BAA0BsC,oBA9BvD,eA8BQU,EA9BR,iBA+BmBlK,KAAKiH,YAAYkD,yBAAyB,CACzDD,QAAAA,EACAhS,YAAa+R,EACb7E,IAAK,IAAIgF,EAAAA,GAAa,CAAE3V,QAASA,EAAS2U,KAAMA,IAChDhN,OAAQ,IAAIiO,EAAAA,GAAwB,CAClCC,cAAeC,EAAAA,GAAAA,SACfC,SAAUpB,EAAK1e,eArCrB,eA+BQF,EA/BR,iBAyCQwV,KAAK8G,qBAAqB2D,oBAAoBjgB,GAzCtD,QA2CEwV,KAAKgH,mBAAmB0D,aAAY,SAAC1C,GAAY,MACzC2C,EAAM,UAAG3C,EAAQzH,MAAK,SAACrB,GAAD,OAAYA,EAAO5R,MAAMwb,sBAAzC,aAAG,EAAoD8B,OACnE,IAAKD,EACH,OAAO3C,EAET,IAAM6C,EAAsB,IAAI1B,EAAAA,UAAUwB,GACpCG,GAAgBxB,EAAAA,EAAAA,IACpBC,EAAAA,GAAAA,WACAsB,GAaF,OAVK7C,EAAQ+C,MAAK,SAAC7L,GAAD,OAAYA,EAAO0L,SAAWrB,EAAAA,GAAAA,WAAAA,eAC9CvB,EAAQ3G,KACN,IAAI2J,EAAAA,GAAO,CACTJ,OAAQE,EAAcpgB,WACtBud,SAAUE,EAAAA,KACV7a,MAAO2d,EAAAA,GAAAA,UAKNjD,KAhEX,iDAzDF,0GA6HE,WAAqBkD,GAArB,uGACQ1K,EAAc,IAAI2I,EAAAA,UAAU+B,GAE5BC,EAAY,IAAIC,EAAAA,GAAU,CAC9BlT,YAAW,UAAE8H,KAAKoH,6BAAP,QAAgC,IAAIiE,EAAAA,IAAI,KACnDC,gBAAe,UAAEtL,KAAKmH,yBAAP,QAA4B,IAAIkE,EAAAA,IAAI,WALvD,KAQmBrL,KAAKiH,YAAYsE,cARpC,SASmBvL,KAAKkH,0BAA0BsC,oBATlD,+BAUiB2B,EAVjB,KAWqB3K,EAXrB,MASI0J,QATJ,KAUIsB,YAVJ,KAWIC,gBAXJ,MAQQC,EARR,KAQkDC,2BARlD,0BAc2B3L,KAAKiH,YAAYsE,cAAcK,0BAA0B,CAChFC,SAAU7L,KAAK+G,UACf2E,SAAUA,EACVI,mBAAoBtL,IAjBxB,eAcQuL,EAdR,yBAoBSA,EAAWC,OApBpB,iDA7HF,+C,mFAAA,iB,0pDCfYpF,GAAAA,EAAAA,cAAAA,gBAAAA,EAAAA,sBAAAA,wB,CAAAA,KAAAA,GAAAA,KAmBL,IAAMqF,IADZ7M,EAAAA,EAAAA,KACD,wM,gRAAA,U,MAAA,YAaE,WACU8M,EACAC,EACAnF,EACDoF,GACP,a,4FAAA,UACA,gBALQF,qBAAAA,EAIR,EAHQC,cAAAA,EAGR,EAFQnF,mBAAAA,EAER,EADOoF,4BAAAA,EACP,EAdFxG,WAAY,EAcV,EAbFlc,MAAuB,KAarB,EAZF2iB,cAA4C,KAY1C,EAXFC,eAA2B,GAWzB,EATFhH,aAA8B,KAS5B,EARFD,SAA0B,KAQxB,EAPFkH,UAA2B,MAUzB5M,EAAAA,EAAAA,IAAe,GAAD,GAAO,CACnBiG,UAAWhG,EAAAA,GACXlW,MAAOkW,EAAAA,GACPyM,cAAezM,EAAAA,GACf0M,eAAgB1M,EAAAA,GAEhB0F,aAAc1F,EAAAA,GACdyF,SAAUzF,EAAAA,GACV2M,UAAW3M,EAAAA,GAEX4M,aAAclK,EAAAA,GACdmK,UAAWnK,EAAAA,GAEXoK,OAAQ3V,EAAAA,GACR4V,gBAAiB5V,EAAAA,GACjB4O,aAAc5O,EAAAA,KAlBhB,EAlBJ,O,EAAA,E,EAAA,0BAwCE,WACEiJ,KAAK4F,WAAY,EACjB5F,KAAKqM,cAAgB,KACrBrM,KAAKsM,eAAiB,GACtBtM,KAAKsF,aAAe,KAEpBtF,KAAKqF,SAAW,KAChBrF,KAAKuM,UAAY,OA/CrB,0BAkDE,WACEvM,KAAKoM,4BAA4BQ,aAE5B5M,KAAK0M,SACL1M,KAAK6M,UAtDd,mCAyDE,WACE7M,KAAKoM,4BAA4BU,QA1DrC,wBA6DE,WAAkC,QAChC,2BAAO9M,KAAKgH,mBAAmB+F,oBAA/B,aAAO,EAAsCnC,cAA7C,QAAuD,OA9D3D,qBAiEE,WACE,IAAMxF,EAAMpF,KAAKqF,SACXnG,EAASc,KAAKsF,aACpB,OAAKF,GAAQlG,EAGb,WAAUqG,EAAAA,EAAAA,IAAeH,EAAK,CAAEI,sBAAuB,IAAvD,YAA+DtG,EAAO5R,MAAMyC,QAFnE,OArEb,mDA4EE,iHACEiQ,KAAK4F,WAAY,EACjB5F,KAAKtW,MAAQ,KACbsW,KAAKqM,cAAgB,KACrBrM,KAAKsM,eAAiB,GACtBtM,KAAKsF,aAAe,KALtB,kBAQUtF,KAAKkM,qBAAqBtE,OARpC,wBASiC5H,KAAKkM,qBAAqBc,oBAT3D,QASUV,EATV,QAWI5L,EAAAA,EAAAA,IAAY,WAAM,MAChB,EAAKhX,MAAQ,KACb,EAAK2iB,cAAgBC,EAAeW,OAChCrG,GAAoBsG,sBACpBtG,GAAoBuG,cACxB,EAAKb,eAAiBA,EACtB,EAAKhH,aAAL,UAAoBgH,EAAe,UAAnC,QAAyC,QAjB/C,mDAoBI5L,EAAAA,EAAAA,IAAY,WACVhV,QAAQhC,MAAR,MACA,EAAKA,MAAQ,KAAiB0jB,QAC9B,EAAKf,cAAgB,KACrB,EAAKC,eAAiB,GACtB,EAAKhH,aAAe,QAzB1B,0BA4BI5E,EAAAA,EAAAA,IAAY,WACV,EAAKkF,WAAY,KA7BvB,6EA5EF,gEA8GE,WAAsB,WACpB5F,KAAKC,aACHC,EAAAA,EAAAA,KACE,kBAAM,EAAKoF,eADL,6CAEN,WAAOpG,GAAP,yFACOA,EADP,uBAEI,EAAKmG,SAAW,KAFpB,mDAMsB,EAAK6G,qBAAqB1D,eAAetJ,EAAOsB,aANtE,OAMU4E,EANV,QAOI1E,EAAAA,EAAAA,IAAY,WACV,EAAK2E,UAAWgI,EAAAA,EAAAA,IAAiBjI,EAAKlG,EAAO5R,MAAMggB,aARzD,mDAWI5M,EAAAA,EAAAA,IAAY,WACV,EAAK2E,SAAW,QAZtB,0DAFM,wDAqBVrF,KAAKC,aACHC,EAAAA,EAAAA,KACE,kBAAM,EAAKmF,YACX,SAACD,GAAQ,QACDrV,EAAM,UAAG,EAAKuV,oBAAR,aAAG,EAAmBhY,MAAMyC,OACxC,GAAKqV,GAAQrV,EAAb,CAIA,IAAMwd,EAAK,UAAG,EAAKpB,cAAcqB,aAAazd,UAAnC,aAAG,EAAyCvC,MAKvD,EAAK+e,UAJAgB,EAIYnI,EAAMmI,EAHJ,UALjB,EAAKhB,UAAY,WA3I7B,6BAyJE,SAAgBrN,GACdc,KAAKsF,aAAepG,IA1JxB,yDA6JE,4GACQsB,EADR,UACsBR,KAAKsF,oBAD3B,aACsB,EAAmB9E,YACjC/L,EAFR,UAEkBuL,KAAKsF,oBAFvB,aAEkB,EAAmBsF,OAC9BpK,GAAgB/L,EAHvB,wDAOEuL,KAAK4F,WAAY,EACjB5F,KAAKtW,MAAQ,KARf,kBAWUsW,KAAKkM,qBAAqBuB,cAAchZ,EAAS+L,GAX3D,OAYIR,KAAKtW,MAAQ,KAZjB,wDAcIgC,QAAQhC,MAAR,MACAsW,KAAKtW,MAAQ,KAAiB0jB,QAflC,8BAkBIpN,KAAK4F,WAAY,EAlBrB,6EA7JF,8C,mFAAA,GACU7E,EAAAA,KADV,a,mCCvBa9N,GAA4B,SAAC,GAAc,IAAZ5H,EAAY,EAAZA,MACpCO,GAAUsH,EAAAA,GAAAA,MAOhB,OACE,YACEP,MADF,gCAEEC,YAFF,yCAGEC,SAHF,QAIEC,gBAJF,UAKEzH,MAAO,kBAAMA,GALf,IAME0H,QACE,iCACE,eAAQ5G,SAAR,EAAgBL,QAdC,WACvBT,GAAAA,GACAO,EAAAA,KAAAA,SAYM,kCAGA,eAAcE,QAAS,kBAAMT,GAA7B,SAXN,UAeE,sBACE,wBACE,6BACI,2DADJ,qDAIA,+FACuE,KACrE,+DAFF,QAIA,+BACM,iDADN,oHC7BJqiB,IAAmB,wDAIZva,IAA0C8N,EAAAA,EAAAA,KAAS,YAAe,IAAZ5V,EAAY,EAAZA,MAC3DoY,GAAYvC,EAAAA,EAAAA,IAAlB,IAEA,GAAIuC,EAAAA,YAAwBA,EAA5B,cACE,OACE,YAAcpY,MAAO,kBAAMA,GAA3B,cACE,uBACE,cAAQgC,KAAR,YAMR,OAAQoW,EAAR,eACE,KAAKmD,GAAoBuG,cACvB,OAAO,aAAO9hB,MAAd,IACF,KAAKub,GAAoBsG,sBACvB,OAAO,YAAQzJ,UAAR,EAA8BpY,MAArC,Q,uGCzBOmI,EAAoD,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MAAOpI,EAAmB,EAAnBA,MAAOsH,EAAY,EAAZA,MAChF,OACE,SAACe,EAAA,EAAD,CAAOC,aAAa,EAAOtI,MAAOA,EAAOsH,MAAOA,EAAhD,SACGc,M,gTCEMka,GAA+B1M,EAAAA,EAAAA,KAAS,YAAmB,UAAhBwC,EAAgB,EAAhBA,UAChDvE,EAASuE,EAAf,OACM5O,EAAM,UAAG4O,EAAAA,cAAH,QAAZ,EACMmK,EAAe/Y,GAAM,UAAIqK,MAAAA,OAAJ,EAAIA,EAAAA,0BAAJ,QAA3B,GAEA,OACE,2BACE,cAAa5R,MAAO4R,MAAAA,OAAP,EAAOA,EAApB,MAAmC7R,KAAnC,MACA,2BACE,2BACGkY,EAAAA,EAAAA,IAAe1Q,EAAQ,CAAE2Q,sBAAuB,IADnD,cAC0DtG,MAAAA,OAD1D,EAC0DA,EAAAA,MAAAA,cAD1D,QACyD,OAEzD,0BACGkH,EAAAA,EAAAA,KAAAA,QACAb,EAAAA,EAAAA,IAAeqI,EAAc,CAAEpI,sBAAuB,gB,SCPpDqI,GAA2B5M,EAAAA,EAAAA,KAAS,YAAmB,IAC5D6M,EAD4D,EAAhBrK,UAClD,UAEA,OACE,2BACE,yBACE,cAAY9Z,KAAZ,cAEF,0BACGmkB,EAAAA,MACC,2BACE,+BACCA,EAAD,SAGF,eAAW9gB,UANb,YAME,yBAEF,yBACE,cAAayH,QAASqZ,EAAtB,QAAyCvZ,QAAzC,e,ykCCVV,IAAM3C,GAAY,mDAIZgE,GAAU,oDAOVC,GAAQ,kDAWRC,GAAW,qDAUXC,GAAmB,2DAInBC,GAAQ,gDAUD+X,GAA+D9M,EAAAA,EAAAA,KAC1E,YAA0B,gBAAzB,EAAyB,EAAzB,MAASwC,EAAgB,EAAhBA,UACAvN,GAAuBlM,EAAAA,EAAAA,MAAvBkM,mBACFC,GAA2BC,EAAAA,EAAAA,MAEjC,KAAgC7K,EAAAA,EAAAA,UAAhC,OAAM,EAAN,KAAM,EAAN,KACA,KAAgCA,EAAAA,EAAAA,WAAhC,MAAM,EAAN,KAAM,EAAN,KAEMiL,EAAmB,WACvBnL,GAAAA,IAGIgL,EAAgB,e,EAAA,G,EAAA,yBAAG,uHAEfF,EAAN,GAFqB,OAGrBG,GAAAA,GAHqB,+CAKrBA,GAAAA,GALqB,uD,+KAAH,sDAgDhBG,GACJP,MAAAA,OAAAA,EAAAA,EAAAA,QAA6BQ,EAAAA,GAAyBC,EAAAA,GAAAA,WADxD,KAEMC,EACHH,KAAuBI,GAAxB,KACC4M,EADD,SAECA,EAFD,SAGCA,EAjEqB,UAsExB,OACE,aACE9Q,OAAO,8DAA6B8Q,EAAAA,cAA7B,aAA6BA,EAAAA,MAAAA,cAA7B,QADT,MAEEpY,MAFF,EAGE0H,QACE,iCACE,gBAAQ5G,SAAR,EAAgBN,SAAhB,EAAsCC,QAhDnB,WAAM,QAC/BT,GAAAA,GACAoY,EAF+B,sBAK/B,IAAMmK,GAAeI,EAAAA,EAAAA,IAAQvK,EAAAA,OAAmBA,EAAAA,OAApB,mBAA5B,GAEIwK,EAAJ,KACMzgB,EAAQiW,EAAAA,QAAd,MACM6B,EAAe7B,EAArB,aACIjW,MAAAA,GAAAA,EAAAA,4BAAJ,GACMA,EAAAA,UAAAA,MAAAA,GAAJ,UACEygB,EAAW3I,EAAAA,MAAX2I,SAIJvI,EAAAA,EAAAA,IAAW,CACT/b,KADS,8BAETW,OAAQ,CACN4jB,cAAcC,EAAAA,EAAAA,IAAsB1K,EAD9B,SAEN2K,cAAe3K,EAAAA,OAAAA,MAFT,OAGN4K,SAAU5K,EAHJ,OAIN6K,SAAU7K,EAJJ,cAKN8K,SALM,EAMNC,WAAW/K,QAAAA,EAAAA,EAAAA,QAAAA,aAAAA,IAAAA,OAAAA,EAAAA,EAAAA,UAAAA,YAAAA,GAAAA,EAAAA,SANL,EAONgL,cAAehR,QAAO,UAACgG,EAAAA,iBAAD,aAACA,EAPjB,MAQNiL,uBAAwBT,MAsBtB,WACE,YAAUtkB,KAAV,QADF,oBAEG8Z,EAAAA,aAFH,aAEGA,EAAAA,wBAFH,wBAGY8B,EAAAA,EAAAA,IAAe9B,EAAD,OAAmB,CACvC+B,sBAAuB,IAJ7B,gCAKU/B,EAAAA,cALV,aAKUA,EAAAA,MAAAA,cALV,QAEE,QAKF,cAAc3X,QAAd,OAGJ6H,aAfF,aAiBE,gDAEA,eAAS3G,UAAT,iBACE,4BACE,YAAmByW,UAAnB,KACA,kBACA,YAAeA,UAAf,SAMHhN,GACC,gBAASzJ,UAAT,sBACE,oDACA,YACEQ,MADF,EAEEyC,SArFmB,SAACzC,GAC5ByJ,EAAAA,GAEA,GACOZ,EAAL,IAkFMa,QAHF,IAKCC,GAAW,cAAWzN,MAAX,8BAA+C0N,QAAlD,IAAT,QARJ,W,01CCjKR,IAAMvB,GAAQ,mDAWRE,GAAmB,0DASZ4Y,EAA6B,SAAC,GAAiB,IAAf1e,EAAe,EAAfA,SACnCiG,GAAuBlM,EAAAA,EAAAA,MAAvBkM,mBACFC,GAA2BC,EAAAA,EAAAA,MAEjC,KAAgC7K,EAAAA,EAAAA,UAAhC,OAAM,EAAN,KAAM,EAAN,KACA,KAAgCA,EAAAA,EAAAA,WAAhC,MAAM,EAAN,KAAM,EAAN,KAEMkL,GACJP,MAAAA,OAAAA,EAAAA,EAAAA,QAA6BQ,EAAAA,GAAyBC,EAAAA,GAAAA,WADxD,MAGAoO,EAAAA,EAAAA,kBAAgB,WACd9U,EAASwG,KAAuBI,GAAhC5G,MACC,CAACkH,EAAUV,EAAmBxG,EAFjC8U,IAIA,IAAM1O,EAAgB,e,EAAA,G,EAAA,yBAAG,uHAEfF,EAAN,GAFqB,OAGrBG,GAAAA,GAHqB,+CAKrBA,GAAAA,GALqB,uD,+KAAH,sDAiBtB,UAKE,gBAAStJ,UAAT,sBACE,oDACA,YAAqBQ,MAArB,EAAsCyC,SAfb,SAACzC,GAC5ByJ,EAAAA,GAEA,GACOZ,EAAL,IAWsEa,QAAtE,IACCC,GAAW,cAAWzN,MAAX,8BAA+C0N,QAAlD,IAAT,QAPF,M,8lCCzDJ,IAAMsD,GAAQ,gDAUD8D,GAA0ByC,EAAAA,EAAAA,KAAS,YAA6B,YAA5B,EAA4B,EAA5B,UAAgBzX,EAAY,OAC3E,OACE,mBAAQ2C,SAAR,qBACE,YAAUxC,KAAV,QADF,6BACgC8Z,EAAAA,oBADhC,aACgCA,EAAAA,MAAAA,cADhC,QAC+B,GAD/B,KAC6E,IAD7E,oBAEGA,EAAAA,yBAFH,aAEGA,EAAAA,MAAAA,cAFH,QAEE,U,84CCTC,IAAMmL,GADZ7M,EAAAA,EAAAA,KACD,+H,+QAAA,U,MAAA,OAGE,WAAoB8M,GAA+B,a,4FAAA,UACjD,gBADkBA,eAAAA,EAA+B,EAF3CC,oBAE2C,EAGjD,EAAKA,eAAiB,MAEtBnP,EAAAA,EAAAA,IAAe,EAAD,GAAO,CACnBoP,aAAczM,EAAAA,GACd0M,kBAAmB1M,EAAAA,GACnB2M,YAAa3M,EAAAA,GACb4M,gBAAiB5M,EAAAA,GACjB6M,qBAAsB7M,EAAAA,GACtB8M,aAAc9M,EAAAA,GACd+M,KAAM/M,EAAAA,GACNgN,SAAUhN,EAAAA,GAEViN,SAAUxY,EAAAA,GACVyY,oBAAqBzY,EAAAA,GAErB0Y,kBAAmBnN,EAAAA,GACnBoN,wBAAyBpN,EAAAA,GACzBqN,sBAAuBrN,EAAAA,GACvBsN,qBAAsBtN,EAAAA,GACtBuN,2BAA4BvN,EAAAA,GAE5BwN,UAAWxN,EAAAA,GACXyN,iBAAkBhZ,EAAAA,KAzB6B,EAHrD,O,EAAA,G,EAAA,0BAgCE,cAhCF,0BAoCE,cApCF,mCAsCE,cAtCF,wBAwCE,WAEE,OADAiM,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeC,eA1C/B,6BA6CE,WAEE,OADA/L,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeE,oBA/C/B,uBAkDE,WAEE,OADAhM,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeG,cApD/B,2BAuDE,WAEE,OADAjM,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeI,kBAzD/B,gCA4DE,WAEE,OADAlM,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeK,uBA9D/B,wBAiEE,WAEE,OADAnM,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeM,eAnE/B,gBAsEE,WAEE,OADApM,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeO,OAxE/B,oBA2EE,WAEE,OADArM,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAeQ,WA7E/B,sBAgFE,SAASvf,GAA+B,QACtC,2BAAOiQ,KAAK6O,eAAerB,aAAazd,UAAxC,aAAO,EAA0CvC,aAAjD,QAA0D,OAjF9D,iCAoFE,YACEwV,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BAC5B9O,KAAK8O,eAAeU,wBAtFxB,6BA2FE,WACE,IAAMtQ,EAASc,KAAK+O,aACdla,EAASmL,KAAKiP,YACpB,iBAAU1J,EAAAA,EAAAA,IAAe1Q,MAAAA,EAAAA,EAAU,EAAG,CACpC2Q,sBAAuB,IADzB,YAEMtG,MAAAA,OAFN,EAEMA,EAAQ5R,MAAMyC,UAhGxB,mCAmGE,WAAsC,MAC9BmP,EAASc,KAAK+O,aACdla,EAASmL,KAAKiP,YACpB,gBAAU7I,EAAAA,EAAAA,KAAAA,QAAV,QAAiCb,EAAAA,EAAAA,KAC9B1Q,MAAAA,EAAAA,EAAU,IAAX,UAAiBqK,MAAAA,OAAjB,EAAiBA,EAAQ8Q,0BAAzB,QAA+C,GAC/C,CACExK,sBAAuB,OAzG/B,iCA8GE,WACE,IAAMtG,EAASc,KAAKgP,kBACdna,EAASmL,KAAKkP,gBACpB,iBAAU3J,EAAAA,EAAAA,IAAe1Q,MAAAA,EAAAA,EAAU,EAAG,CAAE2Q,sBAAuB,IAA/D,YAAuEtG,MAAAA,OAAvE,EAAuEA,EAAQ5R,MAAMyC,UAjHzF,gCAoHE,WAAmC,MAC3BmP,EAASc,KAAKgP,kBACdna,EAASmL,KAAKmP,qBACpB,iBAAU5J,EAAAA,EAAAA,IAAe1Q,MAAAA,EAAAA,EAAU,EAAG,CAAE2Q,sBAAuB,IAA/D,sBACEtG,MAAAA,OADF,EACEA,EAAQ5R,MAAMyC,cADhB,QAC0B,MAxH9B,sCA4HE,WAAyC,MACjCmP,EAASc,KAAKgP,kBACdna,EAASmL,KAAKmP,qBACpB,gBAAU/I,EAAAA,EAAAA,KAAAA,QAAV,QAAiCb,EAAAA,EAAAA,KAC9B1Q,MAAAA,EAAAA,EAAU,IAAX,UAAiBqK,MAAAA,OAAjB,EAAiBA,EAAQ8Q,0BAAzB,QAA+C,GAC/C,CAAExK,sBAAuB,OAjI/B,qBAuIE,WAOE,OADAxC,EAAAA,EAAAA,IAAOhD,KAAK8O,eAAgB,4BACrB9O,KAAK8O,eAAegB,YA9I/B,8BAiJE,SAAiBG,GACfjQ,KAAK8O,eAAiBmB,O,8EAlJ1B,GAA+ClP,EAAAA,KAA/C,U,sDCJamP,GAA0BjP,EAAAA,EAAAA,KAAS,YAAmB,IAAhBwC,EAAgB,EAAhBA,UACjD,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAMzW,UAAU,OAAhB,iCACA,UAAC,KAAD,WAA4B,IAArByW,EAAU6L,SAAjB,aCEOa,GAAyBlP,EAAAA,EAAAA,KAAS,YAAmB,IAAhBwC,EAAgB,EAAhBA,UAC1C4B,GAAW1B,EAAAA,EAAAA,KAAK,WACpB,IAAMmM,EAAYrM,EAAUqM,UAC5B,GAAIA,EAAW,CACb,IAAQjb,EAAsCib,EAAtCjb,OAAQyY,EAA8BwC,EAA9BxC,SAAU8C,EAAoBN,EAApBM,gBAC1B,iBAAU7K,EAAAA,EAAAA,IAAe1Q,EAAQ,CAAE2Q,sBAAuB8H,IAA1D,YAAyE8C,GAE3E,MAAO,MAGT,OACE,UAAC,KAAD,CACEzd,OACE,SAAC0d,EAAA,EAAD,CACE1d,MAAM,eACNmC,gBAAgB,YAChBC,iBAAkBsQ,IAGtBpQ,MAAM,EACNC,kBAAgB,EATlB,WAWE,SAACob,EAAA,EAAD,CACElB,aAAc3L,EAAU2L,aACxBL,aAActL,EAAUsL,aACxBC,kBAAmBvL,EAAUuL,qBAE/B,SAACuB,EAAA,EAAD,CAAgB9M,UAAWA,EAAW+M,cAAc,SAACN,EAAD,CAAczM,UAAWA,Y,YC/BtEgN,IAAwBxP,EAAAA,EAAAA,KAAS,YAAyB,IAAxB,EAAwB,EAAxB,UAAavU,EAAW,EAAXA,KACpDwS,EAASxS,WAAAA,EAAoB+W,EAApB/W,aAA6C+W,EAA5D,kBACMiN,EACJhkB,WAAAA,EAAoB+W,EAApB/W,kBAAkD+W,EADpD,sBAEMkN,EACJjkB,WAAAA,EAAAA,IAAAA,OACQ+W,EADR/W,yBAAAA,qBAAAA,OAEyB+W,EAH3B,sBAKA,OACE,2BACE,eAAanW,MAAO4R,MAAAA,OAAP,EAAOA,EAApB,MAAmC7R,KAAnC,MACA,2BACE,wBAAW,KACX,wBAAW,a,o9BCLnB,IAAMuE,IAAY,mDAIZgE,IAAU,mDAOVE,IAAW,oDAcJ8a,IAA+D3P,EAAAA,EAAAA,KAC1E,YAA0B,YAAzB,EAAyB,EAAzB,MAASwC,EAAgB,EAAhBA,UACFoN,GAAK3P,EAAAA,EAAAA,IAAX,GACA2P,EAAAA,iBAAAA,GAEA,UAAoCtlB,EAAAA,EAAAA,WAApC,MAAM,EAAN,KAAM,EAAN,KAEMiL,EAAmB,WACvBnL,GAAAA,IAwBF,OACE,cACEsH,OACE,gEACoBke,EAAAA,oBADpB,aACoBA,EAAAA,MAAAA,cADpB,QACmB,GADnB,KAC0D,IAD1D,oBAEGA,EAAAA,yBAFH,aAEGA,EAAAA,MAAAA,cAFH,QAEE,MAGJxlB,MAPF,EAQE0H,QACE,iCACE,YAAc0Q,UAAd,EAA6B5X,SAA7B,EAAmDC,QAhChC,WAAM,MAC/BT,GAAAA,GACAwlB,EAF+B,uBAK/BnL,EAAAA,EAAAA,IAAW,CACT/b,KADS,sBAETW,OAAQ,CACNwmB,QAASrN,EAAAA,aAAAA,MADH,OAENsN,QAAStN,EAAAA,kBAAAA,MAFH,OAGNuN,UAAUhD,EAAAA,EAAAA,IAAQvK,EAAD,aAAyBA,QAAAA,EAAAA,EAAAA,oBAAAA,IAAAA,OAAAA,EAAAA,EAAAA,MAAAA,WAHpC,GAINwN,SAAUxN,EAJJ,kBAKNyN,UAAUlD,EAAAA,EAAAA,IAAQvK,EAAAA,YAAyBA,EAAAA,aAA1B,6BAqBf,cAAc3X,QAAd,OAGJ6H,aAdF,aAgBE,iDACA,gBAAS3G,UAAT,kBACE,4BACE,aAAYyW,UAAZ,EAA2B/W,KAA3B,YACA,kBACA,aAAY+W,UAAZ,EAA2B/W,KAA3B,oBAEF,YAAa+W,UAAb,QAEF,YAAiBxT,SA9BQ,SAACkhB,GAC5BC,EAAAA,Y,oGCtEAvmB,GAAO,iDAOPyK,GAAgB,yDAqChBC,GAAS,iDAKF8b,EAAgB,WAC3B,OACE,sBACE,sBACE,YAAW1nB,KAAX,oB,wRCtDKkI,GAAO,iDAqBP+B,GAAS,kDASTC,GAAU,kDAOV/I,GAAW,qDAWX6C,GAAW,oDAQXmG,GAAS,mDAaTC,GAAQ,6CAMRC,GAAE,6CAMFC,GAAS,mD","sources":["webpack://@p2p-wallet-web/web/src/components/common/ButtonCancel/ButtonCancel.tsx","webpack://@p2p-wallet-web/web/./src/app/hooks/useCloseTokenAccount.ts","webpack://@p2p-wallet-web/web/src/components/modals/CloseTokenAccountModal/CloseTokenAccountModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ErrorModal/ErrorModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ProceedUsernameModal/ProceedUsernameModal.tsx","webpack://@p2p-wallet-web/web/src/components/common/FeePaySelector/TokenAccountRow/TokenAccountRow.tsx","webpack://@p2p-wallet-web/web/src/components/common/FeePaySelector/FeePaySelector.tsx","webpack://@p2p-wallet-web/web/./src/components/common/HMSCountdown/utils.ts","webpack://@p2p-wallet-web/web/./src/components/common/HMSCountdown/HMSCountdown.tsx","webpack://@p2p-wallet-web/web/./src/utils/hooks/useIntervalHook.ts","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/Create/Create.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/TopUp/TopUp.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/SelectListMobileModal/SelectListMobileModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/common/AddressText/AddressText.tsx","webpack://@p2p-wallet-web/web/src/components/common/TransactionDetails/TransactionDetails.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/Send/Send.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionDetailsModal/TransactionDetailsModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/ui/Modal/Modal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/components/common/ButtonCancel/ButtonCancel.tsx","webpack://@p2p-wallet-web/web/src/new/ui/components/common/ErrorHint/ErrorHint.tsx","webpack://@p2p-wallet-web/web/src/new/ui/components/common/PasswordInput/PasswordInput.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ActionsMobileModal/ActionButton/ActionButton.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ActionsMobileModal/ActionsMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ChooseBuyTokenMobileModal/ActionRow.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.ViewModel.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/Modal/Modal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/TransactionProgress/TransactionProgress.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/Status/TransactionID/TransactionID.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ProcessTransactionModal/ProcessTransactionModal.ViewModel.ts","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/Status/HeaderLabel/HeaderLabel.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/Status/ProgressView/ProgressView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ProcessTransactionModal/ProcessTransactionModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/common/styled.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ReceiveBitcoinModal/Create/RenBTCButton/RenBTCButton.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/Create/WalletSelectorContent/WalletSelectorContent.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/Create/Create.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ReceiveBitcoinModal/RenBTCStatusService/RenBTCStatusService.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.ViewModel.ts","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/TopUp/TopUp.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/SelectListMobileModal/SelectListMobileModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/AmountSummaryView/AmountSummaryView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/RecipientView/RecipientView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSendModal/ConfirmSendModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/common/SectionPassword/SectionPassword.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSwapModal/ActionButton/ActionButton.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/confirmModals/ConfirmSwapModal/ConfirmSwapModal.ViewModel.ts","webpack://@p2p-wallet-web/web/./src/new/ui/modals/confirmModals/ConfirmSwapModal/DetailsView/SlippageView/SlippageView.tsx","webpack://@p2p-wallet-web/web/./src/new/ui/modals/confirmModals/ConfirmSwapModal/DetailsView/DetailsView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSwapModal/WalletView/WalletView.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/ConfirmSwapModal/ConfirmSwapModal.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/common/ArrowDown/ArrowDown.tsx","webpack://@p2p-wallet-web/web/src/new/ui/modals/confirmModals/common/styled.ts"],"sourcesContent":["import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useSolana, useTokenAccountsContext, useWallet } from '@p2p-wallet-web/core';\nimport type { HandleTXResponse } from '@p2p-wallet-web/sail';\nimport { useSail } from '@p2p-wallet-web/sail';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { closeAccount } from 'app/instructions';\n\nexport type CloseTokenParams = {\n  publicKey: PublicKey;\n};\n\nexport const useCloseTokenAccount = () => {\n  const { providerMut } = useSolana();\n  const { publicKey } = useWallet();\n  const { handleTX } = useSail();\n  const { updateUserTokenAccountKeys } = useTokenAccountsContext();\n\n  return useCallback(\n    async (params: CloseTokenParams): Promise<HandleTXResponse> => {\n      if (!providerMut) {\n        throw new Error('Provider not ready');\n      }\n\n      const tx = closeAccount(providerMut, params.publicKey, publicKey);\n      const result = await handleTX(tx, `Close token account ${params.publicKey.toBase58()}`);\n      if (result.success) {\n        // TODO: as i checked, you need to reinvestigate better way to update tokens after close\n        // because now it shows after this update\n        updateUserTokenAccountKeys();\n      }\n\n      return result;\n    },\n    [handleTX, providerMut, publicKey],\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type * as web3 from '@solana/web3.js';\nimport type { History } from 'history';\n\nimport { useCloseTokenAccount } from 'app/hooks';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 0;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst CloseAccountIcon = styled(Icon)`\n  width: 25px;\n  height: 25px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px;\n`;\n\nconst ButtonClose = styled(Button)`\n  margin-right: 16px;\n\n  color: #f43d3d;\n\n  border: 1px solid #f43d3d;\n\n  &:disabled {\n    background: #f77;\n    border: none;\n    opacity: 0.5;\n  }\n`;\n\nconst ButtonCancel = styled(Button)`\n  min-width: 93px;\n`;\n\ntype Props = {\n  publicKey: web3.PublicKey;\n  tokenName: string;\n  history: History;\n  close: () => void;\n};\n\nexport const CloseTokenAccountModal: FunctionComponent<Props> = ({\n  publicKey,\n  tokenName,\n  history,\n  close,\n}) => {\n  const closeTokenAccount = useCloseTokenAccount();\n  const [isExecuting, setIsExecuting] = useState(false);\n\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  const handleCloseTokenAButtonClick = async () => {\n    try {\n      setIsExecuting(true);\n      await closeTokenAccount({ publicKey });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsExecuting(false);\n    }\n\n    setTimeout(() => {\n      history.push('/wallets');\n    }, 100);\n\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <CloseAccountIcon name=\"bucket\" />\n      </IconWrapper>\n      <Header>{`Close ${tokenName} account?`}</Header>\n      <Description>\n        Are you sure you want to delete token account? This will permanently disable token transfers\n        to this address and remove it from your wallet.\n      </Description>\n      <Buttons>\n        <ButtonClose disabled={isExecuting} onClick={handleCloseTokenAButtonClick}>\n          Close token account\n        </ButtonClose>\n        <ButtonCancel lightBlue disabled={isExecuting} onClick={handleCloseButtonClick}>\n          Cancel\n        </ButtonCancel>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 24px;\n\n  overflow: hidden;\n\n  background: #fff;\n\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px;\n  padding-bottom: 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px 0;\n`;\n\nconst ButtonStyled = styled(Button)`\n  width: 120px;\n`;\n\ntype Props = {\n  icon: string;\n  header: string;\n  text: string;\n  close: () => void;\n};\n\nexport const ErrorModal: FunctionComponent<Props> = ({ icon, header, text, close }) => {\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <StyledIcon name={icon} />\n      </IconWrapper>\n      <Header>{header}</Header>\n      <Description>{text}</Description>\n      <Buttons>\n        <ButtonStyled primary onClick={handleCloseButtonClick}>\n          Ok\n        </ButtonStyled>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { useSettings } from 'app/contexts/general/settings';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  padding: 22px 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n\n  text-align: center;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Description = styled.div`\n  padding: 16px 20px 24px;\n\n  font-weight: 600;\n  font-size: 16px;\n`;\n\nconst Buttons = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 16px;\n  padding: 16px 20px;\n`;\n\nconst ButtonCancel = styled(Button)`\n  width: 234px;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 32px;\n  right: 32px;\n\n  flex-shrink: 0;\n  width: 36px;\n  height: 36px;\n  margin: -10px -12px -10px 0;\n\n  color: #a3a5ba;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n\n  transition: color 0.15s;\n\n  appearance: none;\n\n  &:hover {\n    color: #000;\n  }\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 14px;\n  height: 14px;\n`;\n\ntype Props = {\n  close: (isHide?: boolean) => void;\n};\n\nexport const ProceedUsernameModal: FC<Props> = ({ close }) => {\n  const { updateSettings } = useSettings();\n\n  const handleCloseButtonClick = () => {\n    updateSettings({ usernameBannerHiddenByUser: true });\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <Header>Proceed without a username?</Header>\n      <Description>\n        Anytime you want, you can easily reserve a username by going to the settings in the Android\n        or iOS app.\n      </Description>\n      <Buttons>\n        <ButtonCancel primary onClick={handleCloseButtonClick}>\n          Proceed &amp; don’t show again\n        </ButtonCancel>\n      </Buttons>\n      <CloseButton type=\"button\" onClick={handleCloseClick}>\n        <CloseIcon name=\"close\" />\n      </CloseButton>\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\n\nconst Wrapper = styled.div`\n  padding: 12px;\n\n  border: 0.5px solid transparent;\n  border-radius: 12px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n    border-color: ${theme.colors.textIcon.links};\n  }\n`;\n\nconst ItemWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 44px;\n`;\n\nconst Info = styled.div`\n  flex: 1;\n  margin-left: 12px;\n`;\n\nconst Top = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 140%;\n  letter-spacing: 0.02em;\n`;\n\nconst Bottom = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\ntype Props = {\n  tokenAccount: TokenAccount;\n  onClick?: (tokenAccount: TokenAccount) => void;\n  className?: string;\n};\n\nexport const TokenAccountRow: FunctionComponent<Props> = ({ tokenAccount, onClick, className }) => {\n  const handleClick = () => {\n    if (onClick) {\n      onClick(tokenAccount);\n    }\n  };\n\n  const { loading } = tokenAccount;\n\n  return (\n    <Wrapper onClick={handleClick} className={className}>\n      <ItemWrapper>\n        {loading ? (\n          <Skeleton width={44} height={44} borderRadius={12} />\n        ) : (\n          <TokenAvatar size={44} token={tokenAccount.balance?.token} />\n        )}\n        <Info>\n          <Top>\n            {loading ? (\n              <Skeleton width={100} height={16} />\n            ) : (\n              <>{tokenAccount.balance?.formatUnits()}</>\n            )}\n          </Top>\n          <Bottom>\n            {loading ? (\n              <Skeleton width={50} height={16} />\n            ) : tokenAccount.balance ? (\n              <AmountUSD value={tokenAccount.balance} />\n            ) : (\n              <div />\n            )}\n          </Bottom>\n        </Info>\n      </ItemWrapper>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { shadows, theme } from '@p2p-wallet-web/ui';\nimport type { Token } from '@saberhq/token-utils';\nimport classNames from 'classnames';\n\nimport { useMarketsData } from 'app/contexts';\nimport { Empty } from 'components/common/Empty';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { Icon } from 'components/ui';\nimport { SearchInput } from 'new/ui/components/ui/SearchInput';\nimport { matchesFilter, sortByRules } from 'utils/tokens';\n\nimport { TokenAccountRow } from './TokenAccountRow';\n\nconst Wrapper = styled.div`\n  position: relative;\n`;\n\nconst MainWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n  cursor: pointer;\n\n  &.isOpen {\n    border-color: ${theme.colors.textIcon.active};\n  }\n`;\n\nconst SelectedWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst InfoWrapper = styled.div`\n  display: grid;\n  grid-gap: 8px;\n\n  margin-left: 12px;\n`;\n\nconst Line = styled.div`\n  line-height: 17px;\n`;\n\nconst Text = styled.div`\n  display: inline-block;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n\n  &.gray {\n    color: ${theme.colors.textIcon.secondary};\n  }\n`;\n\nconst ChevronIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  &.isOpen {\n    color: ${theme.colors.textIcon.active};\n\n    transform: rotate(180deg);\n  }\n`;\n\nconst DropDownListContainer = styled.div`\n  position: absolute;\n  top: 100%;\n  right: 0;\n  left: 0;\n  z-index: 1;\n\n  padding: 8px;\n  overflow: hidden;\n\n  background: ${theme.colors.bg.primary};\n  border-radius: 8px;\n  ${shadows.notification};\n`;\n\nconst DropDownHeader = styled.div`\n  padding-bottom: 8px;\n\n  backdrop-filter: blur(15px);\n`;\n\nconst DropDownList = styled.div`\n  display: grid;\n  grid-gap: 8px;\n  max-height: 400px;\n  overflow-y: auto;\n\n  &.isShortList {\n    max-height: 200px;\n  }\n`;\n\ninterface Props {\n  tokenAccounts: readonly TokenAccount[];\n  onTokenAccountChange: (token: Token, tokenAccount: TokenAccount | null) => void;\n  isShortList?: boolean;\n}\n\nexport const FeePaySelector: FC<Props> = ({ tokenAccounts, onTokenAccountChange, isShortList }) => {\n  const selectorRef = useRef<HTMLDivElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [filter, setFilter] = useState('');\n\n  const symbols = useMemo(() => {\n    return tokenAccounts.map((tokenAccount) => tokenAccount.balance?.token.symbol);\n  }, [tokenAccounts]);\n  const markets = useMarketsData(symbols);\n\n  const handleAwayClick = (e: MouseEvent) => {\n    if (\n      !selectorRef.current?.contains(e.target as HTMLDivElement) &&\n      !dropdownRef.current?.contains(e.target as HTMLDivElement)\n    ) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', handleAwayClick, true);\n\n    return () => {\n      window.removeEventListener('click', handleAwayClick, true);\n    };\n  }, []);\n\n  const handleFilterChange = (value: string) => {\n    const nextFilter = value.trim();\n\n    setFilter(nextFilter);\n  };\n\n  const filteredTokenAccounts = useMemo(() => {\n    if (!tokenAccounts) {\n      return [];\n    }\n\n    const filteredWithBalance = tokenAccounts.filter((account) => account.balance?.greaterThan(0));\n\n    return filteredWithBalance\n      .filter(\n        (account) =>\n          account.balance &&\n          (matchesFilter(account.balance.token.symbol, filter) ||\n            matchesFilter(account.balance.token.name, filter)),\n      )\n      .sort(sortByRules(markets));\n  }, [tokenAccounts, filter, markets]);\n\n  const handleTokenAccountClick = (nextTokenAccount: TokenAccount) => {\n    if (!nextTokenAccount.balance) {\n      return;\n    }\n\n    setIsOpen(false);\n    onTokenAccountChange(nextTokenAccount.balance?.token, nextTokenAccount);\n  };\n\n  return (\n    <Wrapper>\n      <MainWrapper\n        ref={selectorRef}\n        onClick={() => setIsOpen((state) => !state)}\n        className={classNames({ isOpen })}\n      >\n        <SelectedWrapper>\n          <div>\n            <TokenAvatar symbol=\"SOL\" size={44} />\n          </div>\n          <InfoWrapper>\n            <Line>\n              <Text className=\"gray\">USDC account creation:</Text> <Text>~$0.50</Text>\n            </Line>\n            <Line>\n              <Text className=\"gray\">Pay with:</Text> <Text>0.509 USDC</Text>\n            </Line>\n          </InfoWrapper>\n        </SelectedWrapper>\n        <ChevronIcon name=\"chevron\" className={classNames({ isOpen })} />\n      </MainWrapper>\n      {isOpen ? (\n        <DropDownListContainer ref={dropdownRef}>\n          <DropDownHeader>\n            <SearchInput\n              placeholder=\"Search for token\"\n              value={filter}\n              onChange={handleFilterChange}\n            />\n          </DropDownHeader>\n          <DropDownList ref={listRef} className={classNames({ isShortList })}>\n            {filteredTokenAccounts?.length ? (\n              <>\n                {filteredTokenAccounts.map(\n                  (account) =>\n                    account.key && (\n                      <TokenAccountRow\n                        key={account.key.toBase58()}\n                        tokenAccount={account}\n                        onClick={handleTokenAccountClick}\n                      />\n                    ),\n                )}\n              </>\n            ) : undefined}\n            {!filteredTokenAccounts?.length ? <Empty type=\"search\" /> : undefined}\n          </DropDownList>\n        </DropDownListContainer>\n      ) : undefined}\n    </Wrapper>\n  );\n};\n","const getHours = (milliseconds: number) => {\n  return Math.floor(milliseconds / (1000 * 60 * 60));\n};\n\nconst millisecondsToHMS = (milliseconds: number) => {\n  const seconds = Math.floor((milliseconds / 1000) % 60);\n  const minutes = Math.floor((milliseconds / 1000 / 60) % 60);\n  // take absolute hours as they may be greater than 24\n  const hours = getHours(milliseconds);\n  return { hours, minutes, seconds };\n};\n\nconst pad = (value: number) => {\n  return String(value).padStart(2, '0');\n};\n\nexport const getFormattedHMS = (milliseconds: number) => {\n  const { hours, minutes, seconds } = millisecondsToHMS(milliseconds);\n  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;\n};\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport { useIntervalHook } from 'utils/hooks/useIntervalHook';\n\nimport { getFormattedHMS } from './utils';\n\ninterface Props {\n  milliseconds: number;\n}\n\nexport const HMSCountdown: FC<Props> = ({ milliseconds }) => {\n  const [count, setCount] = useState(milliseconds);\n\n  useIntervalHook(() => {\n    if (count > 0) {\n      setCount((ms) => ms - 1000);\n    }\n  }, 1000);\n\n  const time = getFormattedHMS(count);\n\n  return <strong>{time}</strong>;\n};\n","import { useEffect, useRef } from 'react';\n\n// Declarative setInterval with auto-cleanup and mutable delay:\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useIntervalHook(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback);\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import { styled } from '@linaria/react';\n\nimport { Modal } from 'components/ui/Modal';\n\nexport const WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nexport const Section = styled.div`\n  display: grid;\n  grid-gap: 24px;\n  padding: 16px 0 24px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-gap: 16px;\n  margin: 0;\n  padding-left: 32px;\n`;\n\nexport const Row = styled.li``;\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { useSolana, useUserTokenAccounts } from '@p2p-wallet-web/core';\nimport { Bitcoin } from '@renproject/chains-bitcoin';\nimport { Solana } from '@renproject/chains-solana';\nimport type { Token } from '@saberhq/token-utils';\nimport { Feature } from 'flagged';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { FeePaySelector } from 'components/common/FeePaySelector';\nimport { HMSCountdown } from 'components/common/HMSCountdown';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Button } from 'components/ui';\nimport { FEATURE_PAY_BY } from 'config/featureFlags';\nimport { getRemainingGatewayTime } from 'utils/hooks/renBridge/useLockAndMint';\nimport { useRenNetwork } from 'utils/hooks/renBridge/useNetwork';\nimport { useLockAndMintProvider } from 'utils/providers/LockAndMintProvider';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const Create: FC<Props> = ({ close }) => {\n  const solanaProvider = useSolana();\n  const network = useRenNetwork();\n  const tokenAccounts = useUserTokenAccounts();\n  const { expiryTime } = useLockAndMintProvider();\n\n  // TODO: use for progress bar in Modal. Add this feature to modal\n  const [creating, setCreating] = useState(false);\n\n  const handleFeeTokenAccountChange = (\n    _nextToken: Token,\n    nextTokenAccount: TokenAccount | null,\n  ) => {\n    if (!nextTokenAccount?.key) {\n      return;\n    }\n  };\n\n  const handleCreateAccountClick = async () => {\n    try {\n      setCreating(true);\n      await new Solana(solanaProvider, network).createAssociatedTokenAccount(Bitcoin.asset);\n      close(true);\n    } catch (error) {\n      ToastManager.error((error as Error).message);\n      console.error(error);\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleCreateAccountClick}>\n            Pay 0.002928 SOL & Continue\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>. You can choose which currency to pay in\n            below.\n          </Row>\n        </List>\n\n        <Feature name={FEATURE_PAY_BY}>\n          <FeePaySelector\n            tokenAccounts={tokenAccounts}\n            onTokenAccountChange={handleFeeTokenAccountChange}\n            isShortList\n          />\n        </Feature>\n\n        <List>\n          <Row>\n            This address accepts <strong>only Bitcoin</strong>. You may lose assets by sending\n            another coin.\n          </Row>\n          <Row>\n            Minimum transaction amount of <strong>0.000112 BTC</strong>.\n          </Row>\n          <Row>\n            <strong>\n              <HMSCountdown milliseconds={getRemainingGatewayTime(expiryTime)} />\n            </strong>\n            &nbsp; is the remaining time to safely send the assets\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory } from 'react-router';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { Button } from 'components/ui';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const TopUp: FC<Props> = ({ close }) => {\n  const history = useHistory();\n\n  const handleTopUpClick = () => {\n    close(false);\n    history.push('/buy');\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleTopUpClick}>\n            Top up your account\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            A <strong>renBTC account is required</strong> to receive bitcoins over the Bitcoin\n            network.\n          </Row>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>.\n          </Row>\n          <Row>\n            You <strong>don't have funds</strong> to pay for account creation, but if someone sends\n            renBTC to your address, it will be created for you.\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport type { u64 } from '@solana/spl-token';\n\nimport type { ModalPropsType } from 'app/contexts';\n\nimport { Create } from './Create';\nimport { TopUp } from './TopUp';\n\ninterface Props {\n  accountRentExemption: u64;\n  nativeBalance: TokenAmount;\n}\n\nexport const ReceiveBitcoinModal: FC<ModalPropsType<boolean, Props>> = (props) => {\n  const nativeLamports = props.nativeBalance?.toU64().toNumber() ?? 0;\n  const lamportsRentExcemption = props.accountRentExemption.toNumber();\n  const isEnoughSol = nativeLamports > lamportsRentExcemption;\n\n  if (isEnoughSol) {\n    return <Create close={props.close} />;\n  }\n\n  return <TopUp close={props.close} />;\n};\n","import type { FC, ReactElement } from 'react';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { Modal } from 'components/ui/Modal';\n\ntype Props = {\n  items: ReactElement[];\n  title?: string;\n};\n\nexport const SelectListMobileModal: FC<ModalPropsType & Props> = ({ items, close, title }) => {\n  return (\n    <Modal noDelimiter={false} close={close} title={title}>\n      {items}\n    </Modal>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 27px;\n\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 40%;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 5px;\n  left: -2px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 19px;\n\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nconst Address = styled.div`\n  flex-grow: 1;\n\n  color: ${theme.colors.textIcon.primary};\n\n  &.small {\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 140%;\n    letter-spacing: 0.05em;\n  }\n\n  &.medium {\n    font-weight: 500;\n    font-size: 16px;\n    line-height: 140%;\n    letter-spacing: 0.04em;\n  }\n\n  &.big {\n    font-weight: 600;\n    font-size: 18px;\n  }\n`;\n\nconst BlueText = styled.span`\n  color: ${theme.colors.textIcon.active};\n`;\n\ntype Props = {\n  address: string;\n  small?: boolean;\n  medium?: boolean;\n  big?: boolean;\n  gray?: boolean;\n  className?: string;\n};\n\n// TODO: trim middle symbols if don't fit width\nexport const AddressText: FC<Props> = ({\n  address,\n  small,\n  medium,\n  big,\n  gray = false,\n  className,\n}) => {\n  return (\n    <Address title={address} className={classNames(className, { gray, small, medium, big })}>\n      <BlueText>{address.slice(0, 4)}</BlueText>\n      {address.slice(4, -4)}\n      <BlueText>{address.slice(-4)}</BlueText>\n    </Address>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { UseSendState } from 'app/contexts';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { ListWrapper, Row, Text } from 'components/ui/AccordionDetails/common';\n\nexport interface TransactionDetailsProps {\n  sendState?: UseSendState;\n  btcAddress?: string;\n  isOpen?: boolean;\n  amount?: TokenAmount;\n}\n\nconst TokenAndUsd = styled.div`\n  display: flex;\n`;\n\nconst AmountUSDStyled = styled(AmountUSD)`\n  margin-left: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const TransactionDetails: FC<TransactionDetailsProps> = ({ sendState, amount }) => {\n  /*const {\n    settings: { useFreeTransactions },\n  } = useSettings();*/\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Transaction details\"\n          titleBottomName=\"Total\"\n          titleBottomValue={sendState?.details.totalAmount || ''}\n        />\n      }\n      open={false}\n      noContentPadding\n    >\n      <ListWrapper>\n        <Row>\n          <Text className=\"gray\">Receive</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.receiveAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n        {/*<Row>\n          <Text className=\"gray\">Transaction fee</Text>\n          {useFreeTransactions ? (\n            <Text>\n              Free{' '}\n              <Text className=\"green inline-flex\">\n                (Paid by P2P.org) <FeeTransactionTooltip userFreeFeeLimits={userFreeFeeLimits} />\n              </Text>\n            </Text>\n          ) : (\n            <Text>1</Text>\n          )}\n          <Text>5000 lamport</Text>\n        </Row>*/}\n        {/*sendState?.details.accountCreationAmount ? (\n          <Row>\n            <Text className=\"gray\">{sendState.destinationAccount?.symbol} account creation</Text>\n            <TokenAndUsd>\n              <Text>{sendState.details.accountCreationAmount}</Text>\n              <AmountUSD\n                prefix=\"(~\"\n                postfix=\")\"\n                amount={networkFees?.accountRentExemption}\n                tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n              />\n            </TokenAndUsd>\n          </Row>\n        ) : undefined*/}\n      </ListWrapper>\n      <ListWrapper className=\"total\">\n        <Row>\n          <Text>Total</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.totalAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n      </ListWrapper>\n    </Accordion>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  To,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props & TransactionDetailsProps> = ({ params, sendState, btcAddress }) => {\n  const address = params.destination?.toBase58?.() || btcAddress;\n  const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>\n                <To>To</To>\n                {isFullName ? params.username : `${params.username}.p2p.sol`}\n              </Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>{address && <AddressText address={address} medium />}</InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <TransactionDetails sendState={sendState} amount={params.amount} />\n    </Section>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { ModalPropsType } from 'app/contexts/general/modals/types';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\n// import type { SwapParams } from './Swap';\n// import { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ntype ModalParams = {\n  type: 'send' | 'swap';\n  params: TransferParams /*| SwapParams;*/;\n};\n\nexport type TransactionConfirmModalProps = TransactionDetailsProps &\n  ModalParams &\n  FeesOriginalProps;\n\nexport const TransactionConfirmModal: FunctionComponent<\n  ModalPropsType & TransactionConfirmModalProps\n> = ({ type, params, close, btcAddress, swapInfo, sendState }) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled = isSecretKeyWallet && (!password || hasError);\n\n  const renderTitle = () => {\n    switch (type) {\n      case 'send':\n        return <ModalTitle>Confirm sending {params.source.balance?.token.symbol}</ModalTitle>;\n      default:\n        return (\n          <ModalTitle>\n            Confirm swapping {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </ModalTitle>\n        );\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = (\n          <>\n            <SendIcon name=\"swap\" />\n            Swap {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </>\n        );\n        break;\n      case 'send':\n      default:\n        action = (\n          <>\n            <SendIcon name=\"top\" />\n            Send {params.amount.formatUnits()}\n          </>\n        );\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <ButtonCancel onClick={handleCloseClick} />\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title={renderTitle()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n      noDelimiter={false}\n    >\n      {type === 'send' ? <ActionTitle>You are going to send</ActionTitle> : undefined}\n      {type === 'send' ? (\n        <Send params={params} sendState={sendState} btcAddress={btcAddress} />\n      ) : undefined}\n      {/*{type === 'swap' ? (*/}\n      {/*  <Swap params={params as SwapParams} swapInfo={swapInfo} showTitle={true} />*/}\n      {/*) : undefined}*/}\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled\n            value={password}\n            onChange={handlePasswordChange}\n            isError={hasError}\n          />\n          {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport {\n  SwapTransaction,\n  titleCase,\n  TransferTransaction,\n  useTokenAccount,\n  useTokenAccountAmount,\n  useTransaction,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { usePubkey } from '@p2p-wallet-web/sail';\nimport type { TransactionSignature } from '@solana/web3.js';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { getExplorerUrl } from 'utils/connection';\nimport { formatNumber } from 'utils/format';\nimport { shortAddress } from 'utils/tokens';\n\nimport {\n  ButtonExplorer,\n  CloseIcon,\n  CloseWrapper,\n  Content,\n  Desc,\n  FieldsWrapper,\n  FieldTitle,\n  FieldValue,\n  FieldWrapper,\n  Footer,\n  Header,\n  ProgressWrapper,\n  SendWrapper,\n  ShareIcon,\n  ShareWrapper,\n  SwapAmount,\n  SwapBlock,\n  SwapColumn,\n  SwapIcon,\n  SwapInfo,\n  SwapWrapper,\n  Title,\n  ValueCurrency,\n  ValueOriginal,\n  WrapperModal,\n} from '../common/styled';\n\nconst StatusWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 24px;\n`;\n\nconst Status = styled.div`\n  display: flex;\n  align-items: center;\n  height: 32px;\n  padding: 2px 10px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 20px;\n\n  background: rgba(246, 246, 248, 0.5);\n  border-radius: 6px;\n`;\n\nconst StatusIndicator = styled.div`\n  width: 8px;\n  height: 8px;\n  margin-right: 6px;\n\n  background: #77db7c;\n  border-radius: 2px;\n\n  &.error {\n    background: #f43d3d;\n  }\n\n  &.processing {\n    background: #ffa631;\n  }\n`;\n\nconst FieldRowWrapper = styled(FieldWrapper)`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 36px;\n`;\n\nconst ColumnWrapper = styled.div``;\n\nconst FieldInfo = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nconst AddressTitle = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst AddressValue = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n`;\n\nconst FieldTitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PaidByBadge = styled.div`\n  padding: 1px 8px;\n\n  color: #5887ff;\n  font-weight: 600;\n  font-size: 12px;\n\n  background: #eff3ff;\n  border-radius: 4px;\n`;\n\nconst PaddedHeader = styled(Header)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 24px;\n`;\n\ntype Props = {\n  signature: TransactionSignature;\n  source: string;\n  close: () => void;\n};\n\nexport const TransactionDetailsModal: FC<Props> = ({ signature, source: sourceAddress, close }) => {\n  const [isShowDetails, setShowDetails] = useState(false);\n  const { network } = useWallet();\n  const transaction = useTransaction(signature, sourceAddress);\n\n  const sourceTokenAccount = useTokenAccount(usePubkey(transaction?.data?.source));\n  const destinationTokenAccount = useTokenAccount(usePubkey(transaction?.data?.destination));\n\n  const tokenAmount = useTokenAccountAmount(\n    usePubkey(transaction?.details.tokenAccount),\n    transaction?.details.amount,\n  );\n\n  // useEffect(() => {\n  //   const mount = async () => {\n  //     const trx = unwrapResult(await dispatch(getTransaction(signature)));\n  //\n  //     if (!trx) {\n  //       setTimeout(mount, 3000);\n  //     }\n  //   };\n  //\n  //   if (!transaction) {\n  //     void mount();\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [signature]);\n\n  if (transaction?.loading) {\n    return null;\n  }\n\n  const handleToggleShowDetailsClick = () => {\n    setShowDetails((state) => !state);\n  };\n\n  const renderFromTo = () => {\n    const type = transaction?.details.type;\n\n    const source = transaction?.data?.source;\n    const destination = transaction?.data?.destination;\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <>\n          {source ? (\n            <FieldWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldValue>{source}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n          {destination ? (\n            <FieldWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldValue>{destination}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n        </>\n      );\n    }\n\n    if (type && ((source && sourceToken) || (destination && destinationToken))) {\n      return (\n        <FieldRowWrapper>\n          {source && sourceToken ? (\n            <ColumnWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar symbol={sourceToken.symbol} address={sourceToken.address} size={48} />\n                <AddressWrapper>\n                  <AddressTitle>{sourceToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(source)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n          {destination && destinationToken ? (\n            <ColumnWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar\n                  symbol={destinationToken.symbol}\n                  address={destinationToken.address}\n                  size={48}\n                />\n                <AddressWrapper>\n                  <AddressTitle>{destinationToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(destination)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n        </FieldRowWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const renderAmountBlock = () => {\n    const type = transaction?.details.type;\n\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <SwapWrapper>\n          <SwapColumn>\n            <SwapInfo>\n              {sourceTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={sourceToken?.symbol}\n                  address={sourceToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={50} height={16} />\n                ) : (\n                  <>- {sourceTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n          <SwapBlock>\n            <SwapIcon name=\"swap\" />\n          </SwapBlock>\n          <SwapColumn>\n            <SwapInfo>\n              {destinationTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={destinationToken?.symbol}\n                  address={destinationToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={80} height={16} />\n                ) : (\n                  <>+ {destinationTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n        </SwapWrapper>\n      );\n    }\n\n    if (transaction?.loading || sourceTokenAccount?.loading || tokenAmount.loading) {\n      return (\n        <SendWrapper>\n          <Skeleton width={70} height={53} />\n        </SendWrapper>\n      );\n    }\n\n    if (tokenAmount.balance) {\n      return (\n        <SendWrapper>\n          <ValueCurrency>\n            {transaction?.details.isReceiver ? '+' : '-'} {tokenAmount.balance.formatUnits()}\n          </ValueCurrency>\n          <ValueOriginal>\n            <AmountUSD\n              prefix={transaction?.details.isReceiver ? '+ ' : '- '}\n              value={tokenAmount.balance}\n            />\n          </ValueOriginal>\n        </SendWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const date = transaction?.raw?.blockTime\n    ? dayjs.unix(transaction.raw.blockTime).format('LLL')\n    : `${transaction?.raw?.slot} SLOT`;\n\n  const isShowFeeBadge =\n    transaction?.data instanceof TransferTransaction && transaction.data.wasPaidByP2POrg;\n\n  return (\n    <WrapperModal close={close}>\n      <PaddedHeader>\n        <Title>{titleCase(transaction?.details.type)}</Title>\n        <Desc title={`${transaction?.raw?.slot} SLOT`}>{date}</Desc>\n        <CloseWrapper onClick={close}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n      </PaddedHeader>\n      <ProgressWrapper />\n      <Content>\n        {/* {details.typeOriginal === 'transfer' ? ( */}\n        {/*  <SendWrapper> */}\n        {/*    <ValueCurrency> */}\n        {/*      {details.isReceiver ? '+' : '-'} {details.sourceAmount.toNumber()}{' '} */}\n        {/*      {details.sourceToken?.symbol} */}\n        {/*    </ValueCurrency> */}\n        {/*    <ValueOriginal> */}\n        {/*      <AmountUSD */}\n        {/*        prefix={details.isReceiver ? '+' : '-'} */}\n        {/*        symbol={details.sourceToken?.symbol} */}\n        {/*        value={details.sourceAmount} */}\n        {/*      /> */}\n        {/*    </ValueOriginal> */}\n        {/*  </SendWrapper> */}\n        {/* ) : undefined} */}\n\n        {renderAmountBlock()}\n        <StatusWrapper>\n          <Status>\n            <StatusIndicator\n              className={classNames({\n                error: !!transaction?.raw?.meta?.err,\n                // processing: !transaction?.raw?.slot,\n              })}\n            />{' '}\n            {transaction?.raw?.meta?.err\n              ? 'Failed'\n              : !transaction?.raw?.slot\n              ? 'Pending'\n              : 'Completed'}\n          </Status>\n        </StatusWrapper>\n        <FieldsWrapper>\n          {isShowDetails ? (\n            <>\n              {renderFromTo()}\n              {(sourceTokenAccount?.balance && destinationTokenAccount?.balance) ||\n              tokenAmount?.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Amount</FieldTitle>\n                  <FieldValue>\n                    {transaction?.data instanceof SwapTransaction ? (\n                      <>\n                        {sourceTokenAccount?.balance?.formatUnits()} to{' '}\n                        {destinationTokenAccount?.balance?.formatUnits()}\n                      </>\n                    ) : (\n                      <>{tokenAmount?.balance?.formatUnits()}</>\n                    )}\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {tokenAmount.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Value</FieldTitle>\n                  <FieldValue>\n                    <AmountUSD value={tokenAmount.balance} />\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {transaction?.raw?.meta ? (\n                <FieldWrapper>\n                  <FieldTitleWrapper>\n                    <FieldTitle>Transaction fee</FieldTitle>\n                    {isShowFeeBadge ? <PaidByBadge>Paid by p2p.org</PaidByBadge> : undefined}\n                  </FieldTitleWrapper>\n                  <FieldValue>{formatNumber(transaction.raw.meta?.fee)} lamports</FieldValue>\n                </FieldWrapper>\n              ) : null}\n              <FieldWrapper>\n                <FieldTitle>Block number</FieldTitle>\n                <FieldValue>#{transaction?.raw?.slot}</FieldValue>\n              </FieldWrapper>\n            </>\n          ) : undefined}\n          <FieldWrapper>\n            <FieldTitle>Transaction ID</FieldTitle>\n            <FieldValue>\n              {signature}{' '}\n              <a\n                href={getExplorerUrl('tx', signature, network)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer noindex\"\n                className=\"button\"\n              >\n                <ShareWrapper>\n                  <ShareIcon name=\"external\" />\n                </ShareWrapper>\n              </a>\n            </FieldValue>\n          </FieldWrapper>\n        </FieldsWrapper>\n      </Content>\n      <Footer className={classNames({ isCentered: true })}>\n        <ButtonExplorer lightGray onClick={handleToggleShowDetailsClick}>\n          {isShowDetails ? 'Hide transaction details' : 'Show transaction details'}\n        </ButtonExplorer>\n      </Footer>\n    </WrapperModal>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme, up, zIndexes } from '@p2p-wallet-web/ui';\n\nimport { Button, Icon } from 'components/ui';\nimport { Content as ModalContent, Modal } from 'components/ui/Modal';\n\nexport const StatusColors = styled.div`\n  &.isProcessing {\n    background: ${theme.colors.system.warningMain};\n  }\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const WrapperModal = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  padding: 0;\n  overflow: scroll;\n\n  background: ${theme.colors.bg.primary};\n\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n\n  ${ModalContent} {\n    ${up.tablet} {\n      width: 524px;\n    }\n\n    padding: 0;\n  }\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 24px;\n  font-style: normal;\n  line-height: 140%;\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n  padding: 0 30px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.bg.buttonPrimary};\n\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionLabel = styled(StatusColors)`\n  display: block;\n  width: 8px;\n  height: 8px;\n\n  margin-right: 8px;\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: ${theme.colors.bg.buttonSecondary};\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid rgba(0, 0, 0, 0.05);\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n\n    ${ShareIcon} {\n      color: ${theme.colors.textIcon.active};\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 20px;\n`;\n","import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  doNotCloseOnPathChangeMobile?: boolean;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  doNotCloseOnPathChangeMobile,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && !doNotCloseOnPathChangeMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, doNotCloseOnPathChangeMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 8px;\n\n  color: #f43d3d;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst WarningIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n  margin-right: 12px;\n\n  color: #f43d3d;\n`;\n\ninterface Props {\n  error: string;\n  noIcon?: boolean;\n}\n\nexport const ErrorHint: FC<Props> = ({ error, noIcon }) => {\n  return (\n    <Wrapper>\n      {!noIcon ? <WarningIcon name=\"warning\" /> : undefined}\n      {error}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useState } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\nconst WrapperLabel = styled.label`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  height: 54px;\n  padding: 0 15px;\n\n  border: 1px solid ${theme.colors.stroke.primary};\n  border-radius: 12px;\n  cursor: text;\n\n  &.isFocused {\n    background: ${theme.colors.bg.primary};\n    border-color: ${theme.colors.textIcon.active};\n    caret-color: ${theme.colors.textIcon.active};\n  }\n\n  &.isError {\n    border-color: ${theme.colors.system.errorMain};\n  }\n`;\n\nconst Input = styled.input`\n  flex: 1;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  font-family: 'Inter', sans-serif;\n  line-height: 22px;\n\n  background: transparent;\n  border: 0;\n  outline: none;\n\n  appearance: none;\n\n  &::placeholder {\n    color: ${theme.colors.textIcon.tertiary};\n\n    font-weight: 500;\n    font-size: 16px;\n    font-family: 'Inter', sans-serif;\n    font-style: normal;\n    line-height: 140%;\n  }\n`;\n\nconst EyeWrapper = styled.div`\n  cursor: pointer;\n`;\n\nconst EyeIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonSecondary};\n`;\n\nconst REGEX_PASSWORD = /[^\\w!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g;\n\ntype Props = {\n  onChange: (password: string) => void;\n  isError: boolean;\n};\n\nexport const PasswordInput: FC<\n  Props & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'onChange'>\n> = ({ onChange, onFocus, onBlur, className, isError, ...props }) => {\n  const [isShowPassword, setIsShowPassword] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(REGEX_PASSWORD, '');\n    onChange(value);\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(true);\n\n    if (onFocus) {\n      onFocus(e);\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    setIsFocused(false);\n\n    if (onBlur) {\n      onBlur(e);\n    }\n  };\n\n  const handleToggleShowPassword = () => {\n    setIsShowPassword((state) => !state);\n  };\n\n  return (\n    <WrapperLabel className={classNames(className, { isFocused, isError })}>\n      <Input\n        type={isShowPassword ? 'input' : 'password'}\n        {...props}\n        placeholder={'Password'}\n        onChange={handleChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n      <EyeWrapper onClick={handleToggleShowPassword}>\n        <EyeIcon name={isShowPassword ? 'eye' : 'eye-hide'} />\n      </EyeWrapper>\n    </WrapperLabel>\n  );\n};\n","import type { FC, HTMLAttributes } from 'react';\nimport React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n\n  &:not(:last-child)::before {\n    position: absolute;\n\n    bottom: -12px;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 20px;\n  height: 20px;\n`;\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon: string;\n}\n\nexport const ActionButton: FC<Props> = ({ icon, onClick, children }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      <IconWrapper>\n        <IconStyled name={icon} />\n      </IconWrapper>\n      {children}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { styled } from '@linaria/react';\n\nimport type { LayoutViewModel } from 'new/ui/components/common/Layout/Layout.ViewModel';\nimport { ActionButton } from 'new/ui/modals/ActionsMobileModal/ActionButton';\nimport { Modal } from 'new/ui/modals/Modal';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nconst Content = styled.div`\n  display: grid;\n  grid-gap: 25px;\n\n  padding: 18px 0;\n`;\n\ninterface Props {\n  layoutViewModel: LayoutViewModel;\n}\n\nexport const ActionsMobileModal: FC<Props & ModalPropsType> = ({ close, layoutViewModel }) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const handleButtonClick = (route: string) => () => {\n    close(false);\n\n    if (location.pathname !== route) {\n      history.push(route, { fromPage: location.pathname });\n    }\n  };\n\n  const handleBuyButtonClick = () => {\n    close(false);\n    layoutViewModel.openChooseBuyTokenMobileModal();\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  return (\n    <Modal close={handleCloseClick} noDelimiter>\n      <Content>\n        <ActionButton icon=\"plus\" onClick={handleBuyButtonClick}>\n          Buy\n        </ActionButton>\n        <ActionButton icon=\"bottom\" onClick={handleButtonClick('/receive')}>\n          Receive\n        </ActionButton>\n        <ActionButton icon=\"top\" onClick={handleButtonClick('/send')}>\n          Send\n        </ActionButton>\n        <ActionButton icon=\"swap\" onClick={handleButtonClick('/swap')}>\n          Swap\n        </ActionButton>\n      </Content>\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport type { Token, Wallet } from 'new/sdk/SolanaSDK';\nimport {\n  BaseTokenCellContent,\n  BaseWalletCellContent,\n} from 'new/ui/components/common/BaseWalletCellContent';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 26px 10px;\n`;\n\ninterface Props {\n  wallet?: Wallet;\n  token?: Token;\n  onClick: () => void;\n}\n\nexport const ActionRow: FC<Props> = ({ wallet, token, onClick }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      {token ? (\n        <BaseTokenCellContent token={token} isMobilePopupChild />\n      ) : (\n        <BaseWalletCellContent wallet={wallet} isMobilePopupChild />\n      )}\n    </Wrapper>\n  );\n};\n","import { action, makeObservable, observable, reaction, runInAction } from 'mobx';\nimport { singleton } from 'tsyringe';\n\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport type { Token, Wallet } from 'new/sdk/SolanaSDK';\nimport { CryptoCurrency } from 'new/services/BuyService/structures';\nimport { TokensRepository, WalletsRepository } from 'new/services/Repositories';\n\n@singleton()\nexport class ChooseBuyTokenMobileModalViewModel extends ViewModel {\n  solWallet?: Wallet;\n  usdcWallet?: Wallet;\n\n  solToken?: Token;\n  usdcToken?: Token;\n\n  constructor(private _wallets: WalletsRepository, private _tokensRepository: TokensRepository) {\n    super();\n\n    makeObservable(this, {\n      solWallet: observable,\n      usdcWallet: observable,\n\n      solToken: observable,\n      usdcToken: observable,\n    });\n\n    this._setWallets(\n      this._getBuySelectionWallet(CryptoCurrency.sol),\n      this._getBuySelectionWallet(CryptoCurrency.usdc),\n    );\n  }\n\n  protected override setDefaults() {}\n\n  protected override onInitialize() {\n    this.addReaction(\n      reaction(\n        () => [\n          this._getBuySelectionWallet(CryptoCurrency.sol),\n          this._getBuySelectionWallet(CryptoCurrency.usdc),\n        ],\n        ([newSOLWallet, newUSDCWallet]) => this._setWallets(newSOLWallet, newUSDCWallet),\n      ),\n    );\n  }\n\n  protected override afterReactionsRemoved() {}\n\n  private _getBuySelectionWallet(cryptoCurrency: CryptoCurrency): Wallet | undefined {\n    return this._wallets\n      .getWallets()\n      .find(\n        (wallet) =>\n          wallet.token.symbol === cryptoCurrency.symbol &&\n          wallet.token.address === cryptoCurrency.mintAddress,\n      );\n  }\n\n  private _getToken(cryptoCurrency: CryptoCurrency): Promise<Token | undefined> {\n    return this._tokensRepository.getTokenWithMint(cryptoCurrency.mintAddress);\n  }\n\n  private _setWallets(newSOLWallet?: Wallet, newUSDCWallet?: Wallet): void {\n    if (newSOLWallet) {\n      runInAction(() => (this.solWallet = newSOLWallet));\n    } else {\n      this._getToken(CryptoCurrency.sol).then(\n        action((newSOLToken) => (this.solToken = newSOLToken)),\n      );\n    }\n\n    if (newUSDCWallet) {\n      runInAction(() => (this.usdcWallet = newUSDCWallet));\n    } else {\n      this._getToken(CryptoCurrency.usdc).then(\n        action((newUSDCToken) => (this.usdcToken = newUSDCToken)),\n      );\n    }\n  }\n}\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport { CryptoCurrency } from 'new/services/BuyService/structures';\nimport { ActionRow } from 'new/ui/modals/ChooseBuyTokenMobileModal/ActionRow';\nimport { ChooseBuyTokenMobileModalViewModel } from 'new/ui/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.ViewModel';\nimport { Modal } from 'new/ui/modals/Modal';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nexport const ChooseBuyTokenMobileModal: FC<ModalPropsType> = observer(({ close }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { solWallet, solToken, usdcWallet, usdcToken } = useViewModel(\n    ChooseBuyTokenMobileModalViewModel,\n  );\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const handleRowClick = (cryptoCurrency: CryptoCurrency) => {\n    close(false);\n\n    const newPath = `/buy/${cryptoCurrency.symbol}`;\n\n    if (location.pathname !== newPath) {\n      history.push(newPath);\n    }\n  };\n\n  return (\n    <Modal noDelimiter={false} close={handleCloseClick} title=\"Choose a crypto for buying\">\n      <ActionRow\n        wallet={solWallet}\n        token={solToken}\n        onClick={() => handleRowClick(CryptoCurrency.sol)}\n      />\n      <ActionRow\n        wallet={usdcWallet}\n        token={usdcToken}\n        onClick={() => handleRowClick(CryptoCurrency.usdc)}\n      />\n    </Modal>\n  );\n});\n","import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme, zIndexes } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\nimport { StatusColors, TransactionLabel } from '../styled';\n\nconst INITIAL_PROGRESS = 5;\n\nexport const ProgressIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionStatus = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-top: 13px;\n  margin-left: 38px;\n\n  color: ${theme.colors.textIcon.primary};\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const TransactionBadge = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-left: 4px;\n  padding: 5px 12px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 12px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 4px;\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const ProgressLine = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.middle};\n\n  width: ${INITIAL_PROGRESS}%;\n  height: 2px;\n\n  background: ${theme.colors.bg.buttonPrimary};\n\n  transition: width 0.15s;\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const ProgressStub = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.bottom};\n\n  width: 100%;\n  height: 1px;\n\n  background: ${theme.colors.stroke.secondary};\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nconst UPPER_PROGRESS_BOUND = 95;\nconst LOWER_PROGRESS_BOUND = 7;\nconst FULL_PROGRESS = 100;\nconst CHECK_PROGRESS_INTERVAL = 2500;\n\nexport interface Props {\n  isError: boolean;\n  isProcessing: boolean;\n  isSuccess: boolean;\n  isExecuting: boolean;\n  label: string;\n}\n\nexport const TransactionProgress: FC<Props> = (props) => {\n  const [progress, setProgress] = useState(INITIAL_PROGRESS);\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!props.isExecuting) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= UPPER_PROGRESS_BOUND) {\n        newProgress += LOWER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      } else {\n        newProgress = UPPER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      }\n    }, CHECK_PROGRESS_INTERVAL);\n\n    return () => {\n      clearTimeout(timerId);\n      setProgress(FULL_PROGRESS);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isExecuting]);\n\n  const renderStatus = (executing: boolean, success: boolean, error: boolean) => {\n    switch (true) {\n      case executing:\n        return 'Pending';\n      case error:\n        return 'Error';\n      case success:\n        return 'Completed';\n      default:\n        return 'Pending';\n    }\n  };\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressLine\n          style={{ width: `${progress}%` }}\n          className={classNames({\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        />\n        <ProgressStub />\n\n        <BlockWrapper\n          className={classNames({\n            isProcessing: props.isProcessing,\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        >\n          {props.isSuccess ? (\n            <ProgressIcon name=\"success-send\" />\n          ) : (\n            <ProgressIcon name={props.isError ? 'error-send' : 'clock-send'} />\n          )}\n        </BlockWrapper>\n      </ProgressWrapper>\n      <TransactionStatus>\n        {props.label}\n        <TransactionBadge>\n          <TransactionLabel\n            className={classNames({\n              isProcessing: props.isProcessing,\n              isSuccess: props.isSuccess,\n              isError: props.isError,\n            })}\n          />\n          {renderStatus(props.isExecuting, props.isSuccess, props.isError)}\n        </TransactionBadge>\n      </TransactionStatus>\n    </>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { Network } from '@saberhq/solana-contrib';\n\nimport { Icon } from 'components/ui';\nimport type { TransactionID as TransactionIDType } from 'new/sdk/SolanaSDK';\nimport { getExplorerUrl, truncatingMiddle } from 'new/utils/StringExtensions';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nconst ExplorerBlockLink = styled.a`\n  display: grid;\n  grid-gap: 4px;\n\n  color: inherit;\n  font-size: inherit;\n  text-align: right;\n  text-decoration: none;\n`;\n\nconst Address = styled.div`\n  display: flex;\n  align-items: center;\n\n  color: ${theme.colors.textIcon.primary};\n`;\n\nconst ExternalIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n  margin-left: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\ninterface Props {\n  transactionID: TransactionIDType;\n  network?: Network;\n}\n\nexport const TransactionID: FC<Props> = ({ transactionID, network = 'mainnet-beta' }) => {\n  return (\n    <Wrapper>\n      <div>Transaction ID</div>\n      <ExplorerBlockLink\n        href={getExplorerUrl('tx', transactionID, network)}\n        target=\"_blank\"\n        rel=\"noopener noreferrer noindex\"\n      >\n        <Address>\n          {truncatingMiddle(transactionID, {\n            numOfSymbolsRevealed: 9,\n            numOfSymbolsRevealedInSuffix: 9,\n          })}\n          <ExternalIcon name=\"external\" />\n        </Address>\n        <div>Tap to view in explorer</div>\n      </ExplorerBlockLink>\n    </Wrapper>\n  );\n};\n","import type { IReactionDisposer } from 'mobx';\nimport { action, computed, makeObservable, observable } from 'mobx';\nimport assert from 'ts-invariant';\nimport { injectable } from 'tsyringe';\n\nimport { PendingTransaction, TransactionStatus } from 'new/app/models/PendingTransaction';\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport { SolanaSDKError } from 'new/sdk/SolanaSDK';\nimport type { TransactionIndex } from 'new/services/TransactionHandler';\nimport { TransactionHandler } from 'new/services/TransactionHandler';\n\nimport type { RawTransactionType } from './ProcessTransaction.Models';\n\ninterface ProcessTransactionModalViewModelType {\n  pendingTransaction: PendingTransaction | null;\n  observingTransactionIndex: number | null;\n}\n\n@injectable()\nexport class ProcessTransactionModalViewModel\n  extends ViewModel\n  implements ProcessTransactionModalViewModelType\n{\n  rawTransaction: RawTransactionType | null;\n  pendingTransaction: PendingTransaction | null;\n  observingTransactionIndex: TransactionIndex | null;\n\n  constructor(private _transactionHandler: TransactionHandler) {\n    super();\n\n    this.rawTransaction = null;\n    this.pendingTransaction = null;\n    this.observingTransactionIndex = null;\n\n    makeObservable(this, {\n      rawTransaction: observable,\n      pendingTransaction: observable,\n      observingTransactionIndex: observable,\n\n      setTransaction: action,\n\n      isSwapping: computed,\n      transactionID: computed,\n      getMainDescription: computed,\n\n      sendAndObserveTransaction: action,\n    });\n  }\n\n  setTransaction(processingTransaction: RawTransactionType) {\n    this.rawTransaction = processingTransaction;\n    this.pendingTransaction = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: processingTransaction,\n      status: TransactionStatus.sending(),\n    });\n  }\n\n  protected override setDefaults() {\n    this.rawTransaction = null;\n    this.pendingTransaction = null;\n    this.observingTransactionIndex = null;\n  }\n\n  protected override onInitialize() {}\n\n  protected override afterReactionsRemoved() {}\n\n  get isSwapping(): boolean {\n    assert(this.rawTransaction, 'rawTransaction is not set');\n    return this.rawTransaction.isSwap;\n  }\n\n  get transactionID(): string | null {\n    assert(this.pendingTransaction, 'pendingTransaction is not set');\n    return this.pendingTransaction.transactionId;\n  }\n\n  get getMainDescription(): string {\n    assert(this.rawTransaction, 'rawTransaction is not set');\n    return this.rawTransaction.mainDescription;\n  }\n\n  // Actions\n\n  sendAndObserveTransaction(): IReactionDisposer {\n    assert(this.rawTransaction, 'rawTransaction is not set');\n    // send transaction and get observation index\n    const index = this._transactionHandler.sendTransaction(this.rawTransaction);\n    this.observingTransactionIndex = index;\n\n    // send and catch error\n    const unknownErrorInfo = new PendingTransaction({\n      transactionId: null,\n      sentAt: new Date(),\n      rawTransaction: this.rawTransaction,\n      status: TransactionStatus.error(SolanaSDKError.unknown()),\n    });\n\n    // observe transaction based on transaction index\n    return this._transactionHandler.observeTransaction(index, (pendingTransaction) => {\n      this.pendingTransaction = pendingTransaction || unknownErrorInfo;\n    });\n  }\n}\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\nimport { expr } from 'mobx-utils';\n\nimport { TransactionStatusType } from 'new/app/models/PendingTransaction';\nimport { FeeRelayerError } from 'new/sdk/FeeRelayer';\n\nimport * as ProcessTransaction from '../../ProcessTransaction.Models';\nimport type { ProcessTransactionModalViewModel } from '../../ProcessTransactionModal.ViewModel';\n\nconst Wrapper = styled.div`\n  padding: 0 30px;\n`;\n\ninterface Props {\n  viewModel: Readonly<ProcessTransactionModalViewModel>;\n}\n\nexport const HeaderLabel: FC<Props> = observer(({ viewModel }) => {\n  const text = expr(() => {\n    const info = viewModel.pendingTransaction;\n    if (!info) {\n      return '';\n    }\n\n    const originalText = info.rawTransaction.isSwap\n      ? 'The swap is being processed'\n      : 'The transaction is being processed';\n\n    switch (info.status.type) {\n      case TransactionStatusType.sending:\n      case TransactionStatusType.confirmed:\n        return originalText;\n      case TransactionStatusType.error: {\n        // TODO: check all condition works\n        const error = info.status.error;\n        if (error) {\n          if (error.message.includes('Swap instruction exceeds desired slippage limit')) {\n            return 'Low slippage caused the swap to fail';\n          }\n\n          if (\n            error instanceof FeeRelayerError &&\n            error.code === FeeRelayerError.topUpSuccessButTransactionThrows().code\n          ) {\n            return 'The transaction failed due to a blockchain error';\n          }\n        }\n        return 'The transaction has been rejected';\n      }\n      case TransactionStatusType.finalized: {\n        // TODO: check all condition works\n        const transaction = info.rawTransaction;\n        if (transaction instanceof ProcessTransaction.SendTransaction) {\n          return `${transaction.sender.token.symbol} was sent successfully`;\n        }\n\n        if (transaction instanceof ProcessTransaction.SwapTransaction) {\n          return `${transaction.sourceWallet.token.symbol} → ${transaction.destinationWallet.token.symbol} swapped successfully`;\n        }\n\n        throw Error('fatal');\n      }\n    }\n  });\n\n  return <Wrapper>{text}</Wrapper>;\n});\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme, zIndexes } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react-lite';\n\nimport { Icon } from 'components/ui';\nimport { TransactionStatusType } from 'new/app/models/PendingTransaction';\nimport type { SendTransaction } from 'new/ui/modals/ProcessTransactionModal';\n\nimport type { ProcessTransactionModalViewModel } from '../../ProcessTransactionModal.ViewModel';\n\nconst INITIAL_PROGRESS = 5;\n\nconst ProgressIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\n// const TransactionStatus = styled.div`\n//   display: flex;\n//   align-items: center;\n//\n//   margin-top: 13px;\n//   margin-left: 38px;\n//\n//   color: ${theme.colors.textIcon.primary};\n//\n//   font-weight: 500;\n//   font-size: 16px;\n//   line-height: 140%;\n// `;\n//\n// const TransactionBadge = styled.div`\n//   display: flex;\n//   align-items: center;\n//\n//   height: 24px;\n//   margin-left: 4px;\n//   padding: 0 8px;\n//\n//   color: ${theme.colors.textIcon.secondary};\n//\n//   font-weight: 500;\n//   font-size: 12px;\n//\n//   background: ${theme.colors.bg.secondary};\n//   border-radius: 4px;\n// `;\n\nconst ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nconst ProgressLine = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.middle};\n\n  width: ${INITIAL_PROGRESS}%;\n  height: 2px;\n\n  background: ${theme.colors.bg.buttonPrimary};\n\n  transition: width 0.15s;\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n\n    transition: none;\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n\n    transition: none;\n  }\n`;\n\nconst ProgressStub = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.bottom};\n\n  width: 100%;\n  height: 1px;\n\n  background: ${theme.colors.stroke.secondary};\n`;\n\nconst StatusColors = styled.div`\n  &.isProcessing {\n    background: ${theme.colors.system.warningMain};\n  }\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\n// const TransactionLabel = styled(StatusColors)`\n//   display: block;\n//   width: 8px;\n//   height: 8px;\n//\n//   margin-right: 8px;\n// `;\n\nconst BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nconst UPPER_PROGRESS_BOUND = 95;\nconst LOWER_PROGRESS_BOUND = 3;\nconst FULL_PROGRESS = 100;\nconst CHECK_PROGRESS_INTERVAL = 1000;\n\nexport interface Props {\n  viewModel: Readonly<ProcessTransactionModalViewModel>;\n  // label: string;\n}\n\nexport const ProgressView: FC<Props> = observer(({ viewModel /*label*/ }) => {\n  const [progress, setProgress] = useState(INITIAL_PROGRESS);\n\n  const status = viewModel.pendingTransaction!.status;\n  const isSending = status.type === TransactionStatusType.sending;\n  const isProcessing = status.type === TransactionStatusType.confirmed;\n  const isSuccess = status.type === TransactionStatusType.finalized;\n  const isError = status.type === TransactionStatusType.error;\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (\n      !(\n        isProcessing ||\n        // start ProgressBar ticking on isSending when it's send RenBTC via Bitcoin Network transaction\n        (isSending &&\n          (viewModel.pendingTransaction?.rawTransaction as SendTransaction)\n            .isRenBTCViaBitcoinNetwork)\n      )\n    ) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= UPPER_PROGRESS_BOUND) {\n        newProgress += LOWER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      } else {\n        newProgress = UPPER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      }\n    }, CHECK_PROGRESS_INTERVAL);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [status.type]);\n\n  useEffect(() => {\n    switch (status.type) {\n      case TransactionStatusType.error:\n      case TransactionStatusType.finalized:\n        setProgress(FULL_PROGRESS);\n        setTimeout(() => {\n          setProgress(0);\n        }, 1000);\n        break;\n    }\n  }, [status.type]);\n\n  // const renderStatus = () => {\n  //   switch (status.type) {\n  //     case TransactionStatusType.sending:\n  //     case TransactionStatusType.confirmed:\n  //       return 'Pending';\n  //     case TransactionStatusType.error:\n  //       return 'Error';\n  //     case TransactionStatusType.finalized:\n  //       return 'Completed';\n  //   }\n  // };\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressLine\n          style={{ width: `${progress}%` }}\n          className={classNames({ isSuccess, isError })}\n        />\n        <ProgressStub />\n\n        <BlockWrapper\n          className={classNames({ isProcessing: isSending || isProcessing, isSuccess, isError })}\n        >\n          {isSuccess ? (\n            <ProgressIcon name=\"success-send\" />\n          ) : (\n            <ProgressIcon name={isError ? 'error-send' : 'clock-send'} />\n          )}\n        </BlockWrapper>\n      </ProgressWrapper>\n      {/*<TransactionStatus>*/}\n      {/*  {label}*/}\n      {/*  <TransactionBadge>*/}\n      {/*    <TransactionLabel*/}\n      {/*      className={classNames({ isProcessing: isSending || isProcessing, isSuccess, isError })}*/}\n      {/*    />*/}\n      {/*    {renderStatus()}*/}\n      {/*  </TransactionBadge>*/}\n      {/*</TransactionStatus>*/}\n    </>\n  );\n});\n","import type { FC } from 'react';\nimport { useLayoutEffect } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\n// TODO: relocate\nimport {\n  CloseIcon,\n  CloseWrapper,\n  Header,\n  WrapperModal,\n} from 'components/modals/TransactionInfoModals/common';\nimport { Button } from 'components/ui';\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\nimport { TransactionID } from 'new/ui/modals/ProcessTransactionModal/Status/TransactionID';\n\nimport type { RawTransactionType, SendTransaction } from './ProcessTransaction.Models';\nimport { ProcessTransactionModalViewModel } from './ProcessTransactionModal.ViewModel';\nimport { HeaderLabel } from './Status/HeaderLabel';\nimport { ProgressView } from './Status/ProgressView';\n\nconst PaddedHeader = styled(Header)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 12px 20px;\n`;\n\nconst Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 18px 20px;\n`;\n\nconst Description = styled.div`\n  display: flex;\n  justify-content: center;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n`;\n\nexport interface ProcessTransactionModalProps {\n  transaction: RawTransactionType;\n}\n\n// TODO: Green alert (shown only when top up is finished but transaction is not)\nexport const ProcessTransactionModal: FC<ProcessTransactionModalProps & ModalPropsType> = observer(\n  ({ close, transaction }) => {\n    const viewModel = useViewModel(ProcessTransactionModalViewModel);\n    // set transaction before, to available all getters under\n    if (!viewModel.rawTransaction) {\n      viewModel.setTransaction(transaction);\n    }\n\n    useLayoutEffect(() => {\n      return viewModel.sendAndObserveTransaction();\n    }, []);\n\n    const handleCloseClick = () => {\n      close(false);\n    };\n\n    const showExplorerLink =\n      viewModel.transactionID &&\n      !(viewModel.rawTransaction as SendTransaction).isRenBTCViaBitcoinNetwork;\n\n    return (\n      <WrapperModal close={handleCloseClick}>\n        <PaddedHeader>\n          <HeaderLabel viewModel={viewModel} />\n          {/*{viewModel.getMainDescription}*/}\n          <CloseWrapper onClick={handleCloseClick}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n          <Description>{viewModel.getMainDescription}</Description>\n          {/*<DateView viewModel={viewModel} />*/}\n        </PaddedHeader>\n        <ProgressView viewModel={viewModel} /*label={'Swap status:'}*/ />\n        {/*<Section>*/}\n        {/*  {viewModel.observingTransactionIndex !== null &&*/}\n        {/*  typeof viewModel.observingTransactionIndex !== 'undefined' ? (*/}\n        {/*    <TransactionDetail observingTransactionIndex={viewModel.observingTransactionIndex} />*/}\n        {/*  ) : null}*/}\n        {/*</Section>*/}\n        {showExplorerLink ? (\n          <Section>\n            <TransactionID transactionID={viewModel.transactionID} />\n          </Section>\n        ) : null}\n        <Section>\n          <Button primary onClick={handleCloseClick}>\n            Done\n          </Button>\n        </Section>\n        {/*{viewModel.transactionID ? (*/}\n        {/*  <SolanaExplorerLink signature={viewModel.transactionID} />*/}\n        {/*) : null}*/}\n      </WrapperModal>\n    );\n  },\n);\n","import { styled } from '@linaria/react';\n\nimport { Modal } from 'components/ui/Modal';\n\nexport const WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nexport const Section = styled.div`\n  display: grid;\n  grid-gap: 24px;\n  padding: 16px 0 24px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-gap: 16px;\n  margin: 0;\n  padding-left: 32px;\n`;\n\nexport const Row = styled.li``;\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n`;\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\nimport { expr } from 'mobx-utils';\n\nimport { Button } from 'components/ui';\nimport { trackEvent } from 'new/sdk/Analytics';\nimport { Loader } from 'new/ui/components/common/Loader';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\nimport type { ReceiveBitcoinModalViewModel } from 'new/ui/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.ViewModel';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\ninterface Props {\n  viewModel: Readonly<ReceiveBitcoinModalViewModel>;\n}\n\nexport const RenBTCButton: FC<Props & ModalPropsType> = observer(({ viewModel, close }) => {\n  const buttonText = expr(() => {\n    const fee = viewModel.totalFee;\n    const wallet = viewModel.payingWallet;\n    if (!fee || !wallet || fee <= 0) {\n      return 'Continue';\n    }\n\n    return `Pay ${numberToString(fee, { maximumFractionDigits: 9 })} ${\n      wallet.token.symbol\n    } & Continue`;\n  });\n\n  const handleClick = async () => {\n    try {\n      trackEvent({ name: 'Receive_Pay_Button' });\n\n      await viewModel.createRenBTC();\n      close(true);\n    } catch {\n      //\n    }\n  };\n\n  return (\n    <Button primary disabled={viewModel.isLoading} onClick={handleClick}>\n      {viewModel.isLoading ? <Loader /> : buttonText}\n    </Button>\n  );\n});\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\nimport { Defaults } from 'new/services/Defaults';\nimport { TokenAvatar } from 'new/ui/components/common/TokenAvatar';\nimport type { ReceiveBitcoinModalViewModel } from 'new/ui/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.ViewModel';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nconst SelectorValue = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n\nconst TokenAvatarStyled = styled(TokenAvatar)`\n  margin-right: 12px;\n`;\n\nconst Fees = styled.div`\n  flex-grow: 1;\n`;\n\nconst Top = styled.div``;\n\nconst Label = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n\n  &.primary {\n    color: ${theme.colors.textIcon.primary};\n    font-size: 16px;\n  }\n`;\n\nconst LabelWrapper = styled.div`\n  display: grid;\n  grid-row-gap: 2px;\n`;\n\ninterface Props {\n  viewModel: Readonly<ReceiveBitcoinModalViewModel>;\n}\n\nexport const WalletSelectorContent: FC<Props> = observer(({ viewModel }) => {\n  return (\n    <SelectorValue>\n      <TokenAvatarStyled token={viewModel.payingWallet?.token} size={44} />\n      <Fees>\n        <Top>\n          <LabelWrapper>\n            <Label>\n              Account creation fee:{' '}\n              <Label className=\"primary\">\n                ~{Defaults.fiat.symbol}\n                {numberToString(viewModel.feeInFiat ?? 0, { maximumFractionDigits: 2 })}\n              </Label>\n            </Label>\n            <Label className=\"primary\">{viewModel.feeInText}</Label>\n          </LabelWrapper>\n        </Top>\n      </Fees>\n    </SelectorValue>\n  );\n});\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport type { Wallet } from 'new/sdk/SolanaSDK';\nimport { ChooseWallet } from 'new/ui/components/common/ChooseWallet';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\nimport type { ReceiveBitcoinModalViewModel } from '../ReceiveBitcoinModal.ViewModel';\nimport { RenBTCButton } from './RenBTCButton';\nimport { WalletSelectorContent } from './WalletSelectorContent';\n\nconst ChooseWalletStyled = styled(ChooseWallet)`\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\ninterface Props {\n  viewModel: Readonly<ReceiveBitcoinModalViewModel>;\n}\n\n// TODO: show error\nexport const Create: FC<Props & ModalPropsType> = observer(({ viewModel, close }) => {\n  const handleWalletChange = (wallet: Wallet) => {\n    viewModel.walletDidSelect(wallet);\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <RenBTCButton viewModel={viewModel} close={close} />\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>. You can choose which currency to pay in\n            below.\n          </Row>\n        </List>\n        <div style={{ position: 'relative' }}>\n          <ChooseWalletStyled\n            viewModel={viewModel.choosePayingWalletViewModel}\n            selector={<WalletSelectorContent viewModel={viewModel} />}\n            selectedWallet={viewModel.payingWallet}\n            onWalletChange={handleWalletChange}\n            staticWallets={viewModel.payableWallets}\n            showOtherWallets={false}\n          />\n        </div>\n        <List>\n          <Row>\n            This address accepts <strong>only Bitcoin</strong>. You may lose assets by sending\n            another coin.\n          </Row>\n          <Row>\n            Minimum transaction amount of <strong>0.000112 BTC</strong>.\n          </Row>\n          <Row>\n            <strong>35:59:59</strong>\n            &nbsp; is the remaining time to safely send the assets\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n});\n","import { ZERO } from '@orca-so/sdk';\nimport { SPLToken } from '@saberhq/token-utils';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { zip } from 'ramda';\nimport { injectable } from 'tsyringe';\n\nimport {\n  FeeRelayerAPIClient,\n  FeeRelayerConfiguration,\n  FeeRelayerContextManager,\n  FeeRelayerRelaySolanaClient,\n  StatsInfoOperationType,\n  TokenAccount,\n} from 'new/sdk/FeeRelayer';\nimport {\n  AccountInfo,\n  FeeAmount,\n  getAssociatedTokenAddressSync,\n  SolanaSDKPublicKey,\n  Token,\n  Wallet,\n} from 'new/sdk/SolanaSDK';\nimport { OrcaSwapService } from 'new/services/OrcaSwapService';\nimport { RelayService } from 'new/services/RelayService';\nimport { WalletsRepository } from 'new/services/Repositories';\n\n@injectable()\nexport class RenBTCStatusService {\n  private _feeRelayerContextManager: FeeRelayerContextManager;\n\n  private _minRentExemption?: u64;\n  private _lamportsPerSignature?: u64;\n  private _rentExemptMinimum?: u64;\n\n  constructor(\n    private _feeRelayerAPIClient: FeeRelayerRelaySolanaClient,\n    private _orcaSwap: OrcaSwapService,\n    private _walletsRepository: WalletsRepository,\n    private _feeRelayer: RelayService,\n  ) {\n    const feeRelayerAPIClient = new FeeRelayerAPIClient();\n    this._feeRelayerContextManager = new FeeRelayerContextManager({\n      owner: this._feeRelayerAPIClient.provider.wallet.publicKey,\n      solanaAPIClient: this._feeRelayerAPIClient,\n      feeRelayerAPIClient,\n    });\n  }\n\n  async load() {\n    await this._orcaSwap.load();\n\n    this._minRentExemption = await this._feeRelayerAPIClient.getMinimumBalanceForRentExemption(\n      AccountInfo.span,\n    );\n    this._lamportsPerSignature = await this._feeRelayerAPIClient.getLamportsPerSignature();\n    this._rentExemptMinimum = await this._feeRelayerAPIClient.getMinimumBalanceForRentExemption(0);\n  }\n\n  async getPayableWallets(): Promise<Wallet[]> {\n    const wallets = this._walletsRepository\n      .getWallets()\n      .filter((wallet) => wallet.lamports?.gt(ZERO));\n\n    // At lease one wallet is payable\n    const group = await Promise.all(\n      wallets.map((w): Promise<u64 | null> => this.getCreationFee(w.mintAddress).catch(() => null)),\n    );\n\n    const walletsNew: Wallet[] = [];\n    for (const [w, fee] of zip(wallets, group)) {\n      if (fee && fee.lte(w.lamports ?? ZERO)) {\n        // Special case where wallet is native sol,\n        // needs to keeps rentExemptMinimum lamports in account to prevent error\n        // Transaction leaves an account with a lower balance than rent-exempt minimum\n        if (w.isNativeSOL && (w.lamports ?? ZERO).sub(fee).lt(this._rentExemptMinimum ?? ZERO)) {\n          continue;\n        } else {\n          walletsNew.push(w);\n        }\n      }\n    }\n    return walletsNew;\n  }\n\n  async createAccount(_address: string, _mint: string): Promise<void> {\n    const address = new PublicKey(_address);\n    const mint = new PublicKey(_mint);\n    const owner = this._feeRelayerAPIClient.provider.wallet.publicKey;\n\n    const associatedAccount = getAssociatedTokenAddressSync(SolanaSDKPublicKey.renBTCMint, owner);\n\n    // prepare transaction\n    const feePayer = (await this._feeRelayerContextManager.getCurrentContext()).feePayerAddress;\n    const preparing = this._feeRelayerAPIClient.prepareTransaction({\n      instructions: [\n        SPLToken.createAssociatedTokenAccountInstruction(\n          SolanaSDKPublicKey.splAssociatedTokenAccountProgramId,\n          SolanaSDKPublicKey.tokenProgramId,\n          SolanaSDKPublicKey.renBTCMint,\n          associatedAccount,\n          owner,\n          feePayer,\n        ),\n      ],\n      feePayer,\n    });\n\n    const updating = this._feeRelayerContextManager.update();\n\n    const [preparedTransaction] = await Promise.all([preparing, updating]);\n\n    // hack\n    preparedTransaction.owner = owner;\n\n    const context = await this._feeRelayerContextManager.getCurrentContext();\n    const tx = await this._feeRelayer.topUpAndRelayTransaction({\n      context,\n      transaction: preparedTransaction,\n      fee: new TokenAccount({ address: address, mint: mint }),\n      config: new FeeRelayerConfiguration({\n        operationType: StatsInfoOperationType.transfer,\n        currency: mint.toBase58(),\n      }),\n    });\n\n    await this._feeRelayerAPIClient.waitForConfirmation(tx);\n\n    this._walletsRepository.batchUpdate((wallets) => {\n      const string = wallets.find((wallet) => wallet.token.isNativeSOL)?.pubkey;\n      if (!string) {\n        return wallets;\n      }\n      const nativeWalletAddress = new PublicKey(string);\n      const renBTCAddress = getAssociatedTokenAddressSync(\n        SolanaSDKPublicKey.renBTCMint,\n        nativeWalletAddress,\n      );\n\n      if (!wallets.some((wallet) => wallet.pubkey === SolanaSDKPublicKey.renBTCMint.toString())) {\n        wallets.push(\n          new Wallet({\n            pubkey: renBTCAddress.toBase58(),\n            lamports: ZERO,\n            token: Token.renBTC,\n          }),\n        );\n      }\n\n      return wallets;\n    });\n  }\n\n  async getCreationFee(_mintAddress: string): Promise<u64> {\n    const mintAddress = new PublicKey(_mintAddress);\n\n    const feeAmount = new FeeAmount({\n      transaction: this._lamportsPerSignature ?? new u64(5000),\n      accountBalances: this._minRentExemption ?? new u64(2_039_280),\n    });\n\n    const feeInSOL = this._feeRelayer.feeCalculator.calculateNeededTopUpAmount({\n      context: await this._feeRelayerContextManager.getCurrentContext(),\n      expectedFee: feeAmount,\n      payingTokenMint: mintAddress,\n    });\n\n    const feeInToken = await this._feeRelayer.feeCalculator.calculateFeeInPayingToken({\n      orcaSwap: this._orcaSwap,\n      feeInSOL: feeInSOL,\n      payingFeeTokenMint: mintAddress,\n    });\n\n    return feeInToken.total;\n  }\n}\n","import { action, computed, makeObservable, observable, reaction, runInAction } from 'mobx';\nimport { singleton } from 'tsyringe';\n\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport type { Wallet } from 'new/sdk/SolanaSDK';\nimport { convertToBalance } from 'new/sdk/SolanaSDK';\nimport { PricesService } from 'new/services/PriceAPIs/PricesService';\nimport { WalletsRepository } from 'new/services/Repositories';\nimport { ChooseWalletViewModel } from 'new/ui/components/common/ChooseWallet';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport { RenBTCStatusService } from './RenBTCStatusService';\n\nexport enum RenBTCAccountStatus {\n  topUpRequired = 'topUpRequired',\n  payingWalletAvailable = 'payingWalletAvailable',\n}\n\ninterface ReceiveBitcoinModalViewModelType {\n  readonly solanaPubkey: string | null;\n  readonly isLoading: boolean;\n  readonly error: string | null;\n  readonly accountStatus: RenBTCAccountStatus | null;\n  readonly payingWallet: Wallet | null;\n  readonly totalFee: number | null;\n  readonly feeInFiat: number | null;\n\n  reload(): void;\n  createRenBTC(): void;\n}\n\n@singleton()\nexport class ReceiveBitcoinModalViewModel\n  extends ViewModel\n  implements ReceiveBitcoinModalViewModelType\n{\n  isLoading = true;\n  error: string | null = null;\n  accountStatus: RenBTCAccountStatus | null = null;\n  payableWallets: Wallet[] = [];\n\n  payingWallet: Wallet | null = null;\n  totalFee: number | null = null;\n  feeInFiat: number | null = null;\n\n  constructor(\n    private _renBTCStatusService: RenBTCStatusService,\n    private _priceService: PricesService,\n    private _walletsRepository: WalletsRepository,\n    public choosePayingWalletViewModel: ChooseWalletViewModel,\n  ) {\n    super();\n\n    makeObservable(this, {\n      isLoading: observable,\n      error: observable,\n      accountStatus: observable,\n      payableWallets: observable,\n\n      payingWallet: observable,\n      totalFee: observable,\n      feeInFiat: observable,\n\n      solanaPubkey: computed,\n      feeInText: computed,\n\n      reload: action,\n      walletDidSelect: action,\n      createRenBTC: action,\n    });\n  }\n\n  protected override setDefaults(): void {\n    this.isLoading = false;\n    this.accountStatus = null;\n    this.payableWallets = [];\n    this.payingWallet = null;\n\n    this.totalFee = null;\n    this.feeInFiat = null;\n  }\n\n  protected override onInitialize(): void {\n    this.choosePayingWalletViewModel.initialize();\n\n    void this.reload();\n    void this._bind();\n  }\n\n  protected override afterReactionsRemoved(): void {\n    this.choosePayingWalletViewModel.end();\n  }\n\n  get solanaPubkey(): string | null {\n    return this._walletsRepository.nativeWallet?.pubkey ?? null;\n  }\n\n  get feeInText(): string | null {\n    const fee = this.totalFee;\n    const wallet = this.payingWallet;\n    if (!fee || !wallet) {\n      return null;\n    }\n    return `${numberToString(fee, { maximumFractionDigits: 9 })} ${wallet.token.symbol}`;\n  }\n\n  // Methods\n\n  async reload(): Promise<void> {\n    this.isLoading = true;\n    this.error = null;\n    this.accountStatus = null;\n    this.payableWallets = [];\n    this.payingWallet = null;\n\n    try {\n      await this._renBTCStatusService.load();\n      const payableWallets = await this._renBTCStatusService.getPayableWallets();\n\n      runInAction(() => {\n        this.error = null;\n        this.accountStatus = payableWallets.length\n          ? RenBTCAccountStatus.payingWalletAvailable\n          : RenBTCAccountStatus.topUpRequired;\n        this.payableWallets = payableWallets;\n        this.payingWallet = payableWallets[0] ?? null;\n      });\n    } catch (error) {\n      runInAction(() => {\n        console.error(error);\n        this.error = (error as Error).message;\n        this.accountStatus = null;\n        this.payableWallets = [];\n        this.payingWallet = null;\n      });\n    } finally {\n      runInAction(() => {\n        this.isLoading = false;\n      });\n    }\n  }\n\n  private _bind(): void {\n    this.addReaction(\n      reaction(\n        () => this.payingWallet,\n        async (wallet) => {\n          if (!wallet) {\n            this.totalFee = null;\n            return;\n          }\n          try {\n            const fee = await this._renBTCStatusService.getCreationFee(wallet.mintAddress);\n            runInAction(() => {\n              this.totalFee = convertToBalance(fee, wallet.token.decimals);\n            });\n          } catch {\n            runInAction(() => {\n              this.totalFee = null;\n            });\n          }\n        },\n      ),\n    );\n\n    this.addReaction(\n      reaction(\n        () => this.totalFee,\n        (fee) => {\n          const symbol = this.payingWallet?.token.symbol;\n          if (!fee || !symbol) {\n            this.feeInFiat = null;\n            return;\n          }\n          const price = this._priceService.currentPrice(symbol)?.value;\n          if (!price) {\n            this.feeInFiat = null;\n            return;\n          }\n          this.feeInFiat = fee * price;\n        },\n      ),\n    );\n  }\n\n  walletDidSelect(wallet: Wallet): void {\n    this.payingWallet = wallet;\n  }\n\n  async createRenBTC(): Promise<void> {\n    const mintAddress = this.payingWallet?.mintAddress;\n    const address = this.payingWallet?.pubkey;\n    if (!mintAddress || !address) {\n      return;\n    }\n\n    this.isLoading = true;\n    this.error = null;\n\n    try {\n      await this._renBTCStatusService.createAccount(address, mintAddress);\n      this.error = null;\n    } catch (error) {\n      console.error(error);\n      this.error = (error as Error).message;\n      throw error;\n    } finally {\n      this.isLoading = false;\n    }\n  }\n}\n","import type { FC } from 'react';\nimport { useHistory } from 'react-router';\n\nimport { ButtonCancel } from 'new/ui/components/common/ButtonCancel';\nimport { Button } from 'new/ui/components/ui/Button';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\nexport const TopUp: FC<ModalPropsType> = ({ close }) => {\n  const history = useHistory();\n\n  const handleTopUpClick = () => {\n    close(false);\n    history.push('/buy');\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleTopUpClick}>\n            Top up your account\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            A <strong>renBTC account is required</strong> to receive bitcoins over the Bitcoin\n            network.\n          </Row>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>.\n          </Row>\n          <Row>\n            You <strong>don't have funds</strong> to pay for account creation, but if someone sends\n            renBTC to your address, it will be created for you.\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\n\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport { Loader } from 'new/ui/components/common/Loader';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\nimport { LoaderWrapper, WrapperModal } from './common/styled';\nimport { Create } from './Create';\nimport { ReceiveBitcoinModalViewModel, RenBTCAccountStatus } from './ReceiveBitcoinModal.ViewModel';\nimport { TopUp } from './TopUp';\n\nconst LoaderWrapperStyled = styled(LoaderWrapper)`\n  height: 300px;\n`;\n\nexport const ReceiveBitcoinModal: FC<ModalPropsType> = observer(({ close }) => {\n  const viewModel = useViewModel(ReceiveBitcoinModalViewModel);\n\n  if (viewModel.isLoading || !viewModel.accountStatus) {\n    return (\n      <WrapperModal close={() => close(false)}>\n        <LoaderWrapperStyled>\n          <Loader size=\"100\" />\n        </LoaderWrapperStyled>\n      </WrapperModal>\n    );\n  }\n\n  switch (viewModel.accountStatus) {\n    case RenBTCAccountStatus.topUpRequired:\n      return <TopUp close={close} />;\n    case RenBTCAccountStatus.payingWalletAvailable:\n      return <Create viewModel={viewModel} close={close} />;\n  }\n});\n","import type { FC, ReactElement } from 'react';\n\nimport { Modal } from 'new/ui/modals/Modal';\nimport type { ModalPropsType } from 'new/ui/modals/ModalManager';\n\ntype Props = {\n  items: ReactElement[];\n  title?: string;\n};\n\nexport const SelectListMobileModal: FC<ModalPropsType & Props> = ({ items, close, title }) => {\n  return (\n    <Modal noDelimiter={false} close={close} title={title}>\n      {items}\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { Defaults } from 'new/services/Defaults';\nimport { TokenAvatar } from 'new/ui/components/common/TokenAvatar';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport { FieldInfo, InfoTitle, InfoValue, InfoWrapper } from '../../common/styled';\n\ninterface Props {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const AmountSummaryView: FC<Props> = observer(({ viewModel }) => {\n  const wallet = viewModel.wallet;\n  const amount = viewModel.amount ?? 0;\n  const amountInFiat = amount * (wallet?.priceInCurrentFiat ?? 0);\n\n  return (\n    <FieldInfo>\n      <TokenAvatar token={wallet?.token} size={44} />\n      <InfoWrapper>\n        <InfoTitle>\n          {numberToString(amount, { maximumFractionDigits: 9 })} {wallet?.token.symbol ?? ''}\n        </InfoTitle>\n        <InfoValue>\n          {Defaults.fiat.symbol}\n          {numberToString(amountInFiat, { maximumFractionDigits: 2 })}\n        </InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { AddressText } from 'new/ui/components/common/AddressText';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  To,\n  Username,\n  WalletIcon,\n} from '../../common/styled';\n\ninterface Props {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const RecipientView: FC<Props> = observer(({ viewModel }) => {\n  const recipient = viewModel.recipient!;\n\n  return (\n    <FieldInfo>\n      <IconWrapper>\n        <WalletIcon name=\"wallet\" />\n      </IconWrapper>\n      <InfoWrapper>\n        {recipient.name ? (\n          <Username>\n            <To>To</To>\n            {recipient.name}\n          </Username>\n        ) : (\n          <InfoTitle className=\"secondary\">To address</InfoTitle>\n        )}\n        <InfoValue>\n          <AddressText address={recipient.address} medium />\n        </InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { ZERO } from '@orca-so/sdk';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport type { SendViewModel } from 'new/scenes/Main/Send';\nimport { trackEvent } from 'new/sdk/Analytics';\nimport { ButtonCancel } from 'new/ui/components/common/ButtonCancel';\nimport { ErrorHint } from 'new/ui/components/common/ErrorHint';\nimport { PasswordInput } from 'new/ui/components/common/PasswordInput';\nimport { numberToString, rounded } from 'new/utils/NumberExtensions';\nimport { capitalizeFirstLetter } from 'new/utils/StringExtensions';\n\nimport type { ModalPropsType } from '../../ModalManager';\nimport { ArrowDown } from '../common/ArrowDown';\nimport { Section } from '../common/styled';\nimport { AmountSummaryView } from './AmountSummaryView';\nimport { RecipientView } from './RecipientView';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\nexport interface ConfirmSendModalProps {\n  viewModel: Readonly<SendViewModel>;\n}\n\nexport const ConfirmSendModal: FC<ConfirmSendModalProps & ModalPropsType> = observer(\n  ({ close, viewModel }) => {\n    const { walletProviderInfo } = useWallet();\n    const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n    const [password, setPassword] = useState('');\n    const [hasError, setHasError] = useState(false);\n\n    const handleCloseClick = () => {\n      close(false);\n    };\n\n    const validatePassword = async (value: string) => {\n      try {\n        await tryUnlockSeedAndMnemonic(value);\n        setHasError(false);\n      } catch (error) {\n        setHasError(true);\n      }\n    };\n\n    const handlePasswordChange = (value: string) => {\n      setPassword(value);\n\n      if (value) {\n        void validatePassword(value);\n      }\n    };\n\n    const handleConfirmClick = () => {\n      close(true);\n      viewModel.authenticateAndSend();\n\n      // track confirm button clicked\n      const amountInFiat = rounded(viewModel.amount * viewModel.wallet!.priceInCurrentFiat, 2);\n\n      let feeToken: string | null = null;\n      const value = viewModel.feeInfo.value;\n      const payingWallet = viewModel.payingWallet;\n      if (value?.hasAvailableWalletToPayFee && payingWallet) {\n        if (value.feeAmount.total.gt(ZERO)) {\n          feeToken = payingWallet.token.symbol;\n        }\n      }\n\n      trackEvent({\n        name: 'Send_Confirm_Button_Pressed',\n        params: {\n          Send_Network: capitalizeFirstLetter(viewModel.network),\n          Send_Currency: viewModel.wallet!.token.symbol,\n          Send_Sum: viewModel.amount,\n          Send_MAX: viewModel.maxWasClicked,\n          Send_USD: amountInFiat,\n          Send_Free: viewModel.feeInfo.value?.feeAmount.transaction.eq(ZERO) || false,\n          Send_Username: Boolean(viewModel.recipient?.name),\n          Send_Account_Fee_Token: feeToken,\n        },\n      });\n    };\n\n    const isSecretKeyWallet =\n      walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n    const isDisabled =\n      (isSecretKeyWallet && (!password || hasError)) ||\n      !viewModel.wallet ||\n      !viewModel.amount ||\n      !viewModel.recipient;\n\n    // const address = params.destination?.toBase58?.() || btcAddress;\n    // const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n    return (\n      <WrapperModal\n        title={<ModalTitle>Confirm sending {viewModel.wallet?.token.symbol ?? ''}</ModalTitle>}\n        close={handleCloseClick}\n        footer={\n          <>\n            <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n              <SendIcon name=\"top\" />\n              {viewModel.error?.buttonSuggestion ??\n                `Send ${numberToString(viewModel.amount, {\n                  maximumFractionDigits: 9,\n                })} ${viewModel.wallet?.token.symbol ?? ''}`}\n            </Button>\n            <ButtonCancel onClick={handleCloseClick} />\n          </>\n        }\n        noDelimiter={false}\n      >\n        <ActionTitle>You are going to send</ActionTitle>\n\n        <Section className=\"send\">\n          <div>\n            <AmountSummaryView viewModel={viewModel} />\n            <ArrowDown />\n            <RecipientView viewModel={viewModel} />\n          </div>\n\n          {/*<TransactionDetails sendState={sendState} amount={params.amount} />*/}\n        </Section>\n\n        {isSecretKeyWallet ? (\n          <Section className=\"password\">\n            <SubTitle>Enter password to confirm</SubTitle>\n            <PasswordInputStyled\n              value={password}\n              onChange={handlePasswordChange}\n              isError={hasError}\n            />\n            {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : null}\n          </Section>\n        ) : null}\n      </WrapperModal>\n    );\n  },\n);\n","import type { FC } from 'react';\nimport { useLayoutEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { ErrorHint } from 'new/ui/components/common/ErrorHint';\nimport { PasswordInput } from 'new/ui/components/common/PasswordInput';\nimport { Section } from 'new/ui/modals/confirmModals/common/styled';\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\ninterface Props {\n  onChange: (flag: boolean) => void;\n}\n\n// TODO: remake it during auth reimplementation\nexport const SectionPassword: FC<Props> = ({ onChange }) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n\n  useLayoutEffect(() => {\n    onChange(isSecretKeyWallet && (!password || hasError));\n  }, [hasError, isSecretKeyWallet, onChange, password]);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  if (!isSecretKeyWallet) {\n    return null;\n  }\n\n  return (\n    <Section className=\"password\">\n      <SubTitle>Enter password to confirm</SubTitle>\n      <PasswordInputStyled value={password} onChange={handlePasswordChange} isError={hasError} />\n      {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : null}\n    </Section>\n  );\n};\n","import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { observer } from 'mobx-react-lite';\n\nimport { Icon } from 'components/ui';\nimport { Button } from 'new/ui/components/ui/Button';\n\nimport type { ConfirmSwapModalViewModel } from '../ConfirmSwapModal.ViewModel';\n\nconst SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ninterface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n}\n\nexport const ActionButton: FC<Props> = observer(({ viewModel, ...props }) => {\n  return (\n    <Button primary {...props}>\n      <SwapIcon name=\"top\" /> Swap {viewModel.sourceWallet?.token.symbol ?? ''} →{' '}\n      {viewModel.destinationWallet?.token.symbol ?? ''}\n    </Button>\n  );\n});\n","import { action, computed, makeObservable } from 'mobx';\nimport assert from 'ts-invariant';\nimport { injectable } from 'tsyringe';\n\nimport type { LoadableRelay } from 'new/app/models/LoadableRelay';\nimport type { PayingFee } from 'new/app/models/PayingFee';\nimport { ViewModel } from 'new/core/viewmodels/ViewModel';\nimport type { SwapViewModel } from 'new/scenes/Main/Swap';\nimport type { Wallet } from 'new/sdk/SolanaSDK';\nimport { Defaults } from 'new/services/Defaults';\nimport { PricesService } from 'new/services/PriceAPIs/PricesService';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\n// @web: i use injectable to don't reset swapViewModel during hmr, it cause\n// page crash then swapViewModel is not available\n@injectable()\nexport class ConfirmSwapModalViewModel extends ViewModel {\n  private _swapViewModel: Readonly<SwapViewModel> | null;\n\n  constructor(private _pricesService: PricesService) {\n    super();\n\n    this._swapViewModel = null;\n\n    makeObservable(this, {\n      sourceWallet: computed,\n      destinationWallet: computed,\n      inputAmount: computed,\n      estimatedAmount: computed,\n      minimumReceiveAmount: computed,\n      exchangeRate: computed,\n      fees: computed,\n      slippage: computed,\n\n      getPrice: action,\n      authenticateAndSwap: action,\n\n      inputAmountString: computed,\n      inputAmountInFiatString: computed,\n      estimatedAmountString: computed,\n      receiveAtLeastString: computed,\n      receiveAtLeastInFiatString: computed,\n\n      totalFees: computed,\n      setSwapViewModel: action,\n    });\n  }\n\n  protected override setDefaults() {\n    // this._swapViewModel = null;\n  }\n\n  protected override onInitialize() {}\n\n  protected override afterReactionsRemoved() {}\n\n  get sourceWallet(): Wallet | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.sourceWallet;\n  }\n\n  get destinationWallet(): Wallet | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.destinationWallet;\n  }\n\n  get inputAmount(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.inputAmount;\n  }\n\n  get estimatedAmount(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.estimatedAmount;\n  }\n\n  get minimumReceiveAmount(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.minimumReceiveAmount;\n  }\n\n  get exchangeRate(): number | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.exchangeRate;\n  }\n\n  get fees(): LoadableRelay<PayingFee[]> {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.fees;\n  }\n\n  get slippage(): number {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.slippage;\n  }\n\n  getPrice(symbol: string): number | null {\n    return this._pricesService.currentPrice(symbol)?.value ?? null;\n  }\n\n  authenticateAndSwap(): void {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    this._swapViewModel.authenticateAndSwap();\n  }\n\n  // Extend\n\n  get inputAmountString(): string {\n    const wallet = this.sourceWallet;\n    const amount = this.inputAmount;\n    return `${numberToString(amount ?? 0, {\n      maximumFractionDigits: 9,\n    })} ${wallet?.token.symbol}`;\n  }\n\n  get inputAmountInFiatString(): string {\n    const wallet = this.sourceWallet;\n    const amount = this.inputAmount;\n    return `${Defaults.fiat.symbol}${numberToString(\n      (amount ?? 0) * (wallet?.priceInCurrentFiat ?? 0),\n      {\n        maximumFractionDigits: 2,\n      },\n    )}`;\n  }\n\n  get estimatedAmountString(): string {\n    const wallet = this.destinationWallet;\n    const amount = this.estimatedAmount;\n    return `${numberToString(amount ?? 0, { maximumFractionDigits: 9 })} ${wallet?.token.symbol}`;\n  }\n\n  get receiveAtLeastString(): string {\n    const wallet = this.destinationWallet;\n    const amount = this.minimumReceiveAmount;\n    return `${numberToString(amount ?? 0, { maximumFractionDigits: 9 })} ${\n      wallet?.token.symbol ?? ''\n    }`;\n  }\n\n  get receiveAtLeastInFiatString(): string {\n    const wallet = this.destinationWallet;\n    const amount = this.minimumReceiveAmount;\n    return `${Defaults.fiat.symbol}${numberToString(\n      (amount ?? 0) * (wallet?.priceInCurrentFiat ?? 0),\n      { maximumFractionDigits: 2 },\n    )}`;\n  }\n\n  // @web: own code\n\n  get totalFees(): {\n    totalFeesSymbol: string;\n    decimals: number;\n    amount: number;\n    amountInFiat: number;\n  } | null {\n    assert(this._swapViewModel, 'SwapViewModel is not set');\n    return this._swapViewModel.totalFees;\n  }\n\n  setSwapViewModel(swapViewModel: Readonly<SwapViewModel>): void {\n    this._swapViewModel = swapViewModel;\n  }\n}\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { Row, Text } from 'components/ui/AccordionDetails/common';\n\nimport type { ConfirmSwapModalViewModel } from '../../ConfirmSwapModal.ViewModel';\n\ninterface Props {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n}\n\nexport const SlippageView: FC<Props> = observer(({ viewModel }) => {\n  return (\n    <Row>\n      <Text className=\"gray\">Max price slippage</Text>\n      <Text>{viewModel.slippage * 100}%</Text>\n    </Row>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\nimport { expr } from 'mobx-utils';\n\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { DetailFeesView } from 'new/scenes/Main/Swap/Swap/Subviews/DetailsView/DetailFeesView';\nimport { RatesStackView } from 'new/scenes/Main/Swap/Swap/Subviews/DetailsView/RatesStackView';\nimport { numberToString } from 'new/utils/NumberExtensions';\n\nimport type { ConfirmSwapModalViewModel } from '../ConfirmSwapModal.ViewModel';\nimport { SlippageView } from './SlippageView';\n\ninterface Props {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n}\n\nexport const DetailsView: FC<Props> = observer(({ viewModel }) => {\n  const totalFee = expr(() => {\n    const totalFees = viewModel.totalFees;\n    if (totalFees) {\n      const { amount, decimals, totalFeesSymbol } = totalFees;\n      return `${numberToString(amount, { maximumFractionDigits: decimals })} ${totalFeesSymbol}`;\n    }\n    return '';\n  });\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Swap details\"\n          titleBottomName=\"Total fee\"\n          titleBottomValue={totalFee}\n        />\n      }\n      open={true}\n      noContentPadding\n    >\n      <RatesStackView\n        exchangeRate={viewModel.exchangeRate}\n        sourceWallet={viewModel.sourceWallet}\n        destinationWallet={viewModel.destinationWallet}\n      />\n      <DetailFeesView viewModel={viewModel} slippageView={<SlippageView viewModel={viewModel} />} />\n    </Accordion>\n  );\n});\n","import type { FC } from 'react';\n\nimport { observer } from 'mobx-react-lite';\n\nimport { TokenAvatar } from 'new/ui/components/common/TokenAvatar';\n\nimport { FieldInfo, InfoTitle, InfoValue, InfoWrapper } from '../../common/styled';\nimport type { ConfirmSwapModalViewModel } from '../ConfirmSwapModal.ViewModel';\n\ninterface Props {\n  viewModel: Readonly<ConfirmSwapModalViewModel>;\n  type: 'source' | 'destination';\n}\n\nexport const WalletView: FC<Props> = observer(({ viewModel, type }) => {\n  const wallet = type === 'source' ? viewModel.sourceWallet : viewModel.destinationWallet;\n  const amountLabel =\n    type === 'source' ? viewModel.inputAmountString : viewModel.estimatedAmountString;\n  const equityAmountLabel =\n    type === 'source'\n      ? `~${viewModel.inputAmountInFiatString}`\n      : `Receive at least: ${viewModel.receiveAtLeastString}`;\n\n  return (\n    <FieldInfo>\n      <TokenAvatar token={wallet?.token} size={44} />\n      <InfoWrapper>\n        <InfoTitle>{amountLabel}</InfoTitle>\n        <InfoValue>{equityAmountLabel}</InfoValue>\n      </InfoWrapper>\n    </FieldInfo>\n  );\n});\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport { observer } from 'mobx-react-lite';\n\nimport { Modal } from 'components/ui/Modal';\nimport { useViewModel } from 'new/core/viewmodels/useViewModel';\nimport type { SwapViewModel } from 'new/scenes/Main/Swap';\nimport { trackEvent } from 'new/sdk/Analytics';\nimport { ButtonCancel } from 'new/ui/components/common/ButtonCancel';\nimport { rounded } from 'new/utils/NumberExtensions';\n\nimport type { ModalPropsType } from '../../ModalManager';\nimport { ArrowDown } from '../common/ArrowDown';\nimport { SectionPassword } from '../common/SectionPassword';\nimport { Section } from '../common/styled';\nimport { ActionButton } from './ActionButton';\nimport { ConfirmSwapModalViewModel } from './ConfirmSwapModal.ViewModel';\nimport { DetailsView } from './DetailsView';\nimport { WalletView } from './WalletView';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n`;\n\nexport interface ConfirmSwapModalProps {\n  viewModel: Readonly<SwapViewModel>;\n}\n\nexport const ConfirmSwapModal: FC<ConfirmSwapModalProps & ModalPropsType> = observer(\n  ({ close, viewModel }) => {\n    const vm = useViewModel(ConfirmSwapModalViewModel);\n    vm.setSwapViewModel(viewModel);\n\n    const [isDisabled, setIsDisabled] = useState(true);\n\n    const handleCloseClick = () => {\n      close(false);\n    };\n\n    const handleConfirmClick = () => {\n      close(true);\n      vm.authenticateAndSwap();\n\n      // track button click\n      trackEvent({\n        name: 'Swap_Approve_Button',\n        params: {\n          Token_A: viewModel.sourceWallet!.token.symbol,\n          Token_B: viewModel.destinationWallet!.token.symbol,\n          Swap_Sum: rounded(viewModel.inputAmount!, viewModel.sourceWallet?.token.decimals || 9),\n          Swap_MAX: viewModel.isUsingAllBalance,\n          Swap_USD: rounded(viewModel.inputAmount! * viewModel.sourceWallet!.priceInCurrentFiat, 2),\n        },\n      });\n    };\n\n    const handleDisabledChange = (flag: boolean) => {\n      setIsDisabled(flag);\n    };\n\n    return (\n      <WrapperModal\n        title={\n          <ModalTitle>\n            Confirm swapping {vm.sourceWallet?.token.symbol ?? ''} →{' '}\n            {vm.destinationWallet?.token.symbol ?? ''}\n          </ModalTitle>\n        }\n        close={handleCloseClick}\n        footer={\n          <>\n            <ActionButton viewModel={vm} disabled={isDisabled} onClick={handleConfirmClick} />\n            <ButtonCancel onClick={handleCloseClick} />\n          </>\n        }\n        noDelimiter={false}\n      >\n        <ActionTitle>You are going to swap</ActionTitle>\n        <Section className=\"swap\">\n          <div>\n            <WalletView viewModel={vm} type=\"source\" />\n            <ArrowDown />\n            <WalletView viewModel={vm} type=\"destination\" />\n          </div>\n          <DetailsView viewModel={vm} />\n        </Section>\n        <SectionPassword onChange={handleDisabledChange} />\n      </WrapperModal>\n    );\n  },\n);\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const ArrowDown: FC = () => {\n  return (\n    <Wrapper>\n      <ArrowIconWrapper>\n        <ArrowIcon name=\"arrow-down\" />\n      </ArrowIconWrapper>\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    grid-gap: 36px;\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n"],"names":["CancelIcon","ButtonCancel","props","hollow","error","name","useCloseTokenAccount","providerMut","useSolana","publicKey","useWallet","handleTX","useSail","updateUserTokenAccountKeys","useTokenAccountsContext","useCallback","params","Error","tx","closeAccount","toBase58","result","success","Wrapper","IconWrapper","CloseAccountIcon","Header","Description","Buttons","ButtonClose","CloseTokenAccountModal","close","closeTokenAccount","useState","handleCloseTokenAButtonClick","setIsExecuting","console","setTimeout","history","disabled","onClick","lightBlue","StyledIcon","ButtonStyled","ErrorModal","primary","CloseButton","CloseIcon","ProceedUsernameModal","updateSettings","useSettings","usernameBannerHiddenByUser","type","ItemWrapper","Info","Top","Bottom","TokenAccountRow","className","loading","width","height","borderRadius","size","token","tokenAccount","value","MainWrapper","SelectedWrapper","InfoWrapper","Line","Text","ChevronIcon","DropDownListContainer","DropDownHeader","DropDownList","FeePaySelector","isShortList","selectorRef","useRef","dropdownRef","listRef","symbols","useMemo","tokenAccounts","markets","useMarketsData","handleAwayClick","e","setIsOpen","useEffect","window","filteredTokenAccounts","account","filteredWithBalance","matchesFilter","sortByRules","filter","handleTokenAccountClick","nextTokenAccount","onTokenAccountChange","ref","state","classNames","isOpen","symbol","placeholder","onChange","nextFilter","setFilter","millisecondsToHMS","milliseconds","seconds","Math","floor","minutes","hours","getHours","pad","String","padStart","HMSCountdown","callback","delay","savedCallback","count","setCount","ms","current","id","setInterval","clearInterval","time","getFormattedHMS","WrapperModal","Section","List","Row","Create","solanaProvider","network","useRenNetwork","useUserTokenAccounts","expiryTime","useLockAndMintProvider","handleCreateAccountClick","setCreating","Bitcoin","ToastManager","title","description","iconName","iconBgClassName","footer","getRemainingGatewayTime","TopUp","useHistory","ReceiveBitcoinModal","nativeBalance","toU64","toNumber","accountRentExemption","SelectListMobileModal","items","Modal","noDelimiter","FieldInfo","WalletIcon","InfoTitle","Username","To","InfoValue","Address","BlueText","AddressText","gray","small","medium","big","address","TokenAndUsd","AmountUSDStyled","TransactionDetails","amount","titleBottomName","titleBottomValue","sendState","open","noContentPadding","prefix","postfix","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","btcAddress","isFullName","test","ModalTitle","SubTitle","ActionTitle","PasswordInputStyled","SendIcon","TransactionConfirmModal","walletProviderInfo","tryUnlockSeedAndMnemonic","useTryUnlockSeedAndMnemonic","validatePassword","setHasError","handleConfirmClick","handleCloseClick","isSecretKeyWallet","DEFAULT_WALLET_PROVIDERS","DefaultWalletType","isDisabled","password","swapInfo","action","renderButtons","setPassword","isError","hasError","noIcon","StatusWrapper","Status","StatusIndicator","FieldRowWrapper","ColumnWrapper","AddressWrapper","AddressTitle","AddressValue","FieldTitleWrapper","PaidByBadge","PaddedHeader","TransactionDetailsModal","source","transaction","useTransaction","signature","sourceTokenAccount","useTokenAccount","usePubkey","destinationTokenAccount","tokenAmount","useTokenAccountAmount","sourceToken","destinationToken","date","dayjs","isShowFeeBadge","titleCase","isShowDetails","destination","shortAddress","renderFromTo","formatNumber","href","getExplorerUrl","target","rel","isCentered","lightGray","setShowDetails","StatusColors","ProgressWrapper","Title","Desc","CloseWrapper","Content","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","mobile","Handle","Delimiter","IconStyled","children","isMobile","useIsMobile","location","useLocation","currentPath","doNotCloseOnPathChangeMobile","config","duration","t","from","transform","enter","leave","fadeTransition","useTransition","useSpring","y","mass","tension","friction","bind","useDrag","set","item","style","n","hasIcon","Boolean","WarningIcon","ErrorHint","WrapperLabel","Input","EyeWrapper","EyeIcon","REGEX_PASSWORD","PasswordInput","isFocused","isShowPassword","onFocus","setIsFocused","onBlur","setIsShowPassword","ActionButton","ActionsMobileModal","layoutViewModel","handleButtonClick","route","fromPage","pathname","icon","ActionRow","isMobilePopupChild","wallet","ChooseBuyTokenMobileModalViewModel","singleton","_wallets","_tokensRepository","solWallet","usdcWallet","solToken","usdcToken","makeObservable","observable","_setWallets","_getBuySelectionWallet","CryptoCurrency","this","addReaction","reaction","newSOLWallet","newUSDCWallet","cryptoCurrency","getWallets","find","mintAddress","getTokenWithMint","runInAction","_getToken","then","newSOLToken","newUSDCToken","ViewModel","ChooseBuyTokenMobileModal","observer","useViewModel","handleRowClick","newPath","push","zIndexes","ExplorerBlockLink","ExternalIcon","TransactionID","transactionID","truncatingMiddle","numOfSymbolsRevealed","numOfSymbolsRevealedInSuffix","ProcessTransactionModalViewModel","injectable","_transactionHandler","rawTransaction","pendingTransaction","observingTransactionIndex","setTransaction","isSwapping","computed","getMainDescription","sendAndObserveTransaction","processingTransaction","PendingTransaction","transactionId","sentAt","Date","status","TransactionStatus","assert","isSwap","mainDescription","index","sendTransaction","unknownErrorInfo","SolanaSDKError","observeTransaction","HeaderLabel","viewModel","text","expr","info","originalText","TransactionStatusType","FeeRelayerError","ProcessTransaction","ProgressIcon","ProgressLine","ProgressStub","BlockWrapper","ProgressView","isSending","isProcessing","isSuccess","newProgress","timerId","setProgress","progress","clearTimeout","ProcessTransactionModal","useLayoutEffect","showExplorerLink","LoaderWrapper","RenBTCButton","buttonText","fee","totalFee","payingWallet","numberToString","maximumFractionDigits","handleClick","trackEvent","createRenBTC","isLoading","Loader","SelectorValue","TokenAvatarStyled","Fees","Label","LabelWrapper","WalletSelectorContent","Defaults","ChooseWalletStyled","position","selector","selectedWallet","onWalletChange","staticWallets","showOtherWallets","RenBTCAccountStatus","RenBTCStatusService","_feeRelayerAPIClient","_orcaSwap","_walletsRepository","_feeRelayer","_feeRelayerContextManager","_minRentExemption","_lamportsPerSignature","_rentExemptMinimum","feeRelayerAPIClient","FeeRelayerAPIClient","FeeRelayerContextManager","owner","provider","solanaAPIClient","load","getMinimumBalanceForRentExemption","AccountInfo","getLamportsPerSignature","wallets","lamports","gt","ZERO","Promise","all","map","w","getCreationFee","catch","group","walletsNew","zip","lte","isNativeSOL","sub","lt","_address","_mint","PublicKey","mint","associatedAccount","getAssociatedTokenAddressSync","SolanaSDKPublicKey","getCurrentContext","feePayer","feePayerAddress","preparing","prepareTransaction","instructions","SPLToken","updating","update","preparedTransaction","context","topUpAndRelayTransaction","TokenAccount","FeeRelayerConfiguration","operationType","StatsInfoOperationType","currency","waitForConfirmation","batchUpdate","string","pubkey","nativeWalletAddress","renBTCAddress","some","Wallet","Token","_mintAddress","feeAmount","FeeAmount","u64","accountBalances","feeCalculator","expectedFee","payingTokenMint","feeInSOL","calculateNeededTopUpAmount","calculateFeeInPayingToken","orcaSwap","payingFeeTokenMint","feeInToken","total","ReceiveBitcoinModalViewModel","_renBTCStatusService","_priceService","choosePayingWalletViewModel","accountStatus","payableWallets","feeInFiat","solanaPubkey","feeInText","reload","walletDidSelect","initialize","_bind","end","nativeWallet","getPayableWallets","length","payingWalletAvailable","topUpRequired","message","convertToBalance","decimals","price","currentPrice","createAccount","LoaderWrapperStyled","AmountSummaryView","amountInFiat","RecipientView","recipient","ConfirmSendModal","rounded","feeToken","Send_Network","capitalizeFirstLetter","Send_Currency","Send_Sum","Send_MAX","Send_USD","Send_Free","Send_Username","Send_Account_Fee_Token","SectionPassword","ConfirmSwapModalViewModel","_pricesService","_swapViewModel","sourceWallet","destinationWallet","inputAmount","estimatedAmount","minimumReceiveAmount","exchangeRate","fees","slippage","getPrice","authenticateAndSwap","inputAmountString","inputAmountInFiatString","estimatedAmountString","receiveAtLeastString","receiveAtLeastInFiatString","totalFees","setSwapViewModel","priceInCurrentFiat","swapViewModel","SlippageView","DetailsView","totalFeesSymbol","AccordionTitle","RatesStackView","DetailFeesView","slippageView","WalletView","amountLabel","equityAmountLabel","ConfirmSwapModal","vm","Token_A","Token_B","Swap_Sum","Swap_MAX","Swap_USD","flag","setIsDisabled","ArrowDown"],"sourceRoot":""}