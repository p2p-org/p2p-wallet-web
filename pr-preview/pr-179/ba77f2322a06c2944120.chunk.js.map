{"version":3,"file":"ba77f2322a06c2944120.chunk.js","mappings":"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","sources":["webpack://@p2p-wallet-web/web/src/components/common/ButtonCancel/ButtonCancel.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ActionsMobileModal/ActionButton/ActionButton.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ActionsMobileModal/ActionsMobileModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ChooseBuyTokenMobileModal/ActionRow.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/ChooseBuyTokenMobileModal/ChooseBuyTokenMobileModal.tsx","webpack://@p2p-wallet-web/web/./src/app/hooks/useCloseTokenAccount.ts","webpack://@p2p-wallet-web/web/src/components/modals/CloseTokenAccountModal/CloseTokenAccountModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ErrorModal/ErrorModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ProceedUsernameModal/ProceedUsernameModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/Create/Create.tsx","webpack://@p2p-wallet-web/web/src/components/modals/ReceiveBitcoinModal/TopUp/TopUp.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/ReceiveBitcoinModal/ReceiveBitcoinModal.tsx","webpack://@p2p-wallet-web/web/./src/components/modals/SelectListMobileModal/SelectListMobileModal.tsx","webpack://@p2p-wallet-web/web/src/components/common/TransactionDetails/TransactionDetails.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/Send/Send.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/Swap/Swap.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionDetailsModal/TransactionDetailsModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionStatusSendModal/TransactionStatusSendModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/TransactionStatusSwapModal/TransactionStatusSwapModal.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/DateHeader/DateHeader.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/SolanaExplorerLink/SolanaExplorerLink.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/TransactionProgress/TransactionProgress.tsx","webpack://@p2p-wallet-web/web/src/components/modals/TransactionInfoModals/common/styled.ts","webpack://@p2p-wallet-web/web/src/components/ui/Modal/Modal.tsx"],"sourcesContent":["import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import type { FC, HTMLAttributes } from 'react';\nimport React from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport { Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n\n  &:not(:last-child)::before {\n    position: absolute;\n\n    bottom: -12px;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  margin-right: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 20px;\n  height: 20px;\n`;\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon: string;\n}\n\nexport const ActionButton: FC<Props> = ({ icon, onClick, children }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      <IconWrapper>\n        <IconStyled name={icon} />\n      </IconWrapper>\n      {children}\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport { styled } from '@linaria/react';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ModalType, useModals } from 'app/contexts';\nimport { ActionButton } from 'components/modals/ActionsMobileModal/ActionButton';\nimport { Modal } from 'components/ui/Modal';\n\nconst Content = styled.div`\n  display: grid;\n  grid-gap: 25px;\n\n  padding: 18px 0;\n`;\n\ninterface Props {}\n\nexport const ActionsMobileModal: FC<Props & ModalPropsType> = ({ close }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { openModal } = useModals();\n\n  const handleButtonClick = (route: string) => () => {\n    close(false);\n    history.push(route, { fromPage: location.pathname });\n  };\n\n  const handleBuyButtonClick = () => {\n    openModal(ModalType.SHOW_MODAL_CHOOSE_BUY_TOKEN_MOBILE);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  return (\n    <Modal close={handleCloseClick} noDelimiter>\n      <Content>\n        <ActionButton icon=\"plus\" onClick={handleBuyButtonClick}>\n          Buy\n        </ActionButton>\n        <ActionButton icon=\"bottom\" onClick={handleButtonClick('/receive')}>\n          Receive\n        </ActionButton>\n        <ActionButton icon=\"top\" onClick={handleButtonClick('/send')}>\n          Send\n        </ActionButton>\n        <ActionButton icon=\"swap\" onClick={handleButtonClick('/swap')}>\n          Swap\n        </ActionButton>\n      </Content>\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\n\nimport { TokenAccountRowContent } from 'components/common/TokenAccountRowContent';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 26px 10px;\n`;\n\ninterface Props {\n  tokenAccount?: TokenAccount;\n  onClick: () => void;\n}\n\nexport const ActionRow: FC<Props> = ({ tokenAccount, onClick }) => {\n  return (\n    <Wrapper onClick={onClick}>\n      <TokenAccountRowContent tokenAccount={tokenAccount} isMobilePopupChild />\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory, useLocation } from 'react-router';\n\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport {\n  useToken,\n  useUserAssociatedTokenAccountsWithNativeSOLOverride,\n} from '@p2p-wallet-web/core';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { useConfig } from 'app/contexts';\nimport { Modal } from 'components/ui/Modal';\n\nimport { ActionRow } from './ActionRow';\n\nexport const ChooseBuyTokenMobileModal: FC<ModalPropsType> = ({ close }) => {\n  const history = useHistory();\n  const location = useLocation();\n  const { tokenConfigs } = useConfig();\n  const tokenSOL = useToken(tokenConfigs['SOL']?.mint);\n  const tokenUSDC = useToken(tokenConfigs['USDC']?.mint);\n\n  const tokenAccountList = useUserAssociatedTokenAccountsWithNativeSOLOverride([\n    tokenSOL,\n    tokenUSDC,\n  ]);\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const handleRowClick = (tokenAccount?: TokenAccount) => {\n    handleCloseClick();\n\n    const symbol = tokenAccount?.balance?.token.symbol || 'SOL';\n    const newPath = `/buy/${symbol}`;\n\n    if (location.pathname !== newPath) {\n      history.push(newPath);\n    }\n  };\n\n  return (\n    <Modal noDelimiter={false} close={handleCloseClick} title=\"Choose a crypto for buying\">\n      {tokenAccountList.map((tokenAccount) => (\n        <ActionRow\n          key={tokenAccount?.key?.toBase58()}\n          tokenAccount={tokenAccount}\n          onClick={() => handleRowClick(tokenAccount)}\n        />\n      ))}\n    </Modal>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useSolana, useTokenAccountsContext, useWallet } from '@p2p-wallet-web/core';\nimport type { HandleTXResponse } from '@p2p-wallet-web/sail';\nimport { useSail } from '@p2p-wallet-web/sail';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { closeAccount } from 'app/instructions';\n\nexport type CloseTokenParams = {\n  publicKey: PublicKey;\n};\n\nexport const useCloseTokenAccount = () => {\n  const { providerMut } = useSolana();\n  const { publicKey } = useWallet();\n  const { handleTX } = useSail();\n  const { updateUserTokenAccountKeys } = useTokenAccountsContext();\n\n  return useCallback(\n    async (params: CloseTokenParams): Promise<HandleTXResponse> => {\n      if (!providerMut) {\n        throw new Error('Provider not ready');\n      }\n\n      const tx = closeAccount(providerMut, params.publicKey, publicKey);\n      const result = await handleTX(tx, `Close token account ${params.publicKey.toBase58()}`);\n      if (result.success) {\n        // TODO: as i checked, you need to reinvestigate better way to update tokens after close\n        // because now it shows after this update\n        updateUserTokenAccountKeys();\n      }\n\n      return result;\n    },\n    [handleTX, providerMut, publicKey],\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type * as web3 from '@solana/web3.js';\nimport type { History } from 'history';\n\nimport { useCloseTokenAccount } from 'app/hooks';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 0;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst CloseAccountIcon = styled(Icon)`\n  width: 25px;\n  height: 25px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px;\n`;\n\nconst ButtonClose = styled(Button)`\n  margin-right: 16px;\n\n  color: #f43d3d;\n\n  border: 1px solid #f43d3d;\n\n  &:disabled {\n    background: #f77;\n    border: none;\n    opacity: 0.5;\n  }\n`;\n\nconst ButtonCancel = styled(Button)`\n  min-width: 93px;\n`;\n\ntype Props = {\n  publicKey: web3.PublicKey;\n  tokenName: string;\n  history: History;\n  close: () => void;\n};\n\nexport const CloseTokenAccountModal: FunctionComponent<Props> = ({\n  publicKey,\n  tokenName,\n  history,\n  close,\n}) => {\n  const closeTokenAccount = useCloseTokenAccount();\n  const [isExecuting, setIsExecuting] = useState(false);\n\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  const handleCloseTokenAButtonClick = async () => {\n    try {\n      setIsExecuting(true);\n      await closeTokenAccount({ publicKey });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsExecuting(false);\n    }\n\n    setTimeout(() => {\n      history.push('/wallets');\n    }, 100);\n\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <CloseAccountIcon name=\"bucket\" />\n      </IconWrapper>\n      <Header>{`Close ${tokenName} account?`}</Header>\n      <Description>\n        Are you sure you want to delete token account? This will permanently disable token transfers\n        to this address and remove it from your wallet.\n      </Description>\n      <Buttons>\n        <ButtonClose disabled={isExecuting} onClick={handleCloseTokenAButtonClick}>\n          Close token account\n        </ButtonClose>\n        <ButtonCancel lightBlue disabled={isExecuting} onClick={handleCloseButtonClick}>\n          Cancel\n        </ButtonCancel>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { rgba } from 'polished';\n\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 504px;\n  flex-direction: column;\n  padding: 32px 0 24px;\n\n  overflow: hidden;\n\n  background: #fff;\n\n  border-radius: 15px;\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  margin: 0 20px;\n  padding: 8px;\n\n  background: #f77;\n  border-radius: 12px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  width: 20px;\n  height: 20px;\n\n  color: #fff;\n`;\n\nconst Header = styled.div`\n  margin-top: 20px;\n  padding: 0 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n  padding: 0 20px;\n  padding-bottom: 32px;\n\n  color: #a3a5ba;\n\n  font-weight: 600;\n  font-size: 16px;\n\n  border-bottom: 1px solid ${rgba('#000', 0.05)};\n`;\n\nconst Buttons = styled.div`\n  padding: 24px 20px 0;\n`;\n\nconst ButtonStyled = styled(Button)`\n  width: 120px;\n`;\n\ntype Props = {\n  icon: string;\n  header: string;\n  text: string;\n  close: () => void;\n};\n\nexport const ErrorModal: FunctionComponent<Props> = ({ icon, header, text, close }) => {\n  const handleCloseButtonClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <IconWrapper>\n        <StyledIcon name={icon} />\n      </IconWrapper>\n      <Header>{header}</Header>\n      <Description>{text}</Description>\n      <Buttons>\n        <ButtonStyled primary onClick={handleCloseButtonClick}>\n          Ok\n        </ButtonStyled>\n      </Buttons>\n    </Wrapper>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { useSettings } from 'app/contexts/general/settings';\nimport { Button, Icon } from 'components/ui';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-basis: 524px;\n  flex-direction: column;\n\n  overflow: hidden;\n\n  background: #fff;\n  border-radius: 15px;\n`;\n\nconst Header = styled.div`\n  padding: 22px 20px;\n\n  font-weight: 600;\n  font-size: 20px;\n\n  text-align: center;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Description = styled.div`\n  padding: 16px 20px 24px;\n\n  font-weight: 600;\n  font-size: 16px;\n`;\n\nconst Buttons = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 16px;\n  padding: 16px 20px;\n`;\n\nconst ButtonCancel = styled(Button)`\n  width: 234px;\n`;\n\nconst CloseButton = styled.button`\n  position: absolute;\n  top: 32px;\n  right: 32px;\n\n  flex-shrink: 0;\n  width: 36px;\n  height: 36px;\n  margin: -10px -12px -10px 0;\n\n  color: #a3a5ba;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n  outline: none;\n  cursor: pointer;\n\n  transition: color 0.15s;\n\n  appearance: none;\n\n  &:hover {\n    color: #000;\n  }\n`;\n\nconst CloseIcon = styled(Icon)`\n  width: 14px;\n  height: 14px;\n`;\n\ntype Props = {\n  close: (isHide?: boolean) => void;\n};\n\nexport const ProceedUsernameModal: FC<Props> = ({ close }) => {\n  const { updateSettings } = useSettings();\n\n  const handleCloseButtonClick = () => {\n    updateSettings({ usernameBannerHiddenByUser: true });\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close();\n  };\n\n  return (\n    <Wrapper>\n      <Header>Proceed without a username?</Header>\n      <Description>\n        Anytime you want, you can easily reserve a username by going to the settings in the Android\n        or iOS app.\n      </Description>\n      <Buttons>\n        <ButtonCancel primary onClick={handleCloseButtonClick}>\n          Proceed &amp; don’t show again\n        </ButtonCancel>\n      </Buttons>\n      <CloseButton type=\"button\" onClick={handleCloseClick}>\n        <CloseIcon name=\"close\" />\n      </CloseButton>\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\n\nimport { Modal } from 'components/ui/Modal';\n\nexport const WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nexport const Section = styled.div`\n  display: grid;\n  grid-gap: 24px;\n  padding: 16px 0 24px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-gap: 16px;\n  margin: 0;\n  padding-left: 32px;\n`;\n\nexport const Row = styled.li``;\n","import type { FC } from 'react';\nimport { useState } from 'react';\n\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport { useSolana, useUserTokenAccounts } from '@p2p-wallet-web/core';\nimport { Bitcoin } from '@renproject/chains-bitcoin';\nimport { Solana } from '@renproject/chains-solana';\nimport type { Token } from '@saberhq/token-utils';\nimport { Feature } from 'flagged';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { FeePaySelector } from 'components/common/FeePaySelector';\nimport { HMSCountdown } from 'components/common/HMSCountdown';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Button } from 'components/ui';\nimport { FEATURE_PAY_BY } from 'config/featureFlags';\nimport { getRemainingGatewayTime } from 'utils/hooks/renBridge/useLockAndMint';\nimport { useRenNetwork } from 'utils/hooks/renBridge/useNetwork';\nimport { useLockAndMintProvider } from 'utils/providers/LockAndMintProvider';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const Create: FC<Props> = ({ close }) => {\n  const solanaProvider = useSolana();\n  const network = useRenNetwork();\n  const tokenAccounts = useUserTokenAccounts();\n  const { expiryTime } = useLockAndMintProvider();\n\n  // TODO: use for progress bar in Modal. Add this feature to modal\n  const [creating, setCreating] = useState(false);\n\n  const handleFeeTokenAccountChange = (\n    _nextToken: Token,\n    nextTokenAccount: TokenAccount | null,\n  ) => {\n    if (!nextTokenAccount?.key) {\n      return;\n    }\n  };\n\n  const handleCreateAccountClick = async () => {\n    try {\n      setCreating(true);\n      await new Solana(solanaProvider, network).createAssociatedTokenAccount(Bitcoin.asset);\n      close(true);\n    } catch (error) {\n      ToastManager.error((error as Error).message);\n      console.error(error);\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleCreateAccountClick}>\n            Pay 0.002928 SOL & Continue\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>. You can choose which currency to pay in\n            below.\n          </Row>\n        </List>\n\n        <Feature name={FEATURE_PAY_BY}>\n          <FeePaySelector\n            tokenAccounts={tokenAccounts}\n            onTokenAccountChange={handleFeeTokenAccountChange}\n            isShortList\n          />\n        </Feature>\n\n        <List>\n          <Row>\n            This address accepts <strong>only Bitcoin</strong>. You may lose assets by sending\n            another coin.\n          </Row>\n          <Row>\n            Minimum transaction amount of <strong>0.000112 BTC</strong>.\n          </Row>\n          <Row>\n            <strong>\n              <HMSCountdown milliseconds={getRemainingGatewayTime(expiryTime)} />\n            </strong>\n            &nbsp; is the remaining time to safely send the assets\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useHistory } from 'react-router';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { Button } from 'components/ui';\nimport { trackEvent } from 'utils/analytics';\n\nimport { List, Row, Section, WrapperModal } from '../common/styled';\n\ntype Props = ModalPropsType;\n\nexport const TopUp: FC<Props> = ({ close }) => {\n  const history = useHistory();\n\n  const handleTopUpClick = () => {\n    trackEvent('Receive_Topping_Up');\n\n    close(false);\n    history.push('/buy');\n  };\n\n  return (\n    <WrapperModal\n      title=\"Receiving via Bitcoin network\"\n      description=\"Make sure you understand these aspects\"\n      iconName=\"clock\"\n      iconBgClassName=\"warning\"\n      close={() => close(false)}\n      footer={\n        <>\n          <Button primary onClick={handleTopUpClick}>\n            Top up your account\n          </Button>\n          <ButtonCancel onClick={() => close(false)} />\n        </>\n      }\n    >\n      <Section>\n        <List>\n          <Row>\n            A <strong>renBTC account is required</strong> to receive bitcoins over the Bitcoin\n            network.\n          </Row>\n          <Row>\n            Your wallet list does not contain a renBTC account, and to create one{' '}\n            <strong>you need to make a transaction</strong>.\n          </Row>\n          <Row>\n            You <strong>don't have funds</strong> to pay for account creation, but if someone sends\n            renBTC to your address, it will be created for you.\n          </Row>\n        </List>\n      </Section>\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport type { u64 } from '@solana/spl-token';\n\nimport type { ModalPropsType } from 'app/contexts';\n\nimport { Create } from './Create';\nimport { TopUp } from './TopUp';\n\ninterface Props {\n  accountRentExemption: u64;\n  nativeBalance: TokenAmount;\n}\n\nexport const ReceiveBitcoinModal: FC<ModalPropsType<boolean, Props>> = (props) => {\n  const nativeLamports = props.nativeBalance?.toU64().toNumber() ?? 0;\n  const lamportsRentExcemption = props.accountRentExemption.toNumber();\n  const isEnoughSol = nativeLamports > lamportsRentExcemption;\n\n  if (isEnoughSol) {\n    return <Create close={props.close} />;\n  }\n\n  return <TopUp close={props.close} />;\n};\n","import type { FC, ReactElement } from 'react';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { Modal } from 'components/ui/Modal';\n\ntype Props = {\n  items: ReactElement[];\n  title?: string;\n};\n\nexport const SelectListMobileModal: FC<ModalPropsType & Props> = ({ items, close, title }) => {\n  return (\n    <Modal noDelimiter={false} close={close} title={title}>\n      {items}\n    </Modal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { UseSendState } from 'app/contexts';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { ListWrapper, Row, Text } from 'components/ui/AccordionDetails/common';\n\nexport interface TransactionDetailsProps {\n  sendState?: UseSendState;\n  btcAddress?: string;\n  isOpen?: boolean;\n  amount?: TokenAmount;\n}\n\nconst TokenAndUsd = styled.div`\n  display: flex;\n`;\n\nconst AmountUSDStyled = styled(AmountUSD)`\n  margin-left: 8px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const TransactionDetails: FC<TransactionDetailsProps> = ({ sendState, amount }) => {\n  /*const {\n    settings: { useFreeTransactions },\n  } = useSettings();*/\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Transaction details\"\n          titleBottomName=\"Total\"\n          titleBottomValue={sendState?.details.totalAmount || ''}\n        />\n      }\n      open={false}\n      noContentPadding\n    >\n      <ListWrapper>\n        <Row>\n          <Text className=\"gray\">Receive</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.receiveAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n        {/*<Row>\n          <Text className=\"gray\">Transaction fee</Text>\n          {useFreeTransactions ? (\n            <Text>\n              Free{' '}\n              <Text className=\"green inline-flex\">\n                (Paid by P2P.org) <FeeTransactionTooltip userFreeFeeLimits={userFreeFeeLimits} />\n              </Text>\n            </Text>\n          ) : (\n            <Text>1</Text>\n          )}\n          <Text>5000 lamport</Text>\n        </Row>*/}\n        {/*sendState?.details.accountCreationAmount ? (\n          <Row>\n            <Text className=\"gray\">{sendState.destinationAccount?.symbol} account creation</Text>\n            <TokenAndUsd>\n              <Text>{sendState.details.accountCreationAmount}</Text>\n              <AmountUSD\n                prefix=\"(~\"\n                postfix=\")\"\n                amount={networkFees?.accountRentExemption}\n                tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n              />\n            </TokenAndUsd>\n          </Row>\n        ) : undefined*/}\n      </ListWrapper>\n      <ListWrapper className=\"total\">\n        <Row>\n          <Text>Total</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.totalAmount}</Text>\n            <AmountUSDStyled prefix=\"(~\" postfix=\")\" value={sendState?.parsedAmount || amount} />\n          </TokenAndUsd>\n        </Row>\n      </ListWrapper>\n    </Accordion>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  To,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props & TransactionDetailsProps> = ({ params, sendState, btcAddress }) => {\n  const address = params.destination?.toBase58?.() || btcAddress;\n  const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>\n                <To>To</To>\n                {isFullName ? params.username : `${params.username}.p2p.sol`}\n              </Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>{address && <AddressText address={address} medium />}</InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <TransactionDetails sendState={sendState} amount={params.amount} />\n    </Section>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/solana/swap';\nimport { formatBigNumber } from 'app/contexts/solana/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { AmountUSD } from 'components/pages/swap/SwapWidget/AmountUSD';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { FeesOriginal } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  FromToWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Overlay,\n  Section,\n  Subtitle,\n  Wrapper,\n} from '../common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  outputTokenName: string;\n  inputAmount: u64;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n  showTitle: boolean;\n}\n\nexport const Swap: FC<Props & FeesOriginalProps> = ({\n  params: { inputTokenName, outputTokenName, inputAmount },\n  swapInfo,\n  showTitle,\n}) => {\n  const { tokenConfigs } = useConfig();\n  const inputDecimals = tokenConfigs[inputTokenName]?.decimals || 0;\n  const outputDecimals = tokenConfigs[outputTokenName]?.decimals || 0;\n  const minReceiveAmount = formatBigNumber(swapInfo.trade.getMinimumOutputAmount(), outputDecimals);\n  const outputAmount = formatBigNumber(swapInfo.trade.getOutputAmount(), outputDecimals);\n\n  return (\n    <Wrapper>\n      {showTitle && <Subtitle>You are going to swap</Subtitle>}\n      <Section className=\"swap\">\n        <FieldInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {formatBigNumber(inputAmount, inputDecimals)} {inputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              <AmountUSD prefix={'~'} amount={inputAmount} tokenName={inputTokenName} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <FromToWrapper>\n          <Overlay>\n            <Icon name={'arrow-down'} />\n          </Overlay>\n        </FromToWrapper>\n      </Section>\n      <Section className=\"top\">\n        <FieldInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {outputAmount} {outputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              Receive at least: {minReceiveAmount} {outputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <FeesOriginal swapInfo={swapInfo} open={false} forPage={false} />\n    </Wrapper>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 27px;\n\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 40%;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 5px;\n  left: -2px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 19px;\n\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { ModalPropsType } from 'app/contexts/general/modals/types';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\nimport type { SwapParams } from './Swap';\nimport { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ntype ModalParams = {\n  type: 'send' | 'swap';\n  params: TransferParams | SwapParams;\n};\n\nexport type TransactionConfirmModalProps = TransactionDetailsProps &\n  ModalParams &\n  FeesOriginalProps;\n\nexport const TransactionConfirmModal: FunctionComponent<\n  ModalPropsType & TransactionConfirmModalProps\n> = ({ type, params, close, btcAddress, swapInfo, sendState }) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    if (type === 'send') {\n      trackEvent('Send_Reviewing');\n    }\n  }, []);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    if (type === 'send') {\n      trackEvent('Send_Verification_Invoked');\n    }\n\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled = isSecretKeyWallet && (!password || hasError);\n\n  const renderTitle = () => {\n    switch (type) {\n      case 'send':\n        return (\n          <ModalTitle>\n            Confirm sending {(params as TransferParams).source.balance?.token.symbol}\n          </ModalTitle>\n        );\n      default:\n        return (\n          <ModalTitle>\n            Confirm swapping {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </ModalTitle>\n        );\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = (\n          <>\n            <SendIcon name=\"swap\" />\n            Swap {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </>\n        );\n        break;\n      case 'send':\n      default:\n        action = (\n          <>\n            <SendIcon name=\"top\" />\n            Send {(params as TransferParams).amount.formatUnits()}\n          </>\n        );\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <ButtonCancel onClick={handleCloseClick} />\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title={renderTitle()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n      noDelimiter={false}\n    >\n      {type === 'send' ? <ActionTitle>You are going to send</ActionTitle> : undefined}\n      {type === 'send' ? (\n        <Send params={params as TransferParams} sendState={sendState} btcAddress={btcAddress} />\n      ) : undefined}\n      {type === 'swap' ? (\n        <Swap params={params as SwapParams} swapInfo={swapInfo} showTitle={true} />\n      ) : undefined}\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled\n            value={password}\n            onChange={handlePasswordChange}\n            isError={hasError}\n          />\n          {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { styled } from '@linaria/react';\nimport {\n  SwapTransaction,\n  titleCase,\n  TransferTransaction,\n  useTokenAccount,\n  useTokenAccountAmount,\n  useTransaction,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { usePubkey } from '@p2p-wallet-web/sail';\nimport type { TransactionSignature } from '@solana/web3.js';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\n\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { trackEvent } from 'utils/analytics';\nimport { getExplorerUrl } from 'utils/connection';\nimport { formatNumber } from 'utils/format';\nimport { shortAddress } from 'utils/tokens';\n\nimport {\n  ButtonExplorer,\n  CloseIcon,\n  CloseWrapper,\n  Content,\n  Desc,\n  FieldsWrapper,\n  FieldTitle,\n  FieldValue,\n  FieldWrapper,\n  Footer,\n  Header,\n  ProgressWrapper,\n  SendWrapper,\n  ShareIcon,\n  ShareWrapper,\n  SwapAmount,\n  SwapBlock,\n  SwapColumn,\n  SwapIcon,\n  SwapInfo,\n  SwapWrapper,\n  Title,\n  ValueCurrency,\n  ValueOriginal,\n  WrapperModal,\n} from '../common/styled';\n\nconst StatusWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 24px;\n`;\n\nconst Status = styled.div`\n  display: flex;\n  align-items: center;\n  height: 32px;\n  padding: 2px 10px;\n\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 20px;\n\n  background: rgba(246, 246, 248, 0.5);\n  border-radius: 6px;\n`;\n\nconst StatusIndicator = styled.div`\n  width: 8px;\n  height: 8px;\n  margin-right: 6px;\n\n  background: #77db7c;\n  border-radius: 2px;\n\n  &.error {\n    background: #f43d3d;\n  }\n\n  &.processing {\n    background: #ffa631;\n  }\n`;\n\nconst FieldRowWrapper = styled(FieldWrapper)`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 36px;\n`;\n\nconst ColumnWrapper = styled.div``;\n\nconst FieldInfo = styled.div`\n  display: flex;\n  margin-top: 15px;\n`;\n\nconst AddressWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nconst AddressTitle = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst AddressValue = styled.div`\n  color: #a3a5ba;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n`;\n\nconst FieldTitleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst PaidByBadge = styled.div`\n  padding: 1px 8px;\n\n  color: #5887ff;\n  font-weight: 600;\n  font-size: 12px;\n\n  background: #eff3ff;\n  border-radius: 4px;\n`;\n\nconst PaddedHeader = styled(Header)`\n  padding: 24px;\n`;\n\ntype Props = {\n  signature: TransactionSignature;\n  source: string;\n  close: () => void;\n};\n\nexport const TransactionDetailsModal: FC<Props> = ({ signature, source: sourceAddress, close }) => {\n  const [isShowDetails, setShowDetails] = useState(false);\n  const { network } = useWallet();\n  const transaction = useTransaction(signature, sourceAddress);\n\n  const sourceTokenAccount = useTokenAccount(usePubkey(transaction?.data?.source));\n  const destinationTokenAccount = useTokenAccount(usePubkey(transaction?.data?.destination));\n\n  const tokenAmount = useTokenAccountAmount(\n    usePubkey(transaction?.details.tokenAccount),\n    transaction?.details.amount,\n  );\n\n  useEffect(() => {\n    const type = transaction?.details.type;\n\n    if (type === 'send') {\n      trackEvent('Send_Process_Shown');\n    } else if (type === 'swap') {\n      trackEvent('Swap_Process_Shown');\n    }\n  }, [transaction?.details.type]);\n\n  // useEffect(() => {\n  //   const mount = async () => {\n  //     const trx = unwrapResult(await dispatch(getTransaction(signature)));\n  //\n  //     if (!trx) {\n  //       setTimeout(mount, 3000);\n  //     }\n  //   };\n  //\n  //   if (!transaction) {\n  //     void mount();\n  //   }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [signature]);\n\n  if (transaction?.loading) {\n    return null;\n  }\n\n  const handleToggleShowDetailsClick = () => {\n    setShowDetails((state) => !state);\n  };\n\n  const renderFromTo = () => {\n    const type = transaction?.details.type;\n\n    const source = transaction?.data?.source;\n    const destination = transaction?.data?.destination;\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <>\n          {source ? (\n            <FieldWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldValue>{source}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n          {destination ? (\n            <FieldWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldValue>{destination}</FieldValue>\n            </FieldWrapper>\n          ) : undefined}\n        </>\n      );\n    }\n\n    if (type && ((source && sourceToken) || (destination && destinationToken))) {\n      return (\n        <FieldRowWrapper>\n          {source && sourceToken ? (\n            <ColumnWrapper>\n              <FieldTitle>From</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar symbol={sourceToken.symbol} address={sourceToken.address} size={48} />\n                <AddressWrapper>\n                  <AddressTitle>{sourceToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(source)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n          {destination && destinationToken ? (\n            <ColumnWrapper>\n              <FieldTitle>To</FieldTitle>\n              <FieldInfo>\n                <TokenAvatar\n                  symbol={destinationToken.symbol}\n                  address={destinationToken.address}\n                  size={48}\n                />\n                <AddressWrapper>\n                  <AddressTitle>{destinationToken.symbol}</AddressTitle>\n                  <AddressValue>{shortAddress(destination)}</AddressValue>\n                </AddressWrapper>\n              </FieldInfo>\n            </ColumnWrapper>\n          ) : undefined}\n        </FieldRowWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const renderAmountBlock = () => {\n    const type = transaction?.details.type;\n\n    const sourceToken = sourceTokenAccount?.balance?.token;\n    const destinationToken = destinationTokenAccount?.balance?.token;\n\n    if (type === 'swap') {\n      return (\n        <SwapWrapper>\n          <SwapColumn>\n            <SwapInfo>\n              {sourceTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={sourceToken?.symbol}\n                  address={sourceToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={50} height={16} />\n                ) : (\n                  <>- {sourceTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n          <SwapBlock>\n            <SwapIcon name=\"swap\" />\n          </SwapBlock>\n          <SwapColumn>\n            <SwapInfo>\n              {destinationTokenAccount?.loading ? (\n                <Skeleton width={44} height={44} borderRadius={12} />\n              ) : (\n                <TokenAvatar\n                  symbol={destinationToken?.symbol}\n                  address={destinationToken?.address}\n                  size={44}\n                />\n              )}\n              <SwapAmount>\n                {sourceTokenAccount?.loading ? (\n                  <Skeleton width={80} height={16} />\n                ) : (\n                  <>+ {destinationTokenAccount?.balance?.formatUnits()}</>\n                )}\n              </SwapAmount>\n            </SwapInfo>\n          </SwapColumn>\n        </SwapWrapper>\n      );\n    }\n\n    if (transaction?.loading || sourceTokenAccount?.loading || tokenAmount.loading) {\n      return (\n        <SendWrapper>\n          <Skeleton width={70} height={53} />\n        </SendWrapper>\n      );\n    }\n\n    if (tokenAmount.balance) {\n      return (\n        <SendWrapper>\n          <ValueCurrency>\n            {transaction?.details.isReceiver ? '+' : '-'} {tokenAmount.balance.formatUnits()}\n          </ValueCurrency>\n          <ValueOriginal>\n            <AmountUSD\n              prefix={transaction?.details.isReceiver ? '+ ' : '- '}\n              value={tokenAmount.balance}\n            />\n          </ValueOriginal>\n        </SendWrapper>\n      );\n    }\n\n    return null;\n  };\n\n  const date = transaction?.raw?.blockTime\n    ? dayjs.unix(transaction.raw.blockTime).format('LLL')\n    : `${transaction?.raw?.slot} SLOT`;\n\n  const isShowFeeBadge =\n    transaction?.data instanceof TransferTransaction && transaction.data.wasPaidByP2POrg;\n\n  return (\n    <WrapperModal close={close}>\n      <PaddedHeader>\n        <Title>{titleCase(transaction?.details.type)}</Title>\n        <Desc title={`${transaction?.raw?.slot} SLOT`}>{date}</Desc>\n        <CloseWrapper onClick={close}>\n          <CloseIcon name=\"close\" />\n        </CloseWrapper>\n      </PaddedHeader>\n      <ProgressWrapper />\n      <Content>\n        {/* {details.typeOriginal === 'transfer' ? ( */}\n        {/*  <SendWrapper> */}\n        {/*    <ValueCurrency> */}\n        {/*      {details.isReceiver ? '+' : '-'} {details.sourceAmount.toNumber()}{' '} */}\n        {/*      {details.sourceToken?.symbol} */}\n        {/*    </ValueCurrency> */}\n        {/*    <ValueOriginal> */}\n        {/*      <AmountUSD */}\n        {/*        prefix={details.isReceiver ? '+' : '-'} */}\n        {/*        symbol={details.sourceToken?.symbol} */}\n        {/*        value={details.sourceAmount} */}\n        {/*      /> */}\n        {/*    </ValueOriginal> */}\n        {/*  </SendWrapper> */}\n        {/* ) : undefined} */}\n\n        {renderAmountBlock()}\n        <StatusWrapper>\n          <Status>\n            <StatusIndicator\n              className={classNames({\n                error: !!transaction?.raw?.meta?.err,\n                // processing: !transaction?.raw?.slot,\n              })}\n            />{' '}\n            {transaction?.raw?.meta?.err\n              ? 'Failed'\n              : !transaction?.raw?.slot\n              ? 'Pending'\n              : 'Completed'}\n          </Status>\n        </StatusWrapper>\n        <FieldsWrapper>\n          {isShowDetails ? (\n            <>\n              {renderFromTo()}\n              {(sourceTokenAccount?.balance && destinationTokenAccount?.balance) ||\n              tokenAmount?.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Amount</FieldTitle>\n                  <FieldValue>\n                    {transaction?.data instanceof SwapTransaction ? (\n                      <>\n                        {sourceTokenAccount?.balance?.formatUnits()} to{' '}\n                        {destinationTokenAccount?.balance?.formatUnits()}\n                      </>\n                    ) : (\n                      <>{tokenAmount?.balance?.formatUnits()}</>\n                    )}\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {tokenAmount.balance ? (\n                <FieldWrapper>\n                  <FieldTitle>Value</FieldTitle>\n                  <FieldValue>\n                    <AmountUSD value={tokenAmount.balance} />\n                  </FieldValue>\n                </FieldWrapper>\n              ) : undefined}\n              {transaction?.raw?.meta ? (\n                <FieldWrapper>\n                  <FieldTitleWrapper>\n                    <FieldTitle>Transaction fee</FieldTitle>\n                    {isShowFeeBadge ? <PaidByBadge>Paid by p2p.org</PaidByBadge> : undefined}\n                  </FieldTitleWrapper>\n                  <FieldValue>{formatNumber(transaction.raw.meta?.fee)} lamports</FieldValue>\n                </FieldWrapper>\n              ) : null}\n              <FieldWrapper>\n                <FieldTitle>Block number</FieldTitle>\n                <FieldValue>#{transaction?.raw?.slot}</FieldValue>\n              </FieldWrapper>\n            </>\n          ) : undefined}\n          <FieldWrapper>\n            <FieldTitle>Transaction ID</FieldTitle>\n            <FieldValue>\n              {signature}{' '}\n              <a\n                href={getExplorerUrl('tx', signature, network)}\n                target=\"_blank\"\n                rel=\"noopener noreferrer noindex\"\n                className=\"button\"\n              >\n                <ShareWrapper>\n                  <ShareIcon name=\"external\" />\n                </ShareWrapper>\n              </a>\n            </FieldValue>\n          </FieldWrapper>\n        </FieldsWrapper>\n      </Content>\n      <Footer className={classNames({ isCentered: true })}>\n        <ButtonExplorer lightGray onClick={handleToggleShowDetailsClick}>\n          {isShowDetails ? 'Hide transaction details' : 'Show transaction details'}\n        </ButtonExplorer>\n      </Footer>\n    </WrapperModal>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useTransaction, useWallet } from '@p2p-wallet-web/core';\nimport { useConnectionContext } from '@saberhq/use-solana';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ToastManager } from 'components/common/ToastManager';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { trackEvent } from 'utils/analytics';\nimport { transferNotification } from 'utils/transactionNotifications';\n\nimport { Send } from '../../TransactionConfirmModal/Send/Send';\nimport { DateHeader, SolanaExplorerLink, TransactionProgress } from '../common';\nimport { CloseIcon, CloseWrapper, Header, Section, WrapperModal } from '../common/styled';\nimport type { TransferParams } from './Send';\n\nexport type TransactionStatusModalProps = TransactionDetailsProps & {\n  action: () => Promise<string>;\n  params: TransferParams;\n};\n\nexport const INITIAL_PROGRESS = 5;\nconst ADDRESS_CHARS_SHOW = 4;\nconst DEFAULT_TRANSACTION_ERROR = 'Transaction error';\nconst CHECK_TRANSACTION_INTERVAL = 3000;\n\nexport const TransactionStatusSendModal: FunctionComponent<\n  ModalPropsType<string | null> & TransactionStatusModalProps\n> = ({ type, action, params, sendState, close }) => {\n  const { provider } = useWallet();\n\n  const { network } = useConnectionContext();\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [signature, setSignature] = useState<string | null>(null);\n  const transaction = useTransaction(signature as string);\n  const [transactionError, setTransactionError] = useState(\n    transaction?.raw?.meta?.err ? DEFAULT_TRANSACTION_ERROR : '',\n  );\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      switch (type) {\n        case 'send': {\n          const resultSignature = await action();\n          setSignature(resultSignature);\n\n          transferNotification({\n            header: 'Sent',\n            text: `- ${params.amount.formatUnits()}`,\n            symbol: params.amount.token.symbol,\n          });\n\n          break;\n        }\n        default:\n          throw new Error('Wrong type');\n      }\n    } catch (error) {\n      // setTransactionError((error as Error).message);\n      setIsExecuting(false);\n\n      if (type === 'send') {\n        ToastManager.error(type, (error as Error).message);\n        setTransactionError(DEFAULT_TRANSACTION_ERROR);\n      }\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = await provider.connection.getTransaction(signature, {\n          commitment: 'confirmed',\n        });\n        if (trx) {\n          if (trx.meta?.err) {\n            setTransactionError(DEFAULT_TRANSACTION_ERROR);\n          } else if (transactionError) {\n            setTransactionError('');\n          }\n        } else {\n          setTimeout(mount, CHECK_TRANSACTION_INTERVAL);\n        }\n      } catch (error) {\n        // setTransactionError((error as Error).message);\n        ToastManager.error((error as Error).message);\n      } finally {\n        setIsExecuting(false);\n      }\n    };\n\n    void mount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signature]);\n\n  const isProcessing = (!signature || !transaction?.key) && !transactionError;\n  const isSuccess = Boolean(signature && transaction?.key && !transactionError);\n  const isError = Boolean(transactionError);\n\n  const shortAddress = sendState?.destinationAddress.replace(\n    sendState?.destinationAddress.substring(\n      ADDRESS_CHARS_SHOW,\n      sendState?.destinationAddress.length - ADDRESS_CHARS_SHOW,\n    ),\n    '...',\n  );\n\n  const handleCloseClick = () => {\n    trackEvent('send_close_click', { transactionConfirmed: !isExecuting });\n\n    close(signature);\n  };\n\n  return (\n    <WrapperModal close={handleCloseClick}>\n      <Section>\n        <Header>\n          {params.amount.token.symbol} → {shortAddress}\n          <CloseWrapper onClick={handleCloseClick}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n          <DateHeader />\n        </Header>\n      </Section>\n      <TransactionProgress\n        isError={isError}\n        isProcessing={isProcessing}\n        isSuccess={isSuccess}\n        isExecuting={isExecuting}\n        label={'Transaction status:'}\n      />\n      <Section>\n        <Send sendState={sendState} params={params} />\n      </Section>\n      <SolanaExplorerLink\n        signature={signature}\n        network={network}\n        amplitudeAction={{\n          name: 'send_explorer_click',\n          data: { transactionConfirmed: !isExecuting },\n        }}\n      />\n    </WrapperModal>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useConnectionContext, useTransaction, useWallet } from '@p2p-wallet-web/core';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Swap } from 'components/modals/TransactionConfirmModal/Swap';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { DateHeader, SolanaExplorerLink, TransactionProgress } from '../common';\nimport { CloseIcon, CloseWrapper, Header, Section, WrapperModal } from '../common/styled';\nimport type { SwapParams } from '../TransactionStatusSendModal/Swap';\n\nconst DEFAULT_TRANSACTION_ERROR = 'Transaction error';\n\ntype SwapActionType = () => Promise<string>;\n\ntype ModalProps = {\n  action: SwapActionType;\n  params: SwapParams;\n};\n\nexport type TransactionStatusModalProps = FeesOriginalProps & ModalProps;\n\nconst CHECK_TRANSACTION_INTERVAL = 3000;\n\nexport const TransactionStatusModal: FunctionComponent<\n  ModalPropsType<string | null> & TransactionStatusModalProps\n> = ({ action, close, swapInfo, params }) => {\n  const { provider } = useWallet();\n\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [signature, setSignature] = useState<string>('');\n  const transaction = useTransaction(signature);\n  const [transactionError, setTransactionError] = useState(\n    transaction?.raw?.meta?.err ? DEFAULT_TRANSACTION_ERROR : '',\n  );\n  const { network } = useConnectionContext();\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      const resultSignature = await action();\n      setSignature(resultSignature);\n    } catch (error) {\n      setIsExecuting(false);\n      setTransactionError(DEFAULT_TRANSACTION_ERROR);\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = await provider.connection.getTransaction(signature, {\n          commitment: 'confirmed',\n        });\n        if (trx) {\n          if (trx?.meta?.err) {\n            setTransactionError(DEFAULT_TRANSACTION_ERROR);\n          } else if (transactionError) {\n            setTransactionError('');\n          }\n        } else {\n          setTimeout(mount, CHECK_TRANSACTION_INTERVAL);\n        }\n      } catch (error) {\n        setTransactionError((error as Error).message);\n        ToastManager.error((error as Error).message);\n      } finally {\n        setIsExecuting(false);\n      }\n    };\n\n    void mount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signature]);\n\n  const handleCloseClick = () => {\n    trackEvent('swap_close_click', { transactionConfirmed: !isExecuting });\n\n    close(signature);\n  };\n  const isError = Boolean(transactionError);\n  const isProcessing = (!signature || !transaction?.key) && !isError;\n  const isSuccess = Boolean(signature && transaction?.key && !isError);\n\n  return (\n    <WrapperModal close={handleCloseClick} noDelimiter>\n      <Section>\n        <Header>\n          {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          <CloseWrapper onClick={handleCloseClick}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n          <DateHeader />\n        </Header>\n      </Section>\n      <TransactionProgress\n        isError={isError}\n        isProcessing={isProcessing}\n        isSuccess={isSuccess}\n        isExecuting={isExecuting}\n        label={'Swap status:'}\n      />\n      <Section>\n        <Swap params={params} swapInfo={swapInfo} forPage={false} showTitle={false} />\n      </Section>\n      <SolanaExplorerLink\n        signature={signature}\n        network={network}\n        amplitudeAction={{\n          name: 'swap_explorer_click',\n          data: { transactionConfirmed: !isExecuting },\n        }}\n      />\n    </WrapperModal>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\nimport dayjs from 'dayjs';\n\nexport const Time = styled.div`\n  color: ${theme.colors.textIcon.primary};\n`;\n\nexport const DateHeaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n\n  & > *:not(:first-child) {\n    margin-left: 4px;\n  }\n`;\nexport const DateHeader: FC = () => {\n  const today = new Date();\n  const utcDiff = today.getHours() - today.getUTCHours();\n\n  return (\n    <DateHeaderWrapper>\n      <span>{dayjs().format('MMMM D, YYYY')}</span>\n      <Time>{dayjs().format('hh:mm:ss')}</Time>\n      <span>\n        (UTC{utcDiff >= 0 ? '+' : '-'}\n        {utcDiff})\n      </span>\n    </DateHeaderWrapper>\n  );\n};\n\nexport default DateHeader;\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { Network } from '@saberhq/solana-contrib';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\nimport { trackEventUniversal } from 'utils/analytics';\nimport type { AmplitudeActions } from 'utils/analytics/types';\nimport { getExplorerUrl } from 'utils/connection';\n\nimport { Footer } from '../styled';\n\ninterface IProps {\n  signature: string | null;\n  network: Network;\n  amplitudeAction: AmplitudeActions;\n}\n\nconst GoToExplorerIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\nconst GoToExplorerLink = styled.a`\n  display: inline-flex;\n  align-items: center;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  text-decoration: none;\n\n  &.isDisabled {\n    pointer-events: none;\n  }\n`;\n\nexport const SolanaExplorerLink: FC<IProps> = (props) => {\n  return (\n    <Footer>\n      <GoToExplorerLink\n        href={props.signature ? getExplorerUrl('tx', props.signature, props.network) : ''}\n        target=\"_blank\"\n        rel=\"noopener noreferrer noindex\"\n        onClick={() => {\n          trackEventUniversal(props.amplitudeAction);\n        }}\n        className={classNames({\n          isDisabled: !props.signature,\n        })}\n      >\n        <GoToExplorerIcon name={'external'} />\n        View in Solana explorer\n      </GoToExplorerLink>\n    </Footer>\n  );\n};\n","import type { FC } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { theme, zIndexes } from '@p2p-wallet-web/ui';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\nimport { INITIAL_PROGRESS } from '../../TransactionStatusSendModal';\nimport { StatusColors, TransactionLabel } from '../styled';\n\nexport const ProgressIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionStatus = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-top: 13px;\n  margin-left: 38px;\n\n  color: ${theme.colors.textIcon.primary};\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const TransactionBadge = styled.div`\n  display: flex;\n  align-items: center;\n\n  margin-left: 4px;\n  padding: 5px 12px;\n\n  color: ${theme.colors.textIcon.secondary};\n\n  font-weight: 500;\n  font-size: 12px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 4px;\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const ProgressLine = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.middle};\n\n  width: ${INITIAL_PROGRESS}%;\n  height: 2px;\n\n  background: ${theme.colors.bg.buttonPrimary};\n\n  transition: width 0.15s;\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const ProgressStub = styled.div`\n  position: absolute;\n\n  left: 0;\n\n  z-index: ${zIndexes.bottom};\n\n  width: 100%;\n  height: 1px;\n\n  background: ${theme.colors.stroke.secondary};\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nexport interface Props {\n  isError: boolean;\n  isProcessing: boolean;\n  isSuccess: boolean;\n  isExecuting: boolean;\n  label: string;\n}\n\nconst UPPER_PROGRESS_BOUND = 95;\nconst LOWER_PROGRESS_BOUND = 7;\nconst FULL_PROGRESS = 100;\nconst CHECK_PROGRESS_INTERVAL = 2500;\n\nexport const TransactionProgress: FC<Props> = (props) => {\n  const [progress, setProgress] = useState(INITIAL_PROGRESS);\n\n  useEffect(() => {\n    let newProgress = INITIAL_PROGRESS;\n\n    if (!props.isExecuting) {\n      return;\n    }\n\n    const timerId = setInterval(() => {\n      if (progress <= UPPER_PROGRESS_BOUND) {\n        newProgress += LOWER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      } else {\n        newProgress = UPPER_PROGRESS_BOUND;\n        setProgress(newProgress);\n      }\n    }, CHECK_PROGRESS_INTERVAL);\n\n    return () => {\n      clearTimeout(timerId);\n      setProgress(FULL_PROGRESS);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isExecuting]);\n\n  const renderStatus = (executing: boolean, success: boolean, error: boolean) => {\n    switch (true) {\n      case executing:\n        return 'Pending';\n      case error:\n        return 'Error';\n      case success:\n        return 'Completed';\n      default:\n        return 'Pending';\n    }\n  };\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressLine\n          style={{ width: `${progress}%` }}\n          className={classNames({\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        />\n        <ProgressStub />\n\n        <BlockWrapper\n          className={classNames({\n            isProcessing: props.isProcessing,\n            isSuccess: props.isSuccess,\n            isError: props.isError,\n          })}\n        >\n          {props.isSuccess ? (\n            <ProgressIcon name=\"success-send\" />\n          ) : (\n            <ProgressIcon name={props.isError ? 'error-send' : 'clock-send'} />\n          )}\n        </BlockWrapper>\n      </ProgressWrapper>\n      <TransactionStatus>\n        {props.label}\n        <TransactionBadge>\n          <TransactionLabel\n            className={classNames({\n              isProcessing: props.isProcessing,\n              isSuccess: props.isSuccess,\n              isError: props.isError,\n            })}\n          />\n          {renderStatus(props.isExecuting, props.isSuccess, props.isError)}\n        </TransactionBadge>\n      </TransactionStatus>\n    </>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme, up, zIndexes } from '@p2p-wallet-web/ui';\n\nimport { Button, Icon } from 'components/ui';\nimport { Content as ModalContent, Modal } from 'components/ui/Modal';\n\nexport const StatusColors = styled.div`\n  &.isProcessing {\n    background: ${theme.colors.system.warningMain};\n  }\n\n  &.isSuccess {\n    background: ${theme.colors.system.successMain};\n  }\n\n  &.isError {\n    background: ${theme.colors.system.errorMain};\n  }\n`;\n\nexport const WrapperModal = styled(Modal)`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  padding: 0;\n  overflow: scroll;\n\n  background: ${theme.colors.bg.primary};\n\n  border-radius: 15px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);\n\n  ${ModalContent} {\n    ${up.tablet} {\n      width: 524px;\n    }\n\n    padding: 0;\n  }\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport const ProgressWrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 55px;\n`;\n\nexport const BlockWrapper = styled(StatusColors)`\n  z-index: ${zIndexes.top};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 55px;\n  height: 55px;\n\n  border-radius: 40%;\n`;\n\nexport const OtherIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const Header = styled.div`\n  position: relative;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 24px;\n  font-style: normal;\n  line-height: 140%;\n  text-align: center;\n`;\n\nexport const Title = styled.div`\n  margin-bottom: 10px;\n\n  color: #000;\n  font-weight: bold;\n  font-size: 20px;\n  line-height: 100%;\n  text-transform: capitalize;\n`;\n\nexport const Desc = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nexport const CloseWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.bg.buttonPrimary};\n\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nexport const CloseIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport const CheckmarkIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n`;\n\nexport const TransactionLabel = styled(StatusColors)`\n  display: block;\n  width: 8px;\n  height: 8px;\n\n  margin-right: 8px;\n`;\n\nexport const Content = styled.div`\n  padding-top: 40px;\n`;\n\nexport const SendWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nexport const ValueCurrency = styled.div`\n  color: #000;\n  font-weight: 600;\n  font-size: 28px;\n  line-height: 120%;\n`;\n\nexport const ValueOriginal = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 120%;\n`;\n\nexport const SwapWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  margin-bottom: 40px;\n`;\n\nexport const SwapColumn = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n\n  &:not(:first-child) {\n    justify-content: flex-start;\n  }\n\n  &:not(:last-child) {\n    justify-content: flex-end;\n  }\n`;\n\nexport const SwapInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SwapBlock = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 32px;\n  margin: 6px 26px 0;\n\n  background: ${theme.colors.bg.buttonSecondary};\n  border-radius: 12px;\n`;\n\nexport const SwapIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const SwapAmount = styled.div`\n  margin-top: 10px;\n\n  color: #000;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 120%;\n`;\n\nexport const FieldsWrapper = styled.div``;\n\nexport const FieldWrapper = styled.div`\n  padding: 16px 30px;\n\n  &:first-child {\n    border-top: 1px solid rgba(0, 0, 0, 0.05);\n  }\n\n  &:not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nexport const FieldTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 21px;\n`;\n\nexport const FieldValue = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 3px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 21px;\n`;\n\nexport const ShareIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.bg.buttonDisabled};\n`;\n\nexport const ShareWrapper = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 36px;\n  height: 36px;\n  margin-left: 20px;\n\n  background: rgba(163, 165, 186, 0.1);\n  border-radius: 8px;\n  cursor: pointer;\n\n  &:hover {\n    background: ${theme.colors.bg.activePrimary};\n\n    ${ShareIcon} {\n      color: ${theme.colors.textIcon.active};\n    }\n  }\n`;\n\nexport const Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 24px 20px;\n\n  border-top: 1px solid rgba(0, 0, 0, 0.05);\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n\n  &.isCentered {\n    justify-content: center;\n  }\n`;\n\nexport const ButtonExplorer = styled(Button)`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 12px 20px;\n`;\n","import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  doNotCloseOnPathChangeMobile?: boolean;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  doNotCloseOnPathChangeMobile,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && !doNotCloseOnPathChangeMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, doNotCloseOnPathChangeMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n"],"names":["CancelIcon","ButtonCancel","props","hollow","error","name","Wrapper","IconWrapper","IconStyled","ActionButton","children","onClick","Content","ActionsMobileModal","close","history","useHistory","location","useLocation","openModal","useModals","handleButtonClick","route","fromPage","pathname","noDelimiter","icon","ModalType","ActionRow","tokenAccount","isMobilePopupChild","ChooseBuyTokenMobileModal","tokenConfigs","useConfig","tokenSOL","useToken","mint","tokenUSDC","tokenAccountList","useUserAssociatedTokenAccountsWithNativeSOLOverride","handleCloseClick","Modal","title","map","symbol","balance","token","newPath","push","handleRowClick","key","toBase58","useCloseTokenAccount","providerMut","useSolana","publicKey","useWallet","handleTX","useSail","updateUserTokenAccountKeys","useTokenAccountsContext","useCallback","params","Error","tx","closeAccount","result","success","CloseAccountIcon","Header","Description","Buttons","ButtonClose","CloseTokenAccountModal","closeTokenAccount","useState","handleCloseTokenAButtonClick","setIsExecuting","console","setTimeout","disabled","lightBlue","StyledIcon","ButtonStyled","ErrorModal","primary","CloseButton","CloseIcon","ProceedUsernameModal","updateSettings","useSettings","usernameBannerHiddenByUser","type","WrapperModal","Section","List","Row","Create","solanaProvider","network","useRenNetwork","tokenAccounts","useUserTokenAccounts","expiryTime","useLockAndMintProvider","handleCreateAccountClick","setCreating","Bitcoin","ToastManager","description","iconName","iconBgClassName","footer","onTokenAccountChange","nextTokenAccount","isShortList","milliseconds","getRemainingGatewayTime","TopUp","trackEvent","ReceiveBitcoinModal","nativeBalance","toU64","toNumber","accountRentExemption","SelectListMobileModal","items","TokenAndUsd","AmountUSDStyled","TransactionDetails","amount","titleBottomName","titleBottomValue","sendState","open","noContentPadding","className","prefix","postfix","value","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","btcAddress","address","isFullName","test","size","medium","Swap","inputAmount","showTitle","inputDecimals","outputDecimals","minReceiveAmount","formatBigNumber","swapInfo","outputAmount","tokenName","forPage","FieldInfo","WalletIcon","InfoWrapper","InfoTitle","Username","To","InfoValue","Subtitle","FromToWrapper","Overlay","ModalTitle","SubTitle","ActionTitle","PasswordInputStyled","SendIcon","TransactionConfirmModal","walletProviderInfo","tryUnlockSeedAndMnemonic","useTryUnlockSeedAndMnemonic","useEffect","validatePassword","setHasError","handleConfirmClick","isSecretKeyWallet","DEFAULT_WALLET_PROVIDERS","DefaultWalletType","isDisabled","password","action","renderButtons","onChange","setPassword","isError","hasError","noIcon","StatusWrapper","Status","StatusIndicator","FieldRowWrapper","ColumnWrapper","AddressWrapper","AddressTitle","AddressValue","FieldTitleWrapper","PaidByBadge","PaddedHeader","TransactionDetailsModal","source","transaction","useTransaction","signature","sourceTokenAccount","useTokenAccount","usePubkey","destinationTokenAccount","tokenAmount","useTokenAccountAmount","sourceToken","destinationToken","date","dayjs","isShowFeeBadge","titleCase","width","height","borderRadius","classNames","isShowDetails","destination","shortAddress","renderFromTo","formatNumber","href","getExplorerUrl","target","rel","isCentered","lightGray","setShowDetails","state","INITIAL_PROGRESS","DEFAULT_TRANSACTION_ERROR","TransactionStatusSendModal","provider","useConnectionContext","executeAction","resultSignature","setSignature","transferNotification","header","text","setTransactionError","mount","commitment","trx","transactionError","isProcessing","isSuccess","Boolean","transactionConfirmed","isExecuting","label","amplitudeAction","data","TransactionStatusModal","Time","DateHeaderWrapper","DateHeader","today","utcDiff","GoToExplorerIcon","GoToExplorerLink","SolanaExplorerLink","trackEventUniversal","ProgressIcon","TransactionStatus","TransactionBadge","ProgressWrapper","ProgressLine","ProgressStub","zIndexes","BlockWrapper","TransactionProgress","newProgress","timerId","setInterval","setProgress","progress","clearTimeout","style","executing","renderStatus","StatusColors","Title","Desc","CloseWrapper","TransactionLabel","SendWrapper","ValueCurrency","ValueOriginal","SwapWrapper","SwapColumn","SwapInfo","SwapBlock","SwapIcon","SwapAmount","FieldsWrapper","FieldWrapper","FieldTitle","FieldValue","ShareIcon","ShareWrapper","Footer","ButtonExplorer","easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","mobile","Handle","Delimiter","isMobile","useIsMobile","currentPath","useRef","doNotCloseOnPathChangeMobile","setIsOpen","config","useMemo","duration","t","from","transform","enter","leave","fadeTransition","useTransition","isOpen","useSpring","y","mass","tension","friction","bind","useDrag","set","item","n","hasIcon"],"sourceRoot":""}