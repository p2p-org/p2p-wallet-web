{"version":3,"sources":["components/modals/TransactionConfirmModal/Swap/Swap.tsx","components/modals/TransactionInfoModals/TransactionStatusSwapModal/TransactionStatusSwapModal.tsx"],"names":["Swap","params","inputAmount","showTitle","tokenConfigs","useConfig","inputDecimals","outputDecimals","minReceiveAmount","formatBigNumber","swapInfo","outputAmount","className","symbol","size","prefix","amount","tokenName","name","open","forPage","DEFAULT_TRANSACTION_ERROR","TransactionStatusModal","provider","useWallet","useState","transaction","useTransaction","network","useConnectionContext","executeAction","a","setIsExecuting","action","resultSignature","setSignature","setTransactionError","useEffect","mount","commitment","trx","transactionError","setTimeout","ToastManager","handleCloseClick","trackEvent","transactionConfirmed","isExecuting","close","isError","Boolean","isProcessing","signature","isSuccess","noDelimiter","onClick","label","amplitudeAction","data"],"mappings":"8OAoCaA,EAAsC,SAAC,GAI9C,YAHJC,OAAQ,EAGJ,EAHI,iBAGJ,EAHI,gBAAmCC,EAGvC,EAHuCA,YADO,EAI9C,EAJ8C,SAGlDC,EACI,EADJA,UAEQC,EAAiBC,cAAjBD,aACFE,GAAgBF,gDAAtB,EACMG,GAAiBH,gDAAvB,EACMI,EAAmBC,YAAgBC,QAAD,yBAAxC,GACMC,EAAeF,YAAgBC,QAAD,kBAApC,GAEA,OACE,8BACGP,GAAa,cAAd,IAAc,oCACd,oBAASS,UAAT,iBACE,8BACE,mBAAaC,OAAb,EAAqCC,KAArC,KACA,8BACE,8BACGL,YAAgBP,EAAjB,GADF,IACgD,KAEhD,4BACE,mBAAWa,OAAX,IAAwBC,OAAxB,EAA6CC,UAA7C,YAIN,4BACE,4BACE,mBAAMC,KAAN,sBAIN,mBAASN,UAAT,eACE,8BACE,mBAAaC,OAAb,EAAsCC,KAAtC,KACA,8BACE,8BACE,EADF,IACiB,KAEjB,mDACoB,EADpB,IACuC,aAK7C,mBAAcJ,SAAd,EAAkCS,MAAlC,EAA+CC,SAA/C,S,8OClEAC,EAAN,oBAaaC,EAET,SAAC,GAAwC,QAAxC,EAAwC,EAAxC,SAAwC,EAAxC,QAAwC,EAAxC,SAA2BrB,EAAa,EAAbA,OACtBsB,EAAaC,cAAbD,SAER,EAAsCE,oBAAtC,sBAAM,EAAN,KAAM,EAAN,KACA,EAAkCA,mBAAlC,uBAAM,EAAN,KAAM,EAAN,KACMC,EAAcC,YAApB,GACA,EAAgDF,mBACnC,OAAXC,QAAW,IAAXA,wEADF,uBAAM,EAAN,KAAM,EAAN,KAGQE,EAAYC,cAAZD,QAEFE,EAAa,uCAAG,4BAAAC,EAAA,sEAElBC,MAFkB,SAIYC,IAJZ,OAIZC,EAJY,OAKlBC,KALkB,gDAOlBH,MACAI,KARkB,yDAAH,qDAYnBC,qBAAU,WACHP,MADPO,IAKAA,qBAAU,WACR,IAAMC,EAAK,uCAAG,8BAAAP,EAAA,yDACZ,EADY,0EAMQR,EAAA,4BAA8C,CAC9DgB,WAAY,cAPJ,QAMJC,EANI,QAUR,OAAIA,QAAJ,IAAIA,GAAJ,UAAIA,cAAJ,OAAIA,EAAJ,IACEJ,KACSK,GACTL,MAGFM,WAAWJ,EAjDrB,KAiCkB,gDAmBVF,EAAoB,KAApBA,SACAO,UAAmB,KAAnBA,SApBU,yBAsBVX,MAtBU,4EAAH,qDA0BNM,MAEJ,CA7BHD,IA+BA,IAAMO,EAAmB,WACvBC,YAAW,mBAAoB,CAAEC,sBAAuBC,IAExDC,MAEIC,EAAUC,QAAhB,GACMC,IAAiBC,KAAa,OAAC1B,QAAD,IAACA,KAAhB,QAArB,EACM2B,EAAYH,QAAQE,IAAS,OAAI1B,QAAJ,IAAIA,OAAJ,EAAIA,EAAb0B,OAA1B,GAEA,OACE,oBAAcJ,MAAd,EAAuCM,aAAvC,YACE,4BACE,8BACG5C,QAAD,eADF,WACqCA,QAAD,gBAClC,mBAAc6C,QAAd,WACE,mBAAWrC,KAAX,YAEF,2BAGJ,mBACE+B,QADF,EAEEE,aAFF,EAGEE,UAHF,EAIEN,YAJF,EAKES,MALF,iBAOA,4BACE,mBAAMvD,OAAN,EAAsBS,SAAtB,EAA0CU,SAA1C,EAA0DjB,WAA1D,MAEF,mBACEiD,UADF,EAEExB,QAFF,EAGE6B,gBAAiB,CACfvC,KADe,sBAEfwC,KAAM,CAAEZ,sBAAuBC","file":"static/js/14.f1fb45f7.chunk.js","sourcesContent":["import type { FC } from 'react';\n\nimport type { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/solana/swap';\nimport { formatBigNumber } from 'app/contexts/solana/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { AmountUSD } from 'components/pages/swap/SwapWidget/AmountUSD';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { FeesOriginal } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  FromToWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Overlay,\n  Section,\n  Subtitle,\n  Wrapper,\n} from '../common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  outputTokenName: string;\n  inputAmount: u64;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n  showTitle: boolean;\n}\n\nexport const Swap: FC<Props & FeesOriginalProps> = ({\n  params: { inputTokenName, outputTokenName, inputAmount },\n  swapInfo,\n  showTitle,\n}) => {\n  const { tokenConfigs } = useConfig();\n  const inputDecimals = tokenConfigs[inputTokenName]?.decimals || 0;\n  const outputDecimals = tokenConfigs[outputTokenName]?.decimals || 0;\n  const minReceiveAmount = formatBigNumber(swapInfo.trade.getMinimumOutputAmount(), outputDecimals);\n  const outputAmount = formatBigNumber(swapInfo.trade.getOutputAmount(), outputDecimals);\n\n  return (\n    <Wrapper>\n      {showTitle && <Subtitle>You are going to swap</Subtitle>}\n      <Section className=\"swap\">\n        <FieldInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {formatBigNumber(inputAmount, inputDecimals)} {inputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              <AmountUSD prefix={'~'} amount={inputAmount} tokenName={inputTokenName} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <FromToWrapper>\n          <Overlay>\n            <Icon name={'arrow-down'} />\n          </Overlay>\n        </FromToWrapper>\n      </Section>\n      <Section className=\"top\">\n        <FieldInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {outputAmount} {outputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              Receive at least: {minReceiveAmount} {outputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <FeesOriginal swapInfo={swapInfo} open={false} forPage={false} />\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { useConnectionContext, useTransaction, useWallet } from '@p2p-wallet-web/core';\n\nimport type { ModalPropsType } from 'app/contexts';\nimport { ToastManager } from 'components/common/ToastManager';\nimport { Swap } from 'components/modals/TransactionConfirmModal/Swap';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { DateHeader, SolanaExplorerLink, TransactionProgress } from '../common';\nimport { CloseIcon, CloseWrapper, Header, Section, WrapperModal } from '../common/styled';\nimport type { SwapParams } from '../TransactionStatusSendModal/Swap';\n\nconst DEFAULT_TRANSACTION_ERROR = 'Transaction error';\n\ntype SwapActionType = () => Promise<string>;\n\ntype ModalProps = {\n  action: SwapActionType;\n  params: SwapParams;\n};\n\nexport type TransactionStatusModalProps = FeesOriginalProps & ModalProps;\n\nconst CHECK_TRANSACTION_INTERVAL = 3000;\n\nexport const TransactionStatusModal: FunctionComponent<\n  ModalPropsType<string | null> & TransactionStatusModalProps\n> = ({ action, close, swapInfo, params }) => {\n  const { provider } = useWallet();\n\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [signature, setSignature] = useState<string>('');\n  const transaction = useTransaction(signature);\n  const [transactionError, setTransactionError] = useState(\n    transaction?.raw?.meta?.err ? DEFAULT_TRANSACTION_ERROR : '',\n  );\n  const { network } = useConnectionContext();\n\n  const executeAction = async () => {\n    try {\n      setIsExecuting(true);\n\n      const resultSignature = await action();\n      setSignature(resultSignature);\n    } catch (error) {\n      setIsExecuting(false);\n      setTransactionError(DEFAULT_TRANSACTION_ERROR);\n    }\n  };\n\n  useEffect(() => {\n    void executeAction();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const mount = async () => {\n      if (!signature) {\n        return;\n      }\n\n      try {\n        const trx = await provider.connection.getTransaction(signature, {\n          commitment: 'confirmed',\n        });\n        if (trx) {\n          if (trx?.meta?.err) {\n            setTransactionError(DEFAULT_TRANSACTION_ERROR);\n          } else if (transactionError) {\n            setTransactionError('');\n          }\n        } else {\n          setTimeout(mount, CHECK_TRANSACTION_INTERVAL);\n        }\n      } catch (error) {\n        setTransactionError((error as Error).message);\n        ToastManager.error((error as Error).message);\n      } finally {\n        setIsExecuting(false);\n      }\n    };\n\n    void mount();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [signature]);\n\n  const handleCloseClick = () => {\n    trackEvent('swap_close_click', { transactionConfirmed: !isExecuting });\n\n    close(signature);\n  };\n  const isError = Boolean(transactionError);\n  const isProcessing = (!signature || !transaction?.key) && !isError;\n  const isSuccess = Boolean(signature && transaction?.key && !isError);\n\n  return (\n    <WrapperModal close={handleCloseClick} noDelimiter>\n      <Section>\n        <Header>\n          {swapInfo.trade.inputTokenName} â†’ {swapInfo.trade.outputTokenName}\n          <CloseWrapper onClick={handleCloseClick}>\n            <CloseIcon name=\"close\" />\n          </CloseWrapper>\n          <DateHeader />\n        </Header>\n      </Section>\n      <TransactionProgress\n        isError={isError}\n        isProcessing={isProcessing}\n        isSuccess={isSuccess}\n        isExecuting={isExecuting}\n        label={'Swap status:'}\n      />\n      <Section>\n        <Swap params={params} swapInfo={swapInfo} forPage={false} showTitle={false} />\n      </Section>\n      <SolanaExplorerLink\n        signature={signature}\n        network={network}\n        amplitudeAction={{\n          name: 'swap_explorer_click',\n          data: { transactionConfirmed: !isExecuting },\n        }}\n      />\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}