{"version":3,"sources":["components/ui/Modal/Modal.tsx","components/modals/TransactionConfirmModal/common/styled.ts","components/common/TransactionDetails/TransactionDetails.tsx","components/modals/TransactionConfirmModal/Send/Send.tsx","components/common/ButtonCancel/ButtonCancel.tsx","components/modals/TransactionConfirmModal/Swap/Swap.tsx","components/modals/TransactionConfirmModal/TransactionConfirmModal.tsx"],"names":["easing","BezierEasing","AnimatedDialogContent","animated","StyledDialogContent","props","mobile","Handle","Header","Delimiter","IconWrapper","IconStyled","Title","Description","CloseIcon","Content","Footer","Modal","children","useState","isMobile","useIsMobile","location","useLocation","currentPath","useRef","useEffect","close","doNotCloseOnPathChangeMobile","setIsOpen","config","useMemo","duration","t","from","transform","enter","leave","fadeTransition","useTransition","isOpen","useSpring","y","mass","tension","friction","bind","useDrag","state","set","item","style","n","className","title","description","name","onClick","noDelimiter","classNames","hasIcon","Boolean","iconName","footer","Section","FieldInfo","WalletIcon","InfoWrapper","InfoTitle","Username","To","InfoValue","Subtitle","Wrapper","FromToWrapper","Overlay","TokenAndUsd","TransactionDetails","amount","useFreeTransactions","useSettings","settings","titleBottomName","titleBottomValue","sendState","open","noContentPadding","prefix","postfix","tokenName","userFreeFeeLimits","networkFees","ArrowWrapper","ArrowIconWrapper","ArrowIcon","Send","btcAddress","address","params","isFullName","test","symbol","size","value","medium","CancelIcon","ButtonCancel","hollow","error","Swap","inputAmount","showTitle","tokenConfigs","useConfig","inputDecimals","outputDecimals","minReceiveAmount","formatBigNumber","swapInfo","outputAmount","userTokenAccounts","feeCompensationInfo","feeLimitsInfo","forPage","WrapperModal","ModalTitle","SubTitle","ActionTitle","PasswordInputStyled","SendIcon","TransactionConfirmModal","walletProviderInfo","useWallet","tryUnlockSeedAndMnemonic","useTryUnlockSeedAndMnemonic","type","trackEvent","validatePassword","a","setHasError","handleConfirmClick","handleCloseClick","isSecretKeyWallet","DEFAULT_WALLET_PROVIDERS","DefaultWalletType","isDisabled","password","renderTitle","action","primary","disabled","renderButtons","solanaProvider","onChange","setPassword","isError","hasError","noIcon"],"mappings":"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","file":"static/js/5.3b49aa83.chunk.js","sourcesContent":["import type { FunctionComponent } from 'react';\nimport * as React from 'react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { animated, useSpring, useTransition } from 'react-spring';\n\nimport { styled } from '@linaria/react';\nimport { theme, up, useIsMobile } from '@p2p-wallet-web/ui';\nimport { DialogContent } from '@reach/dialog';\nimport { useDrag } from '@use-gesture/react';\nimport BezierEasing from 'bezier-easing';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui';\n\n// eslint-disable-next-line @typescript-eslint/no-magic-numbers\nconst easing = BezierEasing(0.7, -0.4, 0.4, 1.4);\n\nconst AnimatedDialogContent = animated(DialogContent);\n\nconst DRAG_MOVEMENT_THRESHOLD = 300;\nconst DRAG_VELOCITY_THRESHOLD = 3;\n\nconst StyledDialogContent = styled(({ ...props }) => <AnimatedDialogContent {...props} />)`\n  max-height: calc(100vh - 80px);\n\n  overflow-y: ${({ mobile }) => (mobile ? 'scroll' : 'hidden')};\n\n  &[data-reach-dialog-content] {\n    position: fixed;\n    right: 0;\n\n    display: flex;\n    flex-direction: column;\n    align-self: flex-end;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n\n    background: ${theme.colors.bg.primary};\n    border-radius: 18px 18px 0 0;\n\n    touch-action: none;\n\n    ${up.tablet} {\n      position: relative;\n      right: unset;\n      bottom: unset;\n\n      align-self: center;\n      width: unset;\n      height: unset;\n      margin: 0;\n\n      border-radius: 12px;\n    }\n  }\n\n  &:focus-visible {\n    outline: none;\n  }\n`;\n\nconst Handle = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 16px;\n\n  &::before {\n    position: absolute;\n\n    width: 31px;\n    height: 4px;\n\n    background: ${theme.colors.textIcon.buttonDisabled};\n\n    content: '';\n  }\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  min-height: 74px;\n`;\n\nconst Delimiter = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.hasIcon {\n    height: 44px;\n\n    ${up.tablet} {\n      height: 56px;\n    }\n  }\n\n  &::before {\n    position: absolute;\n\n    width: 100%;\n    height: 1px;\n\n    background: ${theme.colors.stroke.secondary};\n\n    content: '';\n  }\n`;\n\nconst IconWrapper = styled.div`\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 44px;\n  height: 44px;\n\n  border-radius: 12px;\n\n  ${up.tablet} {\n    width: 56px;\n    height: 56px;\n  }\n\n  &.warning {\n    background: ${theme.colors.system.warningMain};\n  }\n`;\n\nconst IconStyled = styled(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.buttonPrimary};\n\n  ${up.tablet} {\n    width: 32px;\n    height: 32px;\n  }\n`;\n\nconst Title = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst Description = styled.div`\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nconst CloseIcon = styled(Icon)`\n  position: absolute;\n  top: 25px;\n  right: 20px;\n\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.active};\n\n  cursor: pointer;\n`;\n\nexport const Content = styled.div`\n  padding: 0 16px;\n\n  ${up.tablet} {\n    padding: 0 20px;\n  }\n`;\n\nconst Footer = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n  padding: 0 16px;\n\n  ${up.tablet} {\n    grid-auto-flow: column;\n    padding: 20px;\n  }\n`;\n\nexport type ModalProps = {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  iconName?: string;\n  iconBgClassName?: string;\n\n  noDelimiter?: boolean;\n  close: () => void;\n  doNotCloseOnPathChangeMobile?: boolean;\n  className?: string;\n};\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  title,\n  description,\n  footer,\n  iconName,\n  iconBgClassName,\n\n  noDelimiter,\n  close,\n  doNotCloseOnPathChangeMobile,\n  className,\n\n  children,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const location = useLocation();\n  const currentPath = useRef(location.pathname);\n\n  useEffect(() => {\n    if (isMobile && !doNotCloseOnPathChangeMobile && currentPath.current !== location.pathname) {\n      close();\n    }\n  }, [isMobile, doNotCloseOnPathChangeMobile, location.pathname]);\n\n  useEffect(() => {\n    setIsOpen(true);\n\n    return () => {\n      setIsOpen(false);\n    };\n  }, []);\n\n  const config = useMemo(() => {\n    if (isMobile) {\n      return {\n        config: { duration: 600, easing: (t: number) => easing(t) },\n        from: { transform: 'translateY(100px)' },\n        enter: { transform: 'translateX(0)' },\n        leave: { transform: 'translateY(100px)' },\n      };\n    }\n\n    return {\n      // config: { duration: 600, easing: (t: number) => easing(t) },\n      // from: { transform: 'translateX(422px)' },\n      // enter: { transform: 'translateX(0)' },\n      // leave: { transform: 'translateX(422px)' },\n    };\n  }, [isMobile]);\n\n  const fadeTransition = useTransition(isOpen, null, config);\n\n  const [{ y }, set] = useSpring(() => ({ y: 0, config: { mass: 1, tension: 210, friction: 20 } }));\n  const bind = useDrag((state) => {\n    set({\n      y: state.down ? state.movement[1] : 0,\n    });\n    if (\n      state.movement[1] > DRAG_MOVEMENT_THRESHOLD ||\n      (state.velocity[1] > DRAG_VELOCITY_THRESHOLD && state.direction[1] > 0)\n    ) {\n      close();\n    }\n  });\n\n  return (\n    <>\n      {fadeTransition.map(\n        ({ item, key, props }) =>\n          item && (\n            <StyledDialogContent\n              key={key}\n              {...(isMobile\n                ? {\n                    ...bind(),\n                    style: {\n                      ...props,\n                      transform: y.interpolate((n) => `translateY(${(n as number) > 0 ? n : 0}px)`),\n                    },\n                  }\n                : {\n                    style: props,\n                  })}\n              aria-label=\"dialog\"\n              className={className}\n            >\n              {isMobile ? <Handle /> : undefined}\n              {title || description ? (\n                <Header>\n                  {title ? <Title>{title}</Title> : undefined}\n                  {description ? <Description>{description}</Description> : undefined}\n                  {!isMobile ? <CloseIcon name=\"cross\" onClick={close} /> : undefined}\n                </Header>\n              ) : undefined}\n              {!noDelimiter ? (\n                <Delimiter className={classNames({ hasIcon: Boolean(iconName) })}>\n                  {iconName ? (\n                    <IconWrapper className={iconBgClassName}>\n                      <IconStyled name={iconName} />\n                    </IconWrapper>\n                  ) : undefined}\n                </Delimiter>\n              ) : undefined}\n              {children ? <Content>{children}</Content> : undefined}\n              {footer ? <Footer>{footer}</Footer> : undefined}\n            </StyledDialogContent>\n          ),\n      )}\n    </>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { IconProps } from 'components/ui';\nimport { Icon } from 'components/ui';\n\nexport const Section = styled.div`\n  display: grid;\n  padding: 20px 0;\n\n  &.swap {\n    position: relative;\n\n    padding: 0;\n  }\n\n  &.send {\n    grid-gap: 16px;\n    padding: 16px 0;\n  }\n\n  &.password {\n    padding: 8px 0 24px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  color: ${theme.colors.bg.buttonDisabled};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nexport const FieldInfo = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 12px 20px;\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n`;\n\nexport const WalletIcon = styled<IconProps>(Icon)`\n  width: 24px;\n  height: 24px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 44px;\n  height: 44px;\n\n  background: ${theme.colors.bg.secondary};\n  border-radius: 12px;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 9px 0 12px;\n`;\n\nexport const InfoTitle = styled.div`\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n\n  &.secondary {\n    color: ${theme.colors.textIcon.secondary};\n    font-size: 14px;\n    line-height: 120%;\n  }\n`;\n\nexport const Username = styled(InfoTitle)`\n  color: #000;\n  font-weight: 500;\n  font-size: 14px;\n`;\n\nexport const To = styled.span`\n  margin-right: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n`;\n\nexport const InfoValue = styled.div`\n  margin-top: 4px;\n\n  color: ${theme.colors.textIcon.secondary};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 120%;\n  letter-spacing: 0.01em;\n`;\n\nexport const Subtitle = styled.div`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  margin-left: 20px;\n\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nexport const Wrapper = styled.div`\n  margin-bottom: 8px;\n`;\n\nexport const FromToWrapper = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 27px;\n\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 40%;\n\n  svg {\n    width: 20px;\n    height: 20px;\n  }\n`;\n\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 5px;\n  left: -2px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 19px;\n\n  background: ${theme.colors.bg.primary};\n`;\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { u64 } from '@saberhq/token-utils';\n\nimport type { NetworkFees, UseSendState } from 'app/contexts';\nimport { useSettings } from 'app/contexts';\nimport type { INITIAL_USER_FREE_FEE_LIMITS } from 'app/contexts/api/feeRelayer/utils';\nimport { FeeTransactionTooltip } from 'components/common/TransactionDetails/FeeTransactinTooltip';\nimport { AmountUSDStyled } from 'components/pages/swap/SwapWidget/AmountUSD';\nimport { Accordion } from 'components/ui';\nimport { AccordionTitle } from 'components/ui/AccordionDetails/AccordionTitle';\nimport { ListWrapper, Row, Text } from 'components/ui/AccordionDetails/common';\n\nexport interface TransactionDetailsProps {\n  sendState?: UseSendState;\n  userFreeFeeLimits?: typeof INITIAL_USER_FREE_FEE_LIMITS;\n  networkFees: NetworkFees;\n  btcAddress?: string;\n  isOpen?: boolean;\n  amount?: u64;\n}\n\nconst TokenAndUsd = styled.div`\n  display: flex;\n`;\n\nexport const TransactionDetails: FC<TransactionDetailsProps> = ({\n  sendState,\n  userFreeFeeLimits,\n  networkFees,\n  amount,\n}) => {\n  const {\n    settings: { useFreeTransactions },\n  } = useSettings();\n\n  return (\n    <Accordion\n      title={\n        <AccordionTitle\n          title=\"Transaction details\"\n          titleBottomName=\"Total\"\n          titleBottomValue={sendState?.details.totalAmount || ''}\n        />\n      }\n      open={false}\n      noContentPadding\n    >\n      <ListWrapper>\n        <Row>\n          <Text className=\"gray\">Receive</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.receiveAmount}</Text>\n            <AmountUSDStyled\n              prefix=\"(~\"\n              postfix=\")\"\n              amount={sendState?.parsedAmount?.toU64() || amount}\n              tokenName={sendState?.fromTokenAccount?.balance?.token.symbol}\n            />\n          </TokenAndUsd>\n        </Row>\n        <Row>\n          <Text className=\"gray\">Transaction fee</Text>\n          {useFreeTransactions ? (\n            <Text>\n              Free{' '}\n              <Text className=\"green inline-flex\">\n                (Paid by P2P.org)\n                {userFreeFeeLimits && (\n                  <FeeTransactionTooltip userFreeFeeLimits={userFreeFeeLimits} />\n                )}\n              </Text>\n            </Text>\n          ) : (\n            <Text>1</Text>\n          )}\n        </Row>\n        {sendState?.details.accountCreationAmount ? (\n          <Row>\n            <Text className=\"gray\">{sendState.destinationAccount?.symbol} account creation</Text>\n            <TokenAndUsd>\n              <Text>{sendState.details.accountCreationAmount}</Text>\n              <AmountUSDStyled\n                prefix=\"(~\"\n                postfix=\")\"\n                amount={networkFees?.accountRentExemption}\n                tokenName={sendState.fromTokenAccount?.balance?.token.symbol}\n              />\n            </TokenAndUsd>\n          </Row>\n        ) : undefined}\n      </ListWrapper>\n      <ListWrapper className=\"total\">\n        <Row>\n          <Text>Total</Text>\n          <TokenAndUsd>\n            <Text>{sendState?.details.totalAmount}</Text>\n            <AmountUSDStyled\n              prefix=\"(~\"\n              postfix=\")\"\n              amount={sendState?.parsedAmount?.toU64() || amount}\n              tokenName={sendState?.fromTokenAccount?.balance?.token.symbol}\n            />\n          </TokenAndUsd>\n        </Row>\n      </ListWrapper>\n    </Accordion>\n  );\n};\n","import type { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport type { TokenAccount } from '@p2p-wallet-web/core';\nimport type { TokenAmount } from '@p2p-wallet-web/token-utils';\nimport { theme } from '@p2p-wallet-web/ui';\nimport type { PublicKey } from '@solana/web3.js';\n\nimport { AddressText } from 'components/common/AddressText';\nimport { AmountUSD } from 'components/common/AmountUSD';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport { TransactionDetails } from 'components/common/TransactionDetails';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  IconWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Section,\n  To,\n  Username,\n  WalletIcon,\n} from '../common/styled';\n\nconst ArrowWrapper = styled.div`\n  position: relative;\n\n  height: 16px;\n  margin-left: 26px;\n`;\n\nconst ArrowIconWrapper = styled.div`\n  position: relative;\n  top: -8px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  color: ${theme.colors.textIcon.active};\n\n  background: ${theme.colors.bg.primary};\n  border: 1px solid ${theme.colors.stroke.secondary};\n  border-radius: 12px;\n\n  &::before,\n  &::after {\n    position: absolute;\n\n    width: 1px;\n    height: 16px;\n\n    background: ${theme.colors.bg.primary};\n\n    content: '';\n  }\n\n  &::before {\n    left: -1px;\n  }\n\n  &::after {\n    right: -1px;\n  }\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n`;\n\nexport type TransferParams = {\n  source: TokenAccount;\n  destination: PublicKey;\n  amount: TokenAmount;\n  username?: string;\n};\n\ninterface Props {\n  params: TransferParams;\n}\n\nexport const Send: FC<Props & TransactionDetailsProps> = ({\n  params,\n  sendState,\n  userFreeFeeLimits,\n  networkFees,\n  btcAddress,\n}) => {\n  const address = params.destination?.toBase58?.() || btcAddress;\n  const isFullName = /\\w*\\.\\w+/.test(params.username || '');\n\n  return (\n    <Section className=\"send\">\n      <div>\n        <FieldInfo>\n          <TokenAvatar\n            symbol={params.source.balance?.token.symbol}\n            address={params.source.balance?.token.address}\n            size={44}\n          />\n          <InfoWrapper>\n            <InfoTitle>{params.amount.formatUnits()}</InfoTitle>\n            <InfoValue>\n              <AmountUSD value={params.amount} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <ArrowWrapper>\n          <ArrowIconWrapper>\n            <ArrowIcon name=\"arrow-down\" />\n          </ArrowIconWrapper>\n        </ArrowWrapper>\n        <FieldInfo>\n          <IconWrapper>\n            <WalletIcon name=\"wallet\" />\n          </IconWrapper>\n          <InfoWrapper>\n            {params.username ? (\n              <Username>\n                <To>To</To>\n                {isFullName ? params.username : `${params.username}.p2p.sol`}\n              </Username>\n            ) : (\n              <InfoTitle className=\"secondary\">To address</InfoTitle>\n            )}\n            <InfoValue>{address && <AddressText address={address} medium />}</InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </div>\n\n      <TransactionDetails\n        sendState={sendState}\n        userFreeFeeLimits={userFreeFeeLimits}\n        networkFees={networkFees}\n        amount={params.amount.toU64()}\n      />\n    </Section>\n  );\n};\n","import type { FC } from 'react';\nimport * as React from 'react';\n\nimport { styled } from '@linaria/react';\n\nimport { Button, Icon } from 'components/ui';\n\nconst CancelIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 8px;\n`;\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport const ButtonCancel: FC<Props> = (props) => {\n  return (\n    <Button {...props} hollow error>\n      <CancelIcon name=\"cross\" />\n      Cancel\n    </Button>\n  );\n};\n","import type { FC } from 'react';\n\nimport type { u64 } from '@solana/spl-token';\n\nimport { useConfig } from 'app/contexts/solana/swap';\nimport { formatBigNumber } from 'app/contexts/solana/swap/utils/format';\nimport { TokenAvatar } from 'components/common/TokenAvatar';\nimport { AmountUSD } from 'components/pages/swap/SwapWidget/AmountUSD';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { FeesOriginal } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Icon } from 'components/ui';\n\nimport {\n  FieldInfo,\n  FromToWrapper,\n  InfoTitle,\n  InfoValue,\n  InfoWrapper,\n  Overlay,\n  Section,\n  Subtitle,\n  Wrapper,\n} from '../common/styled';\n\nexport type SwapParams = {\n  inputTokenName: string;\n  outputTokenName: string;\n  inputAmount: u64;\n  minimumOutputAmount: u64;\n};\n\ninterface Props {\n  params: SwapParams;\n  showTitle: boolean;\n}\n\nexport const Swap: FC<Props & FeesOriginalProps> = ({\n  params: { inputTokenName, outputTokenName, inputAmount },\n  swapInfo,\n  userTokenAccounts,\n  feeLimitsInfo,\n  networkFees,\n  feeCompensationInfo,\n  showTitle,\n}) => {\n  const { tokenConfigs } = useConfig();\n  const inputDecimals = tokenConfigs[inputTokenName]?.decimals || 0;\n  const outputDecimals = tokenConfigs[outputTokenName]?.decimals || 0;\n  const minReceiveAmount = formatBigNumber(swapInfo.trade.getMinimumOutputAmount(), outputDecimals);\n  const outputAmount = formatBigNumber(swapInfo.trade.getOutputAmount(), outputDecimals);\n\n  return (\n    <Wrapper>\n      {showTitle && <Subtitle>You are going to swap</Subtitle>}\n      <Section className=\"swap\">\n        <FieldInfo>\n          <TokenAvatar symbol={inputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {formatBigNumber(inputAmount, inputDecimals)} {inputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              <AmountUSD prefix={'~'} amount={inputAmount} tokenName={inputTokenName} />\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n        <FromToWrapper>\n          <Overlay>\n            <Icon name={'arrow-down'} />\n          </Overlay>\n        </FromToWrapper>\n      </Section>\n      <Section className=\"top\">\n        <FieldInfo>\n          <TokenAvatar symbol={outputTokenName} size={44} />\n          <InfoWrapper>\n            <InfoTitle>\n              {outputAmount} {outputTokenName}\n            </InfoTitle>\n            <InfoValue>\n              Receive at least: {minReceiveAmount} {outputTokenName}\n            </InfoValue>\n          </InfoWrapper>\n        </FieldInfo>\n      </Section>\n      <FeesOriginal\n        swapInfo={swapInfo}\n        userTokenAccounts={userTokenAccounts}\n        feeCompensationInfo={feeCompensationInfo}\n        feeLimitsInfo={feeLimitsInfo}\n        networkFees={networkFees}\n        open={false}\n        forPage={false}\n      />\n    </Wrapper>\n  );\n};\n","import type { FunctionComponent } from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport {\n  DEFAULT_WALLET_PROVIDERS,\n  DefaultWalletType,\n  useTryUnlockSeedAndMnemonic,\n  useWallet,\n} from '@p2p-wallet-web/core';\nimport { theme } from '@p2p-wallet-web/ui';\n\nimport type { ModalPropsType } from 'app/contexts/general/modals/types';\nimport { ButtonCancel } from 'components/common/ButtonCancel';\nimport { ErrorHint } from 'components/common/ErrorHint';\nimport { PasswordInput } from 'components/common/PasswordInput';\nimport type { TransactionDetailsProps } from 'components/common/TransactionDetails';\nimport type { FeesOriginalProps } from 'components/pages/swap/SwapWidget/Fees/FeesOriginal';\nimport { Button, Icon } from 'components/ui';\nimport { Modal } from 'components/ui/Modal';\nimport { trackEvent } from 'utils/analytics';\n\nimport { Section } from './common/styled';\nimport type { TransferParams } from './Send';\nimport { Send } from './Send';\nimport type { SwapParams } from './Swap';\nimport { Swap } from './Swap';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 524px;\n`;\n\nconst ModalTitle = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 140%;\n  text-align: center;\n`;\n\nconst SubTitle = styled.span`\n  display: flex;\n  margin-bottom: 8px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst ActionTitle = styled.div`\n  padding: 16px 0 0 16px;\n\n  color: ${theme.colors.textIcon.primary};\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 140%;\n  letter-spacing: 0.01em;\n`;\n\nconst PasswordInputStyled = styled(PasswordInput)`\n  height: 46px;\n`;\n\nconst SendIcon = styled(Icon)`\n  width: 24px;\n  height: 24px;\n  margin-right: 12px;\n`;\n\ntype ModalParams = {\n  type: 'send' | 'swap';\n  params: TransferParams | SwapParams;\n};\n\nexport type TransactionConfirmModalProps = TransactionDetailsProps &\n  ModalParams &\n  FeesOriginalProps;\n\nexport const TransactionConfirmModal: FunctionComponent<\n  ModalPropsType & TransactionConfirmModalProps\n> = ({\n  type,\n  params,\n  close,\n  btcAddress,\n  swapInfo,\n  sendState,\n  userTokenAccounts,\n  userFreeFeeLimits,\n  feeCompensationInfo,\n  feeLimitsInfo,\n  solanaProvider,\n  networkFees,\n}) => {\n  const { walletProviderInfo } = useWallet();\n  const tryUnlockSeedAndMnemonic = useTryUnlockSeedAndMnemonic();\n\n  const [password, setPassword] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    if (type === 'send') {\n      trackEvent('Send_Reviewing');\n    }\n  }, []);\n\n  const validatePassword = async (value: string) => {\n    try {\n      await tryUnlockSeedAndMnemonic(value);\n      setHasError(false);\n    } catch (error) {\n      setHasError(true);\n    }\n  };\n\n  const handlePasswordChange = (value: string) => {\n    setPassword(value);\n\n    if (value) {\n      void validatePassword(value);\n    }\n  };\n\n  const handleConfirmClick = () => {\n    if (type === 'send') {\n      trackEvent('Send_Verification_Invoked');\n    }\n\n    close(true);\n  };\n\n  const handleCloseClick = () => {\n    close(false);\n  };\n\n  const isSecretKeyWallet =\n    walletProviderInfo?.name === DEFAULT_WALLET_PROVIDERS[DefaultWalletType.SecretKey].name;\n  const isDisabled = isSecretKeyWallet && (!password || hasError);\n\n  const renderTitle = () => {\n    switch (type) {\n      case 'send':\n        return (\n          <ModalTitle>\n            Confirm sending {(params as TransferParams).source.balance?.token.symbol}\n          </ModalTitle>\n        );\n      default:\n        return (\n          <ModalTitle>\n            Confirm swapping {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </ModalTitle>\n        );\n    }\n  };\n\n  const renderButtons = () => {\n    let action;\n\n    switch (type) {\n      case 'swap':\n        action = (\n          <>\n            <SendIcon name=\"swap\" />\n            Swap {swapInfo.trade.inputTokenName} → {swapInfo.trade.outputTokenName}\n          </>\n        );\n        break;\n      case 'send':\n      default:\n        action = (\n          <>\n            <SendIcon name=\"top\" />\n            Send {(params as TransferParams).amount.formatUnits()}\n          </>\n        );\n        break;\n    }\n\n    return (\n      <>\n        <Button primary disabled={isDisabled} onClick={handleConfirmClick}>\n          {action}\n        </Button>\n        <ButtonCancel onClick={handleCloseClick} />\n      </>\n    );\n  };\n\n  return (\n    <WrapperModal\n      title={renderTitle()}\n      close={handleCloseClick}\n      footer={renderButtons()}\n      noDelimiter={false}\n    >\n      {type === 'send' ? <ActionTitle>You are going to send</ActionTitle> : undefined}\n      {type === 'send' ? (\n        <Send\n          params={params as TransferParams}\n          sendState={sendState}\n          userFreeFeeLimits={userFreeFeeLimits}\n          networkFees={networkFees}\n          btcAddress={btcAddress}\n        />\n      ) : undefined}\n      {type === 'swap' ? (\n        <Swap\n          params={params as SwapParams}\n          swapInfo={swapInfo}\n          userTokenAccounts={userTokenAccounts}\n          feeCompensationInfo={feeCompensationInfo}\n          feeLimitsInfo={feeLimitsInfo}\n          solanaProvider={solanaProvider}\n          networkFees={networkFees}\n          showTitle={true}\n        />\n      ) : undefined}\n\n      {isSecretKeyWallet ? (\n        <Section className=\"password\">\n          <SubTitle>Enter password to confirm</SubTitle>\n          <PasswordInputStyled\n            value={password}\n            onChange={handlePasswordChange}\n            isError={hasError}\n          />\n          {hasError ? <ErrorHint error=\"The password is not correct\" noIcon /> : undefined}\n        </Section>\n      ) : undefined}\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}